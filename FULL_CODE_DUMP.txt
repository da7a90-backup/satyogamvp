// === ./.eslintrc.json ===
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

// === ./components.json ===
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
// === ./next-env.d.ts ===
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

// === ./next.config.ts ===
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  reactStrictMode: true,
  images: {
    domains: ["res.cloudinary.com", "localhost", "127.0.0.1","www.members.satyoga.org"],
  },
};

export default nextConfig;



// === ./src/api/course-progress/services/course-progress.js ===
"use strict";

/**
 * course-progress service
 */

module.exports = {
  // Method to create a course progress entry when a user enrolls
  async createOnEnrollment(userId, courseId) {
    try {
      // First, get the course to access its classes
      const course = await strapi.entityService.findOne(
        "api::course.course",
        courseId,
        {
          populate: ["classes"],
        }
      );

      if (!course) {
        throw new Error(`Course with ID ${courseId} not found`);
      }

      // Get all classes for this course
      const classes = await strapi.entityService.findMany(
        "api::course-class.course-class",
        {
          filters: { course: courseId },
          sort: "orderIndex:asc",
        }
      );

      // Create tracking structure - initialize progress for each class
      const classesData = classes.map((classItem) => ({
        classId: classItem.id,
        orderIndex: classItem.orderIndex || 0,
        video: 0,
        keyConcepts: 0,
        writingPrompts: 0,
        additionalMaterials: 0,
        completed: false,
        lastAccessed: null,
      }));

      // Create the CourseProgress entry
      const courseProgress = await strapi.entityService.create(
        "api::course-progress.course-progress",
        {
          data: {
            user: userId,
            course: courseId,
            classes: classesData,
            started: false,
            completed: false,
            startDate: null,
            lastAccessDate: null,
            enrolledDate: new Date().toISOString(),
          },
        }
      );

      return courseProgress;
    } catch (error) {
      console.error("Error creating course progress:", error);
      throw error;
    }
  },

  // Method to update progress for a specific component of a class
  async updateComponentProgress(
    userId,
    courseId,
    classId,
    component,
    progress
  ) {
    try {
      // Find the course progress entry
      const courseProgressEntries = await strapi.entityService.findMany(
        "api::course-progress.course-progress",
        {
          filters: {
            user: userId,
            course: courseId,
          },
          populate: ["tracking", "tracking.classes"],
        }
      );

      if (!courseProgressEntries || courseProgressEntries.length === 0) {
        throw new Error(
          `No course progress found for user ${userId} and course ${courseId}`
        );
      }

      const courseProgress = courseProgressEntries[0];
      const tracking = courseProgress.attributes.tracking;

      // Find the class in tracking.classes
      const classIndex = tracking.classes.findIndex(
        (c) => c.classId === parseInt(classId)
      );

      if (classIndex === -1) {
        throw new Error(`Class with ID ${classId} not found in tracking`);
      }

      // Make a deep copy to avoid reference issues
      const updatedTracking = JSON.parse(JSON.stringify(tracking));

      // Update the specific component progress
      if (
        [
          "video",
          "keyConcepts",
          "writingPrompts",
          "additionalMaterials",
        ].includes(component)
      ) {
        updatedTracking.classes[classIndex][component] = progress;
      } else {
        throw new Error(`Invalid component: ${component}`);
      }

      // Check if class is completed (all components at 100%)
      const classItem = updatedTracking.classes[classIndex];
      const isClassCompleted =
        classItem.video >= 0.99 &&
        classItem.keyConcepts >= 0.99 &&
        classItem.writingPrompts >= 0.99 &&
        classItem.additionalMaterials >= 0.99;

      updatedTracking.classes[classIndex].completed = isClassCompleted;
      updatedTracking.classes[classIndex].lastAccessed =
        new Date().toISOString();

      // Check if all classes are completed
      const allClassesCompleted = updatedTracking.classes.every(
        (c) => c.completed
      );

      // Update tracking metadata
      updatedTracking.started = true;
      updatedTracking.completed = allClassesCompleted;
      updatedTracking.lastAccessDate = new Date().toISOString();

      if (!updatedTracking.startDate) {
        updatedTracking.startDate = new Date().toISOString();
      }

      // Update the progress entry
      const updatedProgress = await strapi.entityService.update(
        "api::course-progress.course-progress",
        courseProgress.id,
        {
          data: {
            tracking: updatedTracking,
          },
        }
      );

      return updatedProgress;
    } catch (error) {
      console.error("Error updating component progress:", error);
      throw error;
    }
  },

  // Method to mark a component as complete (100%)
  async markComponentComplete(userId, courseId, classId, component) {
    return this.updateComponentProgress(
      userId,
      courseId,
      classId,
      component,
      1
    );
  },

  // Method to get progress for a user in a course
  async getUserCourseProgress(userId, courseId) {
    try {
      const courseProgressEntries = await strapi.entityService.findMany(
        "api::course-progress.course-progress",
        {
          filters: {
            user: userId,
            course: courseId,
          },
          populate: ["classes"],
        }
      );

      if (!courseProgressEntries || courseProgressEntries.length === 0) {
        return null;
      }

      return courseProgressEntries[0];
    } catch (error) {
      console.error("Error getting user course progress:", error);
      throw error;
    }
  },

  // Helper method to calculate overall progress percentage for a course
  calculateOverallProgress(courseProgress) {
    if (
      !courseProgress ||
      !courseProgress.classes ||
      courseProgress.classes.length === 0
    ) {
      return 0;
    }

    const classes = courseProgress.classes;
    const totalComponents = classes.length * 4; // 4 components per class

    const completedComponents = classes.reduce((sum, classItem) => {
      return (
        sum +
        parseFloat(classItem.video || 0) +
        parseFloat(classItem.keyConcepts || 0) +
        parseFloat(classItem.writingPrompts || 0) +
        parseFloat(classItem.additionalMaterials || 0)
      );
    }, 0);

    return totalComponents > 0
      ? (completedComponents / totalComponents) * 100
      : 0;
  },
};

// === ./src/app/about/satyoga/page.tsx ===
// app/about/page.tsx
import React from 'react';
import Image from 'next/image';
import Link from 'next/link';

// Define types for our content
type Sage = {
  name: string;
  title: string;
  image: string;
};

type BlogPost = {
  title: string;
  category: string;
  author: string;
  date: string;
  readTime: string;
  image: string;
};

const AboutPage = () => {
  // Sample data for sages
  const sages: Sage[] = [
    { name: 'Name Last name', title: 'Teacher', image: '/placeholder.jpg' },
    { name: 'Name Last name', title: 'Teacher', image: '/placeholder.jpg' },
    { name: 'Name Last name', title: 'Teacher', image: '/placeholder.jpg' },
    { name: 'Name Last name', title: 'Teacher', image: '/placeholder.jpg' },
  ];

  // Sample data for blog posts
  const blogPosts: BlogPost[] = [
    { 
      title: 'Wisdom School...', 
      category: 'Category', 
      author: 'Donna', 
      date: 'March 21, 2024', 
      readTime: '5 min read',
      image: '/placeholder.jpg' 
    },
    { 
      title: 'Patron Sages...', 
      category: 'Category', 
      author: 'Donna', 
      date: 'March 21, 2024', 
      readTime: '5 min read',
      image: '/placeholder.jpg' 
    },
    { 
      title: 'East & West Shakti Saturation', 
      category: 'Category', 
      author: 'Donna', 
      date: 'March 21, 2024', 
      readTime: '5 min read',
      image: '/placeholder.jpg' 
    },
    { 
      title: 'Workers\' Christm...', 
      category: 'Category', 
      author: 'Donna', 
      date: 'March 21, 2024', 
      readTime: '5 min read',
      image: '/placeholder.jpg' 
    },
  ];

  return (
    <div className="max-w-screen-xl mx-auto px-4">
      {/* Header Section */}
      <div className="text-center py-12">
        <div className="text-purple-600 mb-2">About</div>
        <h1 className="text-5xl font-bold mb-2">Sat Yoga</h1>
        <div className="text-xl mb-8">Wisdom School</div>
        
        <div className="w-full h-96 bg-gray-200 relative mb-16">
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
            <div className="w-48 h-48 bg-gray-400 rounded-md flex items-center justify-center">
              <div className="text-white">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
        <div className="md:col-span-1">
          <div className="text-blue-600 mb-2">Sat Yoga</div>
          <h2 className="text-4xl font-bold mb-6">A Treasure Map, an Intelligence Agency, a Non-Practice, and a Shelter from the Storm</h2>
        </div>
        
        <div className="md:col-span-2 space-y-8">
          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              An Agency for Intelligence Amplification
            </h3>
            <p className="mb-4">
              The ancient Sanskrit term Sat refers to what is absolutely Real—which implies being imperishable. The term Yoga means union, or realization of oneness. To live in oneness with the eternally present Absolute Real is both the way and the goal of Sat Yoga.
            </p>
            <p>
              To help the seeker of Truth fully understand what that means, Sat Yoga has elaborated a user-friendly map of the hidden treasures of reality, encompassing the entire spectrum of consciousness. We have also developed empowering operations for taking command of the mind. We offer these online and at our ashram, a self-sustaining metamorphic community in the rural mountains of southern Costa Rica—for those seeking either a short or longer retreat or a permanent refuge from a dying world, where you can awaken your latent powers and live joyously in Total Presence.
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              An Agency for Intelligence Amplification
            </h3>
            <p>
              The original Sat Yoga was already functioning as a means of increasing intelligence at the beginning of recorded history. It was deployed not only for wisdom, but also for developing paranormal powers (siddhis). Thus, Yoga has served as the basis and engine of all religions, as well as the mystical, magical, and shamanic orders. But in recent times, the term Yoga has been appropriated by the ego and has been diluted, commercialized, and too often diverted from its original purpose. Our approach returns to the ancient tradition of offering Darshan, Diksha, Gyana, and Sadhana (direct transmission from the Source of Power, initiation, knowledge, and praxis). But we have re-engineered the process to enable you to reinforce your will power and courage to transcend the known. Our focus is on activating the capacity for immediate illumination.
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              A Range of Processes and Non-Practice
            </h3>
            <p>
              Because everyone requires an approach appropriate for their level of maturity and intelligence, we employ a range of processes for those not ready for the ultimate non-practice. These include not only direct encounters with our teacher, a master of dharma combat (or zen dialogue), as well as individual sessions with an adept mentor, providing a safe space to uproot projections, transform emotions, and release attachments to obsolete thinking and behavior patterns. Astute meditation methods are also offered. Once you have tasted the ecstasy of inner silence and serenity, you will not stop short of the grand prize. Along with that, you will know the joy of altruism, devotion, artistic expression, and embodying the outrageous wisdom of the Avadhutas (those who live in complete freedom).
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              A Refuge for Body and Soul
            </h3>
            <p>
              Thanks to the foresight of our founders, who many years ago perceived the ongoing environmental disasters, the degradation of the global geopolitical order, the growing chaos, crime, and general disruption of life, and the loss of freedom in every society—and who had the courage to take action—we have been able to create a sustainable yogic community. We are open to accepting new members who share our values and want to serve the world through raising consciousness.
            </p>
          </div>
        </div>
      </div>

      {/* Patron Sages */}
      <div className="mb-16">
        <h2 className="text-4xl font-bold mb-8">Our Patron (and Matron) Sages</h2>
        
        <p className="mb-4">
          The star exemplar of liberation in life in modern times is Sri Ramana Maharishi, who transcended the ego illusion in one afternoon at the age of sixteen, and who without intention became a world teacher.
        </p>
        
        <p className="mb-4">
          We admire all the recent spiritual geniuses of India, including Ananda Mayi Ma, Yogananda, Swami Lakshmanjoo, Sri Aurobindo, and Sri Nisargadatta.
        </p>
        
        <p className="mb-4">
          The Buddha Dharma is also appreciated. As are the paradoxes of the Christian mystics. We revel in the fiery drunkenness of the wild Sufis, and laugh at the antics of trickster sages from the Daoist and Zen lineages, not to mention the fascinating formulations of the old Alchemists.
        </p>
        
        <p className="mb-8">
          Some of the ancient Greeks have also left us jewels of practical wisdom, and important insights have been delivered by a number of recent paradigm-shifters, all of which we drink in and assimilate.
        </p>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          {sages.map((sage, index) => (
            <div key={index} className="bg-gray-200 p-4 relative">
              <div className="h-64 flex items-center justify-center mb-4">
                <div className="w-16 h-16 bg-gray-300 flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
              </div>
              <div>{sage.name}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Quote */}
      <div className="text-center italic text-xl mb-16 px-8 md:px-24">
        <p>
          "A seeker of the Real should not follow a path. The only true path is originality. Sat Yoga is not a path: we teach you how to use a compass and a machete, and encourage you to cut a new path of your own."
        </p>
        <div className="flex justify-center mt-6 mb-2">
          <div className="w-12 h-12 bg-gray-300 rounded-full flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
          </div>
        </div>
        <div className="text-sm">Shunyamurti</div>
      </div>

      {/* Methodology */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
        <div className="md:col-span-1">
          <h2 className="text-4xl font-bold mb-6">Methodology</h2>
        </div>
        
        <div className="md:col-span-2 space-y-8">
          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              The Integration of Raja Yoga and Gyana Yoga
            </h3>
            <p>
              Meditation is the gradual path to Self-sovereignty (in Sanskrit: Raja Yoga). Gaining mastery over the chattering mind and scattered attention may require the use of centering techniques, of which we have many. Understanding how the ego functions may help you change its tendency to self-sabotage. That is one aspect of Gyana Yoga. For those ready to activate their crown chakra, the higher Gyana (knowledge) will do the job.
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              Kundalini Yoga: Re-Tuning the Radio
            </h3>
            <p>
              Let's face it: we all suffer from stunted intellectual development. This is not our fault. We are products of a narcissistic and nihilistic social system. We were never taught our true potential for genius. Here we offer a step-by-step process to repair the damage and attune to our infinite intelligence.
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              Bhakti Yoga: Devotion and Surrender
            </h3>
            <p>
              Open your Heart! That's the simplest way to reach God-consciousness. It is a cliché to say that God is love—but it is still the Truth. The more you resonate with the all-pervading Presence, the easier it is to let go of all contractions and karmic symptoms.
            </p>
          </div>

          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              Karma Yoga: Serving the Real
            </h3>
            <p>
              True service of the Real (Karma Yoga) requires attunement to the Real. This brings poise, lightness, accurate intention and timing of action, and glitch-free relations with people, the realm of Nature, and the social order.
            </p>
          </div>
        </div>
      </div>

      {/* Atmanology */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
        <div className="md:col-span-1">
          <h2 className="text-4xl font-bold mb-6">Atmanology</h2>
          <p className="mb-6">Beyond Psychology</p>
        </div>
        
        <div className="md:col-span-2 space-y-8">
          <div>
            <h3 className="text-lg font-semibold mb-2 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
              Lorem ipsum dolor
            </h3>
            <p className="mb-4">
              The Atman is the original yogic term for the uncreated Self. The Atman projects a soul, a Jivatman, which constructs an embodied ego, a Jiva. The ego mind, or psyche, is internally fragmented. Psychology functions at the ego level. Here we work at the level of soul, from which the ego program can be more rapidly upgraded. The soul can then return to the Atman.
            </p>
            <p className="mb-4">
              Atmanology is staged as a one-to-one mono-dialogue, in which the sadhak (the seeker of Truth) speaks as freely and openly as possible from the heart, in a reverie state, as an act of Self-discovery, rather than as a preconceived presentation of a persona to an Other.
            </p>
            <p className="mb-4">
              But the presence of this uncanny Other, who can perceive the blind spots, the aporias, and the contradictions that arise in the sadhak's monologue, draws out the hidden metaphors. At key moments, the adept Atmanologist will intervene with an unexpected question or observation that suddenly breaks apart the ego's discourse—and reveals a deeper, unspeakable entelechy. This may be a superego voice, or the notorious Shadow hidden in the subconscious, or it may be the deep-state censor within the ego—but its activity, once brought to the surface, reveals an even more subtle presence: that of the soul. This shifts the sadhak's awareness to the Superconscious Atman.
            </p>
            <p>
              An Atmanologist has learned the language of dreams, with the capacity to creatively unpack the symbols that arise, not only in the sadhak's remembered night dreams, but in the physical and emotional symptoms and the daily synchronicities, that reveal one's conscious internal narratives to be dream messages from and for the soul, for the purpose of enabling reconnection with the Atman. Through this process of psycho-excavation, the subconscious residues of infantile fantasies and other incoherences of a fragmented mind can be easily removed. One can then awaken to the real beauty and poetry of life.
            </p>
          </div>
        </div>
      </div>

      {/* Blog Section */}
      <div className="mb-16">
        <div className="text-purple-600 mb-2">An Extra Treasure</div>
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-4xl font-bold">A Blog to Set You Ablaze</h2>
          <Link href="/blog" className="bg-black text-white px-4 py-2 rounded-md">View all</Link>
        </div>
        <p className="mb-8">
          Check out these short blasts of Truth by Shunyamurti. Inhale a few lines and your spirit will be set on fire.
        </p>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mb-8">
          {blogPosts.map((post, index) => (
            <div key={index} className="bg-gray-200 relative">
              <div className="h-48 relative">
                <div className="absolute top-4 right-4 bg-gray-300 rounded-full p-2">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                  </svg>
                </div>
                <div className="w-full h-full flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
              </div>
              <div className="p-4">
                <div className="text-sm text-gray-600 mb-1">{post.category}</div>
                <h3 className="font-bold mb-2">{post.title}</h3>
                <div className="text-sm">
                  By {post.author} | As Shunyamurti recently stated, the undesirableness of the loca...
                </div>
                <div className="flex items-center mt-4">
                  <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                  </div>
                  <div className="text-sm">
                    <div>{post.author}</div>
                    <div>{post.date} • {post.readTime}</div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="flex justify-center mb-6">
          <div className="flex space-x-2">
            {[0, 1, 2, 3, 4, 5].map((dot, index) => (
              <div 
                key={index} 
                className={`h-2 w-2 rounded-full ${index === 0 ? 'bg-black' : 'bg-gray-300'}`}
              ></div>
            ))}
          </div>
        </div>
        
        <div className="flex justify-end mb-16">
          <button className="w-10 h-10 border border-gray-300 rounded-full flex items-center justify-center mr-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>
          <button className="w-10 h-10 border border-gray-300 rounded-full flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
            </svg>
          </button>
        </div>
      </div>

      {/* Portal Section */}
      <div className="text-center mb-16">
        <div className="text-purple-600 mb-2">Your Free Dojo and Gym for Genius Training!</div>
        <h2 className="text-4xl font-bold mb-6">The Portal is Open to You...</h2>
        <p className="max-w-2xl mx-auto mb-8">
          Build those mental muscles! Don't sprain your Achilles heel or ankle! This shrewd selection of some of Shunyamurti's most empowering ideas will be both healing and liberating. These videos include some from our public channels and others that are only available to members.
        </p>
        <button className="bg-black text-white px-6 py-3 rounded-md">Learn more</button>
      </div>


    </div>
  );
};

export default AboutPage;
// === ./src/app/about/shunyamurti/page.tsx ===
// src/app/about/page.tsx
import React from 'react';
import Image from 'next/image';
import Link from 'next/link';

export const metadata = {
  title: 'About Shunyamurti | A Dwarf at the Feet of our Dancing Lord',
  description: 'Learn about Shunyamurti, his teachings, philosophy, and path to spiritual awakening through Sat Yoga.'
};

const AboutPage = () => {
  return (
    <main className="min-h-screen bg-gray-50">
      {/* Hero Section */}
      <section className="py-12 md:py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-4">
            <p className="text-purple-600 text-sm font-medium">About</p>
          </div>
          <h1 className="text-4xl md:text-5xl font-bold text-center mb-2">Shunyamurti</h1>
          <p className="text-center text-gray-600 mb-12">A Dwarf at the Feet of our Dancing Lord</p>
          
          <div className="rounded-lg overflow-hidden bg-gray-200 max-w-4xl mx-auto aspect-video relative">
            <Image 
              src="/images/shunyamurti-placeholder.jpg" 
              alt="Shunyamurti" 
              fill
              className="object-cover"
              priority
            />
          </div>
        </div>
      </section>

      {/* What is Shunyamurti Section */}
      <section className="py-12 md:py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-12">
            <div>
              <h2 className="text-3xl font-bold mb-8">What is Shunyamurti?</h2>
            </div>
            <div className="space-y-6">
              <p className="text-gray-700">
                A 'what' more than a 'who' is accurate. To understand Shunyamurti, one must understand the messages that come through the medium. It requires a radical paradigm shift. The name reveals the truth: Shunya means empty. Murti means form. Can we take seriously that our teacher is an empty form? Moreover, he is not unique. We are all empty forms, but most do not want to know that.
              </p>
              <p className="text-gray-700">
                Emptiness is a central term in all the Asian wisdom schools. It signifies that the bodily character is unreal, a mere appearance in a holographic light show disguised as a world. But this light show is made of the Light of Infinite Consciousness. Once there has been recognition of the emptiness of all forms, then the Real Self underlying, pervading, and dreaming the cosmic play can be realized. At that point, the other side of emptiness is revealed as the unmanifest, formless Fullness of eternal and unlimited power and freedom.
              </p>
              <p className="text-gray-700">
                The One Intelligence is dreaming all of us, and is the inmost Self of each apparent entity. In the case of Shunyamurti, the recognition of the fictional nature of the world and of people came early in the vehicle's existence, which led to a life free of conventional constraints, enabling the character to resist the temptations to settle for anything less than the full unfoldment of the potency of Consciousness.
              </p>
              <p className="text-gray-700">
                That potency is the power to silence the mind. It is in the stillness of Total Presence that the energy and information from the Infinite Self can be channelled through the bodily icon. The teachings of Sat Yoga have come from that Source.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Mission and Vision Section */}
      <section className="py-12 md:py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-12">
            <div>
              <h2 className="text-3xl font-bold mb-8">On mission and vision</h2>
              <div className="rounded-lg overflow-hidden bg-gray-600 aspect-video relative mt-6">
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center">
                    <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd"></path>
                    </svg>
                  </div>
                </div>
              </div>
            </div>
            <div className="space-y-6">
              <p className="text-gray-700">
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Quote Section */}
      <section className="py-12 md:py-16 bg-gray-50">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <blockquote className="text-xl md:text-2xl text-gray-700 italic mb-8">
              "Once a soul awakens to the Supreme Self—which is always a function of grace—it gladly bows before the Lord in adoring surrender. The job of the character is only to empty itself of ego and become refashioned as a pure instrument of God."
            </blockquote>
            <div className="flex items-center justify-center space-x-2">
              <div className="w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center">
                <Image 
                  src="/images/placeholder.jpg" 
                  alt="Shunyamurti"
                  width={40}
                  height={40}
                  className="rounded-full"
                />
              </div>
              <span className="font-medium">Shunyamurty</span>
            </div>
          </div>
        </div>
      </section>

            {/* Publications Section */}
            <section className="py-12 md:py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center mb-8">
            <div>
              <p className="text-purple-600 text-sm font-medium">Store</p>
              <h2 className="text-3xl md:text-4xl font-bold mt-1">Sat Yoga Publications</h2>
            </div>
            <Link href="/store" className="text-sm font-medium bg-gray-900 text-white px-4 py-2 rounded hover:bg-gray-800 transition">
              View all
            </Link>
          </div>
          
          <p className="text-gray-700 mb-10 max-w-4xl">
            Shunyamurti's books convey the knowledge you need to gain mastery over the ego mind 
            and attain complete liberation from illusion and anxiety—in fact, every kind of suffering
            can be transcended. This is the great value of understanding these teachings. Many more
            unpublished writings are ready to be turned into books, once we get the resources to do
            that. In the meantime, four mind-expanding and heart-opening volumes have been
            published:
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Book 1 */}
            <div className="bg-gray-100 rounded-lg overflow-hidden">
              <div className="aspect-[3/4] relative">
                <Image 
                  src="/images/book-placeholder.jpg" 
                  alt="Book cover" 
                  fill
                  className="object-cover"
                />
                <button className="absolute top-4 right-4 bg-gray-200 p-2 rounded-full">
                  <svg className="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <div className="p-4">
                <p className="text-purple-600 text-sm">Reads</p>
                <h3 className="font-bold text-lg mb-1">The Transformational Imperative</h3>
                <p className="text-gray-600 text-sm mb-3">Lorem ipsum dolor sit amet consectetur. Gravida nunc magna ac non tincidunt cras odio egestas leo. Lorem ipsum dolor sit amet consectetur. Gravida nunc magna ac non tincidunt</p>
                <p className="font-bold mb-4">$20,00</p>
                <button className="w-full py-2 border border-gray-300 rounded font-medium hover:bg-gray-50 transition">
                  Add to card
                </button>
              </div>
            </div>
            
            {/* Book 2 */}
            <div className="bg-gray-100 rounded-lg overflow-hidden">
              <div className="aspect-[3/4] relative">
                <Image 
                  src="/images/book-placeholder.jpg" 
                  alt="Book cover" 
                  fill
                  className="object-cover"
                />
                <button className="absolute top-4 right-4 bg-gray-200 p-2 rounded-full">
                  <svg className="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <div className="p-4">
                <p className="text-purple-600 text-sm">Reads</p>
                <h3 className="font-bold text-lg mb-1">Gems of Wisdom, Volume 1</h3>
                <p className="text-gray-600 text-sm mb-3">Lorem ipsum dolor sit amet consectetur. Gravida nunc magna ac non tincidunt cras odio egestas leo. Lorem ipsum dolor sit amet consectetur. Gravida nunc magna ac non tincidunt</p>
                <p className="font-bold mb-4">$20,00</p>
                <button className="w-full py-2 border border-gray-300 rounded font-medium hover:bg-gray-50 transition">
                  Add to card
                </button>
              </div>
            </div>
            
            {/* Book 3 */}
            <div className="bg-gray-100 rounded-lg overflow-hidden">
              <div className="aspect-[3/4] relative">
                <Image 
                  src="/images/book-placeholder.jpg" 
                  alt="Book cover" 
                  fill
                  className="object-cover"
                />
                <button className="absolute top-4 right-4 bg-gray-200 p-2 rounded-full">
                  <svg className="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <div className="p-4">
                <p className="text-purple-600 text-sm">Reads</p>
                <h3 className="font-bold text-lg mb-1">Gems of Wisdom, Volume 2</h3>
                <p className="text-gray-600 text-sm mb-3">Lorem ipsum dolor sit amet consectetur. Gravida nunc magna ac non tincidunt cras odio egestas leo. Lorem ipsum dolor sit amet consectetur. Gravida nunc magna ac non tincidunt</p>
                <p className="font-bold mb-4">$15,00</p>
                <button className="w-full py-2 border border-gray-300 rounded font-medium hover:bg-gray-50 transition">
                  Add to card
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>


      {/* Curriculum Vitae Section */}
      <section className="py-12 md:py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="mb-4">
            <p className="text-purple-600 text-sm font-medium">About</p>
          </div>
          <h2 className="text-3xl md:text-4xl font-bold mb-12">Shunyamurti's Curriculum Vitae</h2>
          
          <div className="space-y-8">
            <div className="border-l-4 border-purple-600 pl-6">
              <h3 className="text-xl font-bold mb-4">A Time of Accelerated Growth</h3>
              <p className="text-gray-700">
                Consciousness awakened early, and as a child, he would spend afternoons contemplating and writing poetry. This led to the urge to read the works of classic and contemporary poetry. On the physical side, he was active in sports and martial arts. Political consciousness awakened with the news of the murder of President Kennedy. He became an activist opposing the U.S. war in Vietnam—which brought him to the study of Gandhi, the Bhagavad Gita, and other fascinating and inspiring texts—that explained his own inner states. His search culminated in the discovery of the books of Sri Ramana Maharishi, who most clearly exemplified the eternal Truths. No doubt remained.
              </p>
            </div>
            
            <div className="border-l-4 border-purple-600 pl-6">
              <h3 className="text-xl font-bold mb-4">Advocate for Truth</h3>
              <p className="text-gray-700">
                The fullness of life inevitably included abundant experimentation with psychedelics, hitchhiking adventures that brought him to many parts of the country, and later of the world, meeting leading figures in the avant-garde, and participating in some extraordinary events. The most profound was encountering Baba Hari Dass. The presence of that shining being brought overwhelming love, and a long period of discipleship.
              </p>
            </div>
            
            <div className="border-l-4 border-purple-600 pl-6">
              <h3 className="text-xl font-bold mb-4">Formal Yogic Training</h3>
              <p className="text-gray-700">
                After graduating university with a double major in philosophy and drama, with a minor in literature, he became the director of an international book club in New York, focused on insightful analyses of current issues in geopolitics. This enabled him to have lunch with many famous authors. But he had his own journey to go on, and could not settle for a life in that bandwidth. The deeper adventure then began. It is too long to recount. The freedom of the sixties counterculture was the portal. There were academic interludes, earning a law degree and a psychology doctorate. The practice of law was likewise stultifying, but his interest in cosmic law (to structure future human interactions with extra-terrestrial visitors) and karmic law, as well as the genuine worldly wisdom hidden at the heart of our degraded legal systems—plus learning first-hand how the system worked—had made the effort worthwhile.
              </p>
            </div>
            
            <div className="border-l-4 border-purple-600 pl-6">
              <h3 className="text-xl font-bold mb-4">A Journey of Self-realization</h3>
              <p className="text-gray-700">
                At some point, he was rescued from a career as an attorney during a fervent solitary meditation retreat on a mountaintop. The Great Spirit abducted him and rushed him to India, to be immersed in the vibrational frequency of the Divine Presence. He bathed for ten years in that holy river of Gyana and Shakti, becoming an adept yogi, an avowed member of an ashram sangha, before being sent out to practice healing and assist in transmitting the true frequency.
              </p>
            </div>
            
            <div className="border-l-4 border-purple-600 pl-6">
              <h3 className="text-xl font-bold mb-4">Responding with Love & Power to a world in chaos</h3>
              <p className="text-gray-700">
                After a stint as a journalist writing about Indian politics and spirituality—and getting a press pass to witness Indira Gandhi meet Ronald Reagan in the Oval Office, and to mingle with the Washington press corps, which brought a far more vivid understanding of the deep state—he converted his skill in meditation into a therapeutic form of hypnosis and visualization, and began counselling people in need of such help. To refine his clinical skills, he took graduate school courses in psychology at night and on weekends.
              </p>
            </div>
            
            <div className="border-l-4 border-purple-600 pl-6">
              <h3 className="text-xl font-bold mb-4">A master teacher of the Heart</h3>
              <p className="text-gray-700">
                A flourishing practice of transformational healing unfolded, evolving in phases from hypnotherapy and energy work to past life regression therapy, including exorcism and depossession, to ghost busting at haunted houses, to working with people who had been captured and released by aliens, to removing curses that had been put on people by practitioners of black magic, and sometimes getting psychically attacked by those dark forces in revenge. A great deal was learned about the world of the occult and paranormal.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* Testimonial Section */}
      <section className="py-12 md:py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <p className="text-purple-600 text-sm font-medium mb-8">Testimonial carrousel</p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="bg-gray-600 aspect-video rounded-lg relative">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                  <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <div className="flex flex-col justify-center">
              <blockquote className="text-xl text-gray-700 mb-6">
                Many thanks to the Ashram and Shunya for facilitating this retreat. It was a wonderful and magical experience with deep knowledge and wisdom to keep going on the hero's path. Shunya's way of teaching–as always–is so open and well built up with lots of history and humor. I love that! What I like the most is that it truly helps in the process of realization.
              </blockquote>
              <div>
                <p className="font-medium">Lauren</p>
                <p className="text-gray-600">The Netherlands</p>
              </div>
            </div>
          </div>
          
          <div className="flex justify-center mt-8 space-x-2">
            <span className="h-2.5 w-2.5 bg-purple-600 rounded-full"></span>
            <span className="h-2.5 w-2.5 bg-gray-300 rounded-full"></span>
          </div>
          
          <div className="flex justify-end mt-8 space-x-4">
            <button className="w-12 h-12 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100">
              <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <button className="w-12 h-12 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100">
              <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </div>
      </section>

      {/* Sri Ramana Maharshi Section */}
      <section className="py-12 md:py-16 bg-gray-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <div className="mb-6">
            <div className="w-24 h-24 bg-gray-500 rounded-lg mx-auto flex items-center justify-center">
              <Image 
                src="/images/placeholder.jpg" 
                alt="Sri Ramana Maharshi"
                width={64}
                height={64}
                className="rounded"
              />
            </div>
          </div>
          <h2 className="text-3xl md:text-4xl font-bold mb-4">Sri Ramana Maharshi</h2>
          <p className="max-w-3xl mx-auto">
            Shunyamurti connects always with the resonant presence of Sri Ramana Maharshi as his closest teacher, for whom he feels the deepest reverence.
          </p>
        </div>
      </section>

      {/* Retreats Section */}
      <section className="py-12 md:py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="mb-4">
            <p className="text-purple-600 text-sm font-medium">Calendar</p>
          </div>
          <h2 className="text-3xl md:text-4xl font-bold mb-6">Stunning Online Retreats</h2>
          <p className="text-gray-700 mb-12 max-w-4xl">
            Shunyamurti offers ongoing satsangs for members and a number of yearly livestreamed seminars and retreats open to the public. Each one is unique, but they are always more powerful than the last, always relevant and geopolitically informed, and always paradigm-shifting, ego-busting, shakti-filled events. Priceless direct guidance in real time—including the opportunity to ask Shunyamurti your most urgent questions live—make these events imperative for serious seekers.
          </p>
          
          <div className="bg-white rounded-lg overflow-hidden shadow-sm">
            <div className="grid grid-cols-1 md:grid-cols-2">
              <div className="p-6 md:p-10 bg-gray-100">
                <div className="text-center max-w-xs mx-auto">
                  <p className="text-gray-500 text-sm">Sat</p>
                  <p className="text-4xl font-bold mb-1">17</p>
                  <p className="text-gray-600 text-sm">Fri Dec 2024</p>
                </div>
                
                <div className="mt-8 aspect-video bg-gray-300 rounded-lg relative">
                  <Image 
                    src="/images/placeholder.jpg" 
                    alt="Retreat"
                    fill
                    className="object-cover rounded-lg"
                  />
                </div>
              </div>
              
              <div className="p-6 md:p-10">
                <div className="mb-6">
                  <span className="inline-block px-3 py-1 text-xs font-medium bg-gray-100 text-gray-800 rounded-full">Next event</span>
                </div>
                <h3 className="text-2xl font-bold mb-1">Shakti Saturation</h3>
                <div className="flex items-center space-x-2 text-gray-600 mb-4">
                  <span>Onsite</span>
                  <span>•</span>
                  <span>3 days</span>
                </div>
                <p className="text-gray-700 mb-8">
                  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros.
                </p>
                <Link href="/calendar" className="inline-block bg-gray-900 text-white px-5 py-3 rounded font-medium hover:bg-gray-800 transition">
                  Save my spot
                </Link>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>
  );
};

export default AboutPage;
// === ./src/app/api/auth/[...nextauth]/route.ts ===
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import type { NextAuthOptions } from "next-auth";
import { NextResponse } from "next/server";
import { authOptions } from "@/lib/auth";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
// === ./src/app/api/donation/route.ts ===
// app/api/donation/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getTilopayToken } from '@/lib/services/tilopay';

// API credentials from environment variables
const API_KEY = process.env.TILOPAY_API_KEY || '';
const TILOPAY_BASE_URL = 'https://app.tilopay.com/api/v1';

export async function POST(request: NextRequest) {
  try {
    // Parse request body
    const data = await request.json();
    
    if (!data) {
      return NextResponse.json(
        { error: 'Missing payment data' },
        { status: 400 }
      );
    }
    
    // Get the Tilopay token
    const token = await getTilopayToken();
    
    // Process the payment with Tilopay
    const response = await fetch(`${TILOPAY_BASE_URL}/processPayment`, {
      method: 'POST',
      headers: {
        'Authorization': `bearer ${token}`,
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ...data,
        key: API_KEY,
        platform: 'satyoga-website',
        capture: '1',
        subscription: '0'
      })
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      return NextResponse.json(
        { error: errorData.message || 'Failed to process payment' },
        { status: response.status }
      );
    }
    
    // Return the Tilopay response
    const result = await response.json();
    return NextResponse.json(result);
    
  } catch (error: any) {
    console.error('Error processing donation:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to process donation' },
      { status: 500 }
    );
  }
}
// === ./src/app/api/membership/update-status/route.ts ===
// app/api/membership/update-status/route.ts
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";

/**
 * API route to update a user's membership status in Strapi
 * This runs after a successful payment via Tilopay
 */
export async function POST(req: NextRequest) {
  try {
    console.log("API route starting");
    
    // Get the payment data from the request
    const paymentData = await req.json();
    console.log("Payment data received:", JSON.stringify(paymentData, null, 2));
    
    // Get the current session to authenticate the request
    const session = await getServerSession(authOptions);
    console.log("Session data:", session ? "Session exists" : "No session");
    
    // If no session, we'll use the email from the payment data (for new users)
    const userEmail = session?.user?.email || paymentData.memberEmail;
    
    if (!userEmail) {
      return NextResponse.json(
        { error: "User email not found" },
        { status: 400 }
      );
    }
    
    // Determine the correct membership status based on whether there's a trial
    const membershipStatus = paymentData.hasTrial ? 'TRIALING' : 'ACTIVE';
    // Calculate dates for membership
    const startDate = new Date().toISOString();
    
    // Calculate end date for trial or subscription
    let endDate = new Date();
    if (paymentData.hasTrial && paymentData.trialDays) {
      // If there's a trial, the end date is trialDays from now
      endDate.setDate(endDate.getDate() + parseInt(paymentData.trialDays));
    } else {
      // Otherwise, for monthly plans: 1 month from now, for yearly: 1 year from now
      if (paymentData.membershipType === 'monthly') {
        endDate.setMonth(endDate.getMonth() + 1);
      } else {
        endDate.setFullYear(endDate.getFullYear() + 1);
      }
    }
    
    // Determine membership level based on plan name
    let membershipLevel = 'free';
    if (paymentData.membershipPlan.toLowerCase().includes('gyani')) {
      membershipLevel = 'GYANI';
    } else if (paymentData.membershipPlan.toLowerCase().includes('pragyani+')) {
      membershipLevel = 'PRAGYANIPLUS';
    } else if (paymentData.membershipPlan.toLowerCase().includes('pragyani')) {
      membershipLevel = 'PRAGYANI';
    }
    
    // Use the Strapi API token for authorization
    const strapiToken = process.env.NEXT_PUBLIC_STRAPI_API_TOKEN;
    
    if (!strapiToken) {
      return NextResponse.json(
        { error: "Missing Strapi API token" },
        { status: 500 }
      );
    }
    
    try {
      // Step 1: Let's check what the available values are for the membership enumeration
      // Make a request to get the content type schema
      const schemaRes = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/users-permissions/content-types`,
        {
          headers: { 
            Authorization: `Bearer ${strapiToken}` 
          },
        }
      );
      
      if (schemaRes.ok) {
        const schemaData = await schemaRes.json();
        console.log("Available membership values:", 
          schemaData.data.find((ct: any) => 
            ct.uid === 'plugin::users-permissions.user'
          )?.schema?.attributes?.membership?.enum || []);
      }
      
      // Get the user ID from Strapi using the email
      const userRes = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/users?filters[email][$eq]=${encodeURIComponent(userEmail)}`,
        {
          headers: { 
            Authorization: `Bearer ${strapiToken}` 
          },
        }
      );
      
      if (!userRes.ok) {
        return NextResponse.json(
          { error: "Failed to find user in Strapi" },
          { status: 404 }
        );
      }
      
      const userData = await userRes.json();
      
      if (!userData || userData.length === 0) {
        return NextResponse.json(
          { error: "User not found" },
          { status: 404 }
        );
      }
      
      const userId = userData[0].id;
      console.log("About to update user in Strapi:", userId);
      
      // Try a simpler update first with just the membership field
      const updateData = {
        membership: membershipLevel
      };
      
      console.log("Update data:", JSON.stringify(updateData, null, 2));
      
      // Update the user with just the membership field first
      const updateRes = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/users/${userId}`,
        {
          method: "PUT",
          headers: { 
            "Content-Type": "application/json",
            Authorization: `Bearer ${strapiToken}` 
          },
          body: JSON.stringify(updateData),
        }
      );
      
      console.log("Update response status:", updateRes.status);
      
      if (!updateRes.ok) {
        console.error("Failed to update membership status in Strapi");
        
        // Get more details about the error
        const errorText = await updateRes.text();
        try {
          const errorData = JSON.parse(errorText);
          console.error("Strapi error response:", errorData);
          
          // Extract the actual validation errors
          if (errorData.error?.details?.errors) {
            console.error("Validation errors:", JSON.stringify(errorData.error.details.errors, null, 2));
          }
        } catch (e) {
          console.error("Strapi error response (text):", errorText);
        }
        
        return NextResponse.json(
          { error: "Failed to update membership status" },
          { status: 500 }
        );
      }
      
      // Now update the dates in a separate request
      const datesUpdateData = {
        membershipstartdate: startDate,
        membershipenddate: endDate.toISOString(),
        membershipstatus: membershipStatus
      };
      
      console.log("Dates update data:", JSON.stringify(datesUpdateData, null, 2));
      
      const datesUpdateRes = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/users/${userId}`,
        {
          method: "PUT",
          headers: { 
            "Content-Type": "application/json",
            Authorization: `Bearer ${strapiToken}` 
          },
          body: JSON.stringify(datesUpdateData),
        }
      );
      
      console.log("Dates update response status:", datesUpdateRes.status);
      
      if (!datesUpdateRes.ok) {
        console.error("Failed to update membership dates in Strapi");
        
        // Get more details about the error
        const errorText = await datesUpdateRes.text();
        try {
          const errorData = JSON.parse(errorText);
          console.error("Strapi dates error response:", errorData);
          
          // Extract the actual validation errors
          if (errorData.error?.details?.errors) {
            console.error("Validation errors:", JSON.stringify(errorData.error.details.errors, null, 2));
          }
        } catch (e) {
          console.error("Strapi dates error response (text):", errorText);
        }
        
        // Still return success since at least the membership level was updated
        return NextResponse.json({ 
          success: true,
          warning: "Membership level was updated but dates could not be updated"
        });
      }
      
      console.log("API route completing successfully");
      return NextResponse.json({ success: true });
      
    } catch (strapiError: any) {
      console.error("Error communicating with Strapi:", strapiError.message);
      return NextResponse.json(
        { error: "Error communicating with Strapi" },
        { status: 500 }
      );
    }
    
  } catch (error: any) {
    console.error("Error updating membership status:", error.message);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}
// === ./src/app/api/submit-application/route.ts ===
import { NextResponse } from 'next/server'
import { submitApplication } from '@/lib/api'

export async function POST(request: Request) {
  try {
    const data = await request.json()
    const result = await submitApplication(data)
    
    return NextResponse.json({ 
      message: 'Application submitted successfully',
      data: result 
    })
  } catch (error) {
    return NextResponse.json(
      { message: 'Failed to submit application' }, 
      { status: 500 }
    )
  }
}
// === ./src/app/api/tilopay/get-sdk-token/route.ts ===
// app/api/tilopay/get-sdk-token/route.ts
import { NextRequest, NextResponse } from 'next/server';

const TILOPAY_BASE_URL = 'https://app.tilopay.com/api/v1';
const API_USER = process.env.NEXT_PUBLIC_TILOPAY_API_USER || '';
const API_PASSWORD = process.env.NEXT_PUBLIC_TILOPAY_API_PASSWORD || '';
const API_KEY = process.env.NEXT_PUBLIC_TILOPAY_API_KEY || '';

export async function POST(request: NextRequest) {
  try {
    console.log('Getting Tilopay SDK token from /loginSdk...');
    
    // Use the correct SDK token endpoint
    const sdkTokenResponse = await fetch(`${TILOPAY_BASE_URL}/loginSdk`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        apiuser: API_USER,
        password: API_PASSWORD,
        key: API_KEY
      })
    });

    if (!sdkTokenResponse.ok) {
      const errorText = await sdkTokenResponse.text();
      console.error('SDK token response error:', sdkTokenResponse.status, errorText);
      throw new Error(`Failed to get SDK token: ${sdkTokenResponse.statusText}`);
    }

    const sdkData = await sdkTokenResponse.json();
    console.log('Successfully got SDK token');
    
    return NextResponse.json({ 
      token: sdkData.access_token || sdkData.token,
      expires_in: sdkData.expires_in || 86400,
      token_type: sdkData.token_type || 'bearer'
    });

  } catch (error) {
    console.error('Error in get-sdk-token:', error);
    return NextResponse.json(
      { 
        error: 'Failed to get SDK token',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
// === ./src/app/api/user-courses/route.ts ===
import { getServerSession } from "next-auth/next";
import { NextResponse } from "next/server";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";

export async function GET() {
  // Get the user session
  const session = await getServerSession(authOptions);

  if (!session?.user?.jwt) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  try {
    // First fetch published courses
    const coursesResponse = await fetch(
      `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/courses?populate=featuredImage,instructors`,
      {
        headers: {
          Authorization: `Bearer ${session.user.jwt}`,
        },
      }
    );

    if (!coursesResponse.ok) {
      throw new Error(`Courses API responded with ${coursesResponse.status}`);
    }

    const coursesData = await coursesResponse.json();

    // Then fetch minimal user data to get enrolled course IDs
    const userResponse = await fetch(
      `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/users/me`,
      {
        headers: {
          Authorization: `Bearer ${session.user.jwt}`,
        },
      }
    );

    if (!userResponse.ok) {
      throw new Error(`User API responded with ${userResponse.status}`);
    }

    const userData = await userResponse.json();

    // If the user has no enrolledCourses field, return empty array
    if (!userData.enrolledCourses) {
      return NextResponse.json({
        data: [],
        meta: { pagination: { total: 0 } },
      });
    }

    // Filter the courses to only include those the user is enrolled in
    const enrolledCourseIds = userData.enrolledCourses.map((c) => c.id);
    const enrolledCourses = coursesData.data.filter((course) =>
      enrolledCourseIds.includes(course.id)
    );

    return NextResponse.json({
      data: enrolledCourses,
      meta: {
        pagination: {
          total: enrolledCourses.length,
        },
      },
    });
  } catch (error) {
    console.error("Error fetching user courses:", error);
    return NextResponse.json(
      { error: "Failed to fetch courses" },
      { status: 500 }
    );
  }
}

// === ./src/app/apply/page.tsx ===
import { ApplicationForm } from "@/components/forms/application-form"
import { Toaster } from "@/components/ui/toaster"

export default function ApplyPage() {
  return (
    <main className="min-h-screen bg-background">
      <ApplicationForm />
      <Toaster />
    </main>
  )
}
// === ./src/app/blog/[slug]/page.tsx ===
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { BlogPost, BlogPostPage } from '@/components/blog/Blog';
import { blogApi } from '@/lib/strapi';

interface BlogPostPageProps {
  params: {
    slug: string;
  };
}

// Transform a single Strapi blog post to the expected format
function transformStrapiPost(post: any) {
  if (!post) return null;
  
  const attrs = post.attributes;
  console.log("Post attributes:", JSON.stringify(attrs, null, 2));
  console.log("Author data:", JSON.stringify(attrs.author, null, 2));
  
  // Get the author data, handling different possible structures
  let authorData = {
    id: '0',
    name: 'Unknown',
    imageUrl: '',
  };
  
  if (attrs.author) {
    // If author is just a string (simple name)
    if (typeof attrs.author === 'string') {
      authorData = {
        id: '0',
        name: attrs.author,
        imageUrl: '',
      };
    }
    // If author is a data object (relational field)
    else if (attrs.author.data) {
      const authorAttrs = attrs.author.data.attributes;
      authorData = {
        id: attrs.author.data.id.toString(),
        name: authorAttrs.name || authorAttrs.username || 'Unknown',
        imageUrl: authorAttrs.avatar?.data?.attributes?.url || '',
      };
    } 
    // If author is directly embedded (not in data property)
    else if (attrs.author.name || attrs.author.username) {
      authorData = {
        id: attrs.author.id?.toString() || '0',
        name: attrs.author.name || attrs.author.username || 'Unknown',
        imageUrl: attrs.author.avatar?.url || '',
      };
    }
  }
  
  return {
    id: post.id.toString(),
    title: attrs.title || '',
    slug: attrs.slug || '',
    excerpt: attrs.excerpt || '',
    content: attrs.content || '',
    featuredImage: attrs.featuredImage?.data?.attributes?.url || '',
    category: attrs.category?.data?.attributes?.name || 'Uncategorized',
    author: authorData,
    publishedAt: attrs.publishedAt || new Date().toISOString(),
    readTime: attrs.readTime || Math.ceil(((attrs.content || '').length / 1000) * 2), // Estimate reading time
    isFeatured: attrs.isFeatured || false,
  };
}

// Transform related posts
function transformStrapiPosts(strapiData: any) {
  if (!strapiData || !strapiData.data) return [];
  
  return strapiData.data.map((post: any) => {
    const attrs = post.attributes;
    return {
      id: post.id.toString(),
      title: attrs.title || '',
      slug: attrs.slug || '',
      excerpt: attrs.excerpt || '',
      content: attrs.content || '',
      featuredImage: attrs.featuredImage?.data?.attributes?.url || '',
      category: attrs.category?.data?.attributes?.name || 'Uncategorized',
      author: {
        id: attrs.author?.data?.id?.toString() || '0',
        name: attrs.author?.data?.attributes?.name || 'Unknown',
        imageUrl: attrs.author?.data?.attributes?.avatar?.data?.attributes?.url || '',
      },
      publishedAt: attrs.publishedAt || new Date().toISOString(),
      readTime: attrs.readTime || Math.ceil(((attrs.content || '').length / 1000) * 2),
      isFeatured: attrs.isFeatured || false,
    };
  });
}

// Generate metadata for the blog post
export async function generateMetadata(
  { params }: BlogPostPageProps
): Promise<Metadata> {
  // Wait for the params object to be fully available
  const resolvedParams = await Promise.resolve(params);
  const slug = resolvedParams.slug;
  
  try {
    // Fetch the blog post from Strapi using blogApi
    const post = await blogApi.getBlogPostBySlug(slug);
    
    // If no post is found, return a generic title
    if (!post) {
      return {
        title: 'Blog Post Not Found - Sat Yoga',
      };
    }
    
    const attrs = post.attributes;
    
    // Use SEO data if available, otherwise use post title and excerpt
    return {
      title: attrs.seo?.metaTitle || `${attrs.title} - Sat Yoga Blog`,
      description: attrs.seo?.metaDescription || attrs.excerpt,
      keywords: attrs.seo?.keywords?.split(',') || [],
      openGraph: {
        title: attrs.seo?.metaTitle || attrs.title,
        description: attrs.seo?.metaDescription || attrs.excerpt,
        images: attrs.featuredImage?.data ? [
          {
            url: attrs.featuredImage.data.attributes.url,
            alt: attrs.title,
          }
        ] : [],
      },
    };
  } catch (error) {
    console.error('Error fetching blog post for metadata:', error);
    return {
      title: 'Blog - Sat Yoga',
      description: 'Explore transformative insights from Sat Yoga',
    };
  }
}

export default async function BlogPostPageRoute(
  { params }: BlogPostPageProps
) {
  // Wait for the params object to be fully available
  const resolvedParams = await Promise.resolve(params);
  const slug = resolvedParams.slug;
  
  try {
    // Fetch the blog post from Strapi using blogApi
    const post = await blogApi.getBlogPostBySlug(slug);
    
    // If post not found, return 404
    if (!post) {
      notFound();
    }
    
    // Transform the post data
    const transformedPost = transformStrapiPost(post);
    
    // Double-check that transformation worked
    if (!transformedPost) {
      console.error('Post transformation failed');
      notFound();
    }
    
   // Get the category ID for related posts
   const categoryId = post.attributes.category?.data?.id;
   const postId = post.id;
   
   // Fetch related posts with the same category
   let relatedPosts = [];
   try {
     // Make sure we pass numbers or valid strings that can be parsed to integers
     const relatedPostsData = await blogApi.getRelatedPosts(
       String(categoryId || ''), 
       String(postId), 
       2
     );
     relatedPosts = transformStrapiPosts(relatedPostsData);
   } catch (relatedError) {
     // Log but don't fail the whole page if related posts can't be fetched
     console.error('Error fetching related posts:', relatedError);
   }
    
    return <BlogPostPage post={transformedPost} relatedPosts={relatedPosts} />;
  } catch (error) {
    console.error('Error fetching blog post:', error);
    notFound();
  }
}
// === ./src/app/blog/page.tsx ===
import { Metadata } from 'next';
import { BlogPage } from '@/components/blog/Blog';
import { blogApi } from '@/lib/strapi';

export const metadata: Metadata = {
  title: 'Blog - Sat Yoga',
  description: 'Explore transformative insights, spiritual wisdom, and practical guidance from the Sat Yoga community.',
};

// Transform Strapi data to the format expected by the BlogPage component
function transformStrapiData(strapiData: any) {
  if (!strapiData || !strapiData.data) return [];
  
  return strapiData.data.map((post: any) => {
    const attrs = post.attributes;
    return {
      id: post.id.toString(),
      title: attrs.title || '',
      slug: attrs.slug || '',
      excerpt: attrs.excerpt || '',
      content: attrs.content || '',
      featuredImage: attrs.featuredImage?.data?.attributes?.url || '',
      category: attrs.category?.data?.attributes?.name || 'Uncategorized',
      author: {
        id: attrs.author?.data?.id?.toString() || '0',
        name: attrs.author?.data?.attributes?.name || 'Unknown',
        imageUrl: attrs.author?.data?.attributes?.avatar?.data?.attributes?.url || '',
      },
      publishedAt: attrs.publishedAt || new Date().toISOString(),
      readTime: attrs.readTime || Math.ceil(((attrs.content || '').length / 1000) * 2), // Estimate reading time
      isFeatured: attrs.isFeatured || false,
    };
  });
}

// This is a server component that fetches blog posts from the API
export default async function BlogPageRoute() {
  try {
    // Fetch blog posts from Strapi using blogApi
    const data = await blogApi.getPosts(1, 12); // page 1, 12 posts per page
    
    // Transform data for the component
    const posts = transformStrapiData(data);
    
    return <BlogPage initialPosts={posts} />;
  } catch (error) {
    console.error('Error fetching blog posts:', error);
    
    // Return empty array if fetch fails - you could show an error state instead
    return <BlogPage initialPosts={[]} />;
  }
}
// === ./src/app/calendar/[slug]/page.tsx ===
// app/(main)/calendar/[slug]/page.tsx
import { Metadata } from 'next';
import { notFound } from 'next/navigation';
import { EventDetailPage, Event } from '@/components/calendar/Calendar';
import { fetchAPI } from '@/lib/api';

interface EventPageProps {
  params: {
    slug: string;
  };
}

// Generate metadata for the event
export async function generateMetadata({ params }: EventPageProps): Promise<Metadata> {
  const slug = params.slug;
  
  // In a real implementation, you would fetch the event from your Strapi API
  // const data = await fetchAPI(`/events?filters[slug][$eq]=${slug}&populate=*`);
  
  // If no event is found, return a generic title
  // if (!data || !data.data || data.data.length === 0) {
  //   return {
  //     title: 'Event Not Found - Sat Yoga',
  //   };
  // }
  
  // const event = data.data[0].attributes;
  
  // For this example, we'll use mock data
  const event = {
    title: 'Online Retreat Guided by Shunyamurti',
    subtitle: 'Deepen your meditation practice',
  };
  
  return {
    title: `${event.title} - Sat Yoga Calendar`,
    description: event.subtitle,
  };
}

export default async function EventPageRoute({ params }: EventPageProps) {
  const slug = params.slug;
  
  // In a real implementation, you would fetch the event from your Strapi API
  // const data = await fetchAPI(`/events?filters[slug][$eq]=${slug}&populate=*`);
  
  // if (!data || !data.data || data.data.length === 0) {
  //   notFound();
  // }
  
  // const event = data.data[0].attributes;
  
  // Mock data for demonstration with correct type assertions
  const event: Event = {
    id: '2',
    title: 'Online Retreat Guided by Shunyamurti',
    slug: 'online-retreat-december',
    subtitle: 'Deepen your meditation practice',
    description: `
      <p>Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.</p>
      <p>Join us for a transformative 7-day online retreat guided by Shunyamurti, focused on deepening your meditation practice and exploring the nature of consciousness. This retreat is suitable for both beginners and experienced meditators.</p>
      <p>During this retreat, you will:</p>
      <ul>
        <li>Learn advanced meditation techniques</li>
        <li>Participate in daily guided practice sessions</li>
        <li>Engage in Q&A sessions with Shunyamurti</li>
        <li>Connect with a community of like-minded seekers</li>
      </ul>
      <p>All sessions will be conducted via Zoom, and recordings will be available for participants who cannot attend live due to time zone differences.</p>
    `,
    startDate: '2024-12-14T14:00:00Z',
    duration: {
      value: 7,
      unit: 'days' // Explicitly use the correct union type value
    },
    location: 'Online' as 'Online', // Type assertion for the union type
    imageUrl: '',
    teacher: 'Shunyamurti',
  };
  
  // Mock related events with correct type assertions
  const relatedEvents: Event[] = [
    {
      id: '3',
      title: 'Online Retreat Guided by Shunyamurti',
      slug: 'online-retreat-january',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2025-01-14T14:00:00Z',
      duration: {
        value: 7,
        unit: 'days' // Explicitly use the correct union type value
      },
      location: 'Online' as 'Online', // Type assertion for the union type
      imageUrl: '',
      teacher: 'Shunyamurti',
    },
    {
      id: '4',
      title: 'Shakti Saturation',
      slug: 'shakti-saturation-february',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2025-02-14T10:00:00Z',
      duration: {
        value: 1,
        unit: 'months' // Explicitly use the correct union type value
      },
      location: 'Onsite' as 'Onsite', // Type assertion for the union type
      imageUrl: '',
    },
  ];
  
  // If the request slug doesn't match the event slug, return 404
  if (slug !== event.slug) {
    notFound();
  }
  
  return <EventDetailPage event={event} relatedEvents={relatedEvents} />;
}
// === ./src/app/calendar/page.tsx ===
// app/(main)/calendar/page.tsx
import { Metadata } from 'next';
import { CalendarPage } from '@/components/calendar/Calendar';
import { Event } from '@/components/calendar/Calendar';  // Import the Event type
import { fetchAPI } from '@/lib/api';

export const metadata: Metadata = {
  title: 'Calendar - Sat Yoga',
  description: 'Explore upcoming retreats, events, and activities at Sat Yoga Ashram.',
};

// This is a server component that fetches events from the API
export default async function CalendarPageRoute() {
  // In a real implementation, you would fetch events from your Strapi API
  // For this example, we'll use mock data
  
  // Example of how you would fetch from Strapi:
  // const data = await fetchAPI('/events?populate=*&sort=startDate:asc');
  
  // Mock data for demonstration with correct type assertions
  const events: Event[] = [
    {
      id: '1',
      title: 'Sevadhari',
      slug: 'sevadhari-december',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2024-12-14T10:00:00Z',
      duration: {
        value: 6,
        unit: 'months' // Explicitly use the correct union type value
      },
      location: 'Onsite' as 'Onsite', // Type assertion for the union type
      imageUrl: '',
    },
    {
      id: '2',
      title: 'Online Retreat Guided by Shunyamurti',
      slug: 'online-retreat-december',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2024-12-14T14:00:00Z',
      duration: {
        value: 7,
        unit: 'days' // Explicitly use the correct union type value
      },
      location: 'Online' as 'Online', // Type assertion for the union type
      imageUrl: '',
      teacher: 'Shunyamurti',
    },
    {
      id: '3',
      title: 'Online Retreat Guided by Shunyamurti',
      slug: 'online-retreat-january',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2025-01-14T14:00:00Z',
      duration: {
        value: 7,
        unit: 'days' // Explicitly use the correct union type value
      },
      location: 'Online' as 'Online', // Type assertion for the union type
      imageUrl: '',
      teacher: 'Shunyamurti',
    },
    {
      id: '4',
      title: 'Shakti Saturation',
      slug: 'shakti-saturation-february',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2025-02-14T10:00:00Z',
      duration: {
        value: 1,
        unit: 'months' // Explicitly use the correct union type value
      },
      location: 'Onsite' as 'Onsite', // Type assertion for the union type
      imageUrl: '',
    },
    {
      id: '5',
      title: 'Sevadhari',
      slug: 'sevadhari-february',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2025-02-14T14:00:00Z',
      duration: {
        value: 6,
        unit: 'months' // Explicitly use the correct union type value
      },
      location: 'Onsite' as 'Onsite', // Type assertion for the union type
      imageUrl: '',
    },
    {
      id: '6',
      title: 'Shakti Saturation',
      slug: 'shakti-saturation-march',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2025-03-14T10:00:00Z',
      duration: {
        value: 1,
        unit: 'months' // Explicitly use the correct union type value
      },
      location: 'Onsite' as 'Onsite', // Type assertion for the union type
      imageUrl: '',
    },
    {
      id: '7',
      title: 'Sevadhari',
      slug: 'sevadhari-march',
      subtitle: 'Subtitle',
      description: 'Lorem ipsum dolor sit amet consectetur. Sit cras viverra vivamus aliquet pharetra enim. Condimentum pellentesque suspendisse tellus nisi. Consequat pellentesque diam volutpat sed sed. Posuere elementum ac adipiscing.',
      startDate: '2025-03-14T14:00:00Z',
      duration: {
        value: 6,
        unit: 'months' // Explicitly use the correct union type value
      },
      location: 'Onsite' as 'Onsite', // Type assertion for the union type
      imageUrl: '',
    },
  ];
  
  return <CalendarPage initialEvents={events} />;
}
// === ./src/app/contact/page.tsx ===
// app/(main)/contact/page.tsx
import { Metadata } from 'next';
import Image from 'next/image';
import ContactForm from '@/components/contact/ContactForm';
import {ContactInfo} from '@/components/contact/ContactInfo';
import ContactMap from '@/components/contact/ContactMap';

export const metadata: Metadata = {
  title: 'Contact Us - Sat Yoga',
  description: 'Get in touch with the Sat Yoga community. We\'re here to help with any questions or inquiries you may have.',
};

export default function ContactPage() {
  return (
    <>
      {/* Hero section with quote */}
      <div className="bg-gray-600 text-white py-20">
        <div className="container mx-auto px-4 text-center">
          <div className="max-w-2xl mx-auto italic">
            <blockquote className="text-lg">
              &ldquo;Lorem ipsum dolor sit amet consectetur. Ac risus dignissim nisi magnis. Nisi fermentum nisi porttitor amet blandit sagittis aenean. At sollicitudin ac ornare euismod neque mus aliquam condimentum. Ornare ut elit sit adipiscing placerat ullamcorper suspendisse ut.&rdquo;
            </blockquote>
          </div>
        </div>
      </div>

      {/* Contact section */}
      <div className="py-16">
        <div className="container mx-auto px-4">
          <div className="grid md:grid-cols-2 gap-12">
            <div>
              <ContactInfo />
            </div>
            
            <div>
              <ContactForm />
            </div>
          </div>
        </div>
      </div>

      {/* Map section */}
      <div className="h-[400px] w-full relative">
        <ContactMap />
      </div>
    </>
  );
}
// === ./src/app/dashboard/admin/blog/categories/page.tsx ===
import BlogCategories from "@/components/dashboard/blog/BlogCategories";

export const metadata = {
  title: "Blog Categories | Admin Dashboard",
  description: "Manage your blog categories",
};

export default function BlogCategoriesPage() {
  return <BlogCategories />;
}

// === ./src/app/dashboard/admin/blog/create/page.tsx ===
import { Metadata } from "next";
import BlogPostForm from "@/components/dashboard/blog/BlogPostForm";

export const metadata: Metadata = {
  title: "Create Blog Post | Admin Dashboard",
  description: "Create a new blog post",
};

export default function CreateBlogPostPage() {
  return <BlogPostForm />;
}

// === ./src/app/dashboard/admin/blog/edit/[id]/page.tsx ===
import { Metadata } from "next";
import BlogPostForm from "@/components/dashboard/blog/BlogPostForm";

export const metadata: Metadata = {
  title: "Edit Blog Post | Admin Dashboard",
  description: "Edit an existing blog post",
};

export default function EditBlogPostPage({
  params,
}: {
  params: { id: string };
}) {
  return <BlogPostForm postId={params.id} />;
}

// === ./src/app/dashboard/admin/blog/page.tsx ===
import { Metadata } from "next";
import BlogIndex from "@/components/dashboard/blog/BlogIndex";

export const metadata: Metadata = {
  title: "Blog Posts | Admin Dashboard",
  description: "Manage your blog posts",
};

export default function BlogIndexPage() {
  return <BlogIndex />;
}

// === ./src/app/dashboard/admin/course/[slug]/class/edit/[id]/page.tsx ===
"use client";

import { useParams } from "next/navigation";
import EditClassForm from "@/components/dashboard/course/admin/EditClassForm";

export default function Page() {
  const params = useParams();

  // Extract course slug and class ID from the URL parameters
  const slug = params.slug as string;
  const classId = params.id as string;

  return <EditClassForm courseSlug={slug} classId={classId} />;
}

// === ./src/app/dashboard/admin/course/[slug]/class/new/page.tsx ===
"use client";

import NewClassForm from "@/components/dashboard/course/admin/NewClassForm";
import { useParams } from "next/navigation";

export default function NewClassPage() {
  const params = useParams();
  const courseSlug = params.slug as string;

  return (
    <div>
      <NewClassForm courseSlug={courseSlug} />
    </div>
  );
}

// === ./src/app/dashboard/admin/course/[slug]/page.tsx ===
"use client";

import React, { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { courseApi } from "@/lib/courseApi";
import {
  ArrowLeftIcon,
  PencilSquareIcon,
  TrashIcon,
  ArrowPathIcon,
  CalendarIcon,
  UserIcon,
  CurrencyDollarIcon,
  CheckBadgeIcon,
  BookOpenIcon,
  ClipboardDocumentListIcon,
  PhotoIcon,
  ChatBubbleBottomCenterTextIcon,
  DocumentTextIcon,
  PlayIcon,
  ClockIcon,
  PlusIcon,
  ArrowsUpDownIcon,
  CheckCircleIcon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import ReactMarkdown from "react-markdown";

const CourseDetailPage = () => {
  const params = useParams();
  const router = useRouter();
  const slug = params.slug as string;

  const [course, setCourse] = useState<any>(null);
  const [classes, setClasses] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<any>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  // State for drag-and-drop reordering
  const [originalOrder, setOriginalOrder] = useState<any[]>([]);
  const [draggedItem, setDraggedItem] = useState<any | null>(null);
  const [orderChanged, setOrderChanged] = useState(false);
  const [isUpdatingOrder, setIsUpdatingOrder] = useState(false);

  // Success notification state
  const [successNotification, setSuccessNotification] = useState<string | null>(
    null
  );

  useEffect(() => {
    const fetchCourse = async () => {
      setIsLoading(true);
      try {
        const response = await courseApi.getCourseBySlug(slug);
        console.log("API Response:", response);

        // Store debug info
        setDebugInfo(response);

        if (!response) {
          setError("Course not found");
          return;
        }

        setCourse(response);

        // Fetch classes after we have the course
        if (response.id) {
          try {
            const classesResponse = await courseApi.getClasses(
              response.id.toString()
            );
            console.log("Classes Response:", classesResponse);

            if (classesResponse.data) {
              // Sort classes by orderIndex
              const sortedClasses = [...classesResponse.data].sort(
                (a, b) => a.attributes.orderIndex - b.attributes.orderIndex
              );
              setClasses(sortedClasses);
              // Store original order for comparison
              setOriginalOrder(sortedClasses.map((c) => c.id));
            }
          } catch (classError) {
            console.error("Error fetching classes:", classError);
            // Continue even if classes fail to load
          }
        }
      } catch (err) {
        console.error("Error fetching course:", err);
        setError(
          `Failed to load course details: ${
            err instanceof Error ? err.message : String(err)
          }`
        );
      } finally {
        setIsLoading(false);
      }
    };

    if (slug) {
      fetchCourse();
    }
  }, [slug]);

  // Auto-dismiss success notification after 5 seconds
  useEffect(() => {
    if (successNotification) {
      const timer = setTimeout(() => {
        setSuccessNotification(null);
      }, 5000);

      return () => clearTimeout(timer);
    }
  }, [successNotification]);

  const handleDelete = async () => {
    if (!course?.id) return;

    setIsDeleting(true);
    try {
      await courseApi.deleteCourse(course.id.toString());
      router.push("/dashboard/admin/course");
    } catch (err) {
      console.error("Error deleting course:", err);
      setError("Failed to delete the course");
      setIsDeleting(false);
    }
  };

  // Drag-and-drop handlers
  const handleDragStart = (classItem: any) => {
    setDraggedItem(classItem);
  };

  const handleDragOver = (e: React.DragEvent, index: number) => {
    e.preventDefault();
    if (!draggedItem) return;

    // Create a copy of the current classes array
    const draggedItemIndex = classes.findIndex((c) => c.id === draggedItem.id);
    if (draggedItemIndex === index) return;

    const newClasses = [...classes];
    // Remove item from its original position
    const [removed] = newClasses.splice(draggedItemIndex, 1);
    // Insert at the new position
    newClasses.splice(index, 0, removed);

    setClasses(newClasses);

    // Check if the order has changed from the original
    const newOrder = newClasses.map((c) => c.id);
    const hasOrderChanged = !newOrder.every((id, i) => id === originalOrder[i]);
    setOrderChanged(hasOrderChanged);
  };

  const handleDragEnd = () => {
    setDraggedItem(null);
  };

  // Update class order in the database
  const updateClassOrder = async () => {
    if (!course?.id) return;

    setIsUpdatingOrder(true);
    try {
      // Prepare the updated classes with new orderIndex values
      const promises = classes.map((classItem, index) => {
        return courseApi.updateClass(classItem.id.toString(), {
          orderIndex: index + 1, // Start from 1
        });
      });

      await Promise.all(promises);

      // Update the original order after successful save
      setOriginalOrder(classes.map((c) => c.id));
      setOrderChanged(false);

      // Show success notification instead of alert
      setSuccessNotification("Class order updated successfully!");
    } catch (error) {
      console.error("Error updating class order:", error);
      setError("Failed to update class order. Please try again.");
    } finally {
      setIsUpdatingOrder(false);
    }
  };

  // Helper function to safely construct image URLs
  const getImageUrl = (urlPath: string) => {
    if (!urlPath) return "";

    // If it's already an absolute URL, return it as is
    if (urlPath.startsWith("http://") || urlPath.startsWith("https://")) {
      return urlPath;
    }

    // Otherwise, prepend the Strapi URL
    const strapiUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
    return `${strapiUrl}${urlPath}`;
  };

  // Format duration in minutes to hours and minutes
  const formatDuration = (minutes: number) => {
    if (!minutes || isNaN(minutes)) return "Duration not set";

    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;

    if (hours > 0) {
      return `${hours} hr${hours > 1 ? "s" : ""} ${
        remainingMinutes > 0 ? `${remainingMinutes} min` : ""
      }`;
    } else {
      return `${remainingMinutes} min`;
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
      </div>
    );
  }

  if (error || !course) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-50 p-4 rounded-md text-red-700">
          <p className="font-medium">Error: {error || "Course not found"}</p>
          <p className="mt-2">
            <Link
              href="/dashboard/admin/course"
              className="text-purple-600 hover:underline"
            >
              &larr; Back to courses
            </Link>
          </p>

          {/* Debug information */}
          {debugInfo && (
            <div className="mt-4 p-4 bg-gray-100 rounded overflow-auto max-h-96">
              <p className="font-bold mb-2">Debug Information:</p>
              <pre className="text-xs text-gray-800">
                {JSON.stringify(debugInfo, null, 2)}
              </pre>
            </div>
          )}
        </div>
      </div>
    );
  }

  // Extract course data safely with optional chaining
  const title = course?.attributes?.title || "Untitled Course";
  const description = course?.attributes?.description || "";
  const price = course?.attributes?.price || 0;
  const isFree = course?.attributes?.isFree || false;
  const startDate = course?.attributes?.startDate;
  const endDate = course?.attributes?.endDate;
  const isFeatured = course?.attributes?.isFeatured || false;
  const featuredImage = course?.attributes?.featuredImage;
  const instructors = course?.attributes?.instructors;
  const publishedAt = course?.attributes?.publishedAt;

  // New fields
  const whatYouWillLearn = course?.attributes?.whatYouWillLearn || [];
  const courseFeatures = course?.attributes?.courseFeatures || {};
  const previewMedia = course?.attributes?.previewMedia;
  const featuredQuote = course?.attributes?.featuredQuote;
  const introduction = course?.attributes?.introduction || "";
  const addendum = course?.attributes?.addendum || "";

  const formattedStartDate = startDate
    ? new Date(startDate).toLocaleDateString()
    : "Not set";
  const formattedEndDate = endDate
    ? new Date(endDate).toLocaleDateString()
    : "Not set";
  const publishStatus = publishedAt ? "Published" : "Draft";

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Success notification - simplified design with Tailwind's built-in animation */}
      {successNotification && (
        <div className="fixed inset-x-0 bottom-4 flex justify-center items-center z-[9999]">
          <div className="bg-green-100 border border-green-300 rounded-md shadow-lg p-4 max-w-md mx-auto">
            <div className="flex items-center">
              <CheckCircleIcon className="h-5 w-5 text-green-600 mr-3 flex-shrink-0" />
              <p className="text-sm font-medium text-green-800 flex-grow">
                {successNotification}
              </p>
              <button
                type="button"
                className="ml-4 text-green-500 hover:text-green-700 flex-shrink-0"
                onClick={() => setSuccessNotification(null)}
              >
                <XMarkIcon className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Header with navigation and actions */}
      <div className="mb-6 flex justify-between items-center">
        <div className="flex items-center">
          <Link
            href="/dashboard/admin/course"
            className="mr-4 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeftIcon className="h-5 w-5" />
          </Link>
          <h1 className="text-2xl font-bold text-gray-900">Course Details</h1>
        </div>
        <div className="flex space-x-3">
          <Link
            href={`/dashboard/admin/course/${course.attributes.slug}/edit`}
            className="flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
          >
            <PencilSquareIcon className="h-5 w-5 mr-1" />
            Edit
          </Link>
          <button
            onClick={() => setShowDeleteConfirm(true)}
            className="flex items-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
            disabled={isDeleting}
          >
            {isDeleting ? (
              <ArrowPathIcon className="h-5 w-5 mr-1 animate-spin" />
            ) : (
              <TrashIcon className="h-5 w-5 mr-1" />
            )}
            Delete
          </button>
        </div>
      </div>

      {/* Course details card */}
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        {/* Featured image */}
        {featuredImage?.data && featuredImage.data.attributes?.url && (
          <div className="w-full h-64 relative overflow-hidden">
            <Image
              src={getImageUrl(featuredImage.data.attributes.url)}
              alt={title}
              fill
              style={{ objectFit: "cover" }}
              priority
            />
          </div>
        )}

        {/* Main content */}
        <div className="p-6">
          {/* Title and status badge */}
          <div className="flex justify-between items-start mb-4">
            <h2 className="text-3xl font-bold text-gray-900">{title}</h2>
            <div
              className={`px-3 py-1 rounded-full text-sm font-medium ${
                publishedAt
                  ? "bg-green-100 text-green-800"
                  : "bg-yellow-100 text-yellow-800"
              }`}
            >
              {publishStatus}
            </div>
          </div>

          {/* Metadata tags */}
          <div className="flex flex-wrap gap-2 mb-6">
            <div className="flex items-center px-3 py-1 bg-purple-50 text-purple-700 rounded-full text-sm">
              <CurrencyDollarIcon className="h-4 w-4 mr-1" />
              {isFree ? "Free" : `$${price}`}
            </div>
            {isFeatured && (
              <div className="flex items-center px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm">
                <CheckBadgeIcon className="h-4 w-4 mr-1" />
                Featured
              </div>
            )}
            <div className="flex items-center px-3 py-1 bg-gray-50 text-gray-700 rounded-full text-sm">
              <CalendarIcon className="h-4 w-4 mr-1" />
              {startDate
                ? `${formattedStartDate} - ${formattedEndDate}`
                : "No dates set"}
            </div>
          </div>

          {/* Instructors */}
          {instructors?.data?.length > 0 && (
            <div className="mb-6">
              <h3 className="text-lg font-medium text-gray-900 mb-2 flex items-center">
                <UserIcon className="h-5 w-5 mr-2 text-gray-500" />
                Instructors
              </h3>
              <div className="flex flex-wrap gap-2">
                {instructors.data.map((instructor: any) => (
                  <div
                    key={instructor.id}
                    className="px-3 py-1 bg-gray-100 text-gray-800 rounded-md text-sm"
                  >
                    {instructor.attributes.name}
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Description */}
          <div className="mb-6">
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              Description
            </h3>
            <div className="prose max-w-none">
              <ReactMarkdown>{description}</ReactMarkdown>
            </div>
          </div>

          {/* What You Will Learn Section */}
          {whatYouWillLearn && whatYouWillLearn.length > 0 && (
            <div className="mb-6 border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <BookOpenIcon className="h-5 w-5 mr-2 text-gray-500" />
                What You Will Learn
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {whatYouWillLearn.map((point: any, index: number) => (
                  <div key={index} className="bg-purple-50 p-4 rounded-lg">
                    <h4 className="font-bold text-purple-800 mb-1">
                      {point.title}
                    </h4>
                    <p className="text-sm text-gray-600">{point.description}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Course Features Section */}
          {courseFeatures && Object.keys(courseFeatures).length > 0 && (
            <div className="mb-6 border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <ClipboardDocumentListIcon className="h-5 w-5 mr-2 text-gray-500" />
                This Course Includes:
              </h3>

              <div className="bg-gray-50 p-4 rounded-lg space-y-3">
                {courseFeatures.videoClasses && (
                  <div className="flex">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                      <span className="text-purple-700 font-bold">1</span>
                    </div>
                    <div>
                      <p className="text-gray-800 font-medium">Video Classes</p>
                      <p className="text-sm text-gray-600">
                        {courseFeatures.videoClasses}
                      </p>
                    </div>
                  </div>
                )}

                {courseFeatures.guidedMeditations && (
                  <div className="flex">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                      <span className="text-purple-700 font-bold">2</span>
                    </div>
                    <div>
                      <p className="text-gray-800 font-medium">
                        Guided Meditations
                      </p>
                      <p className="text-sm text-gray-600">
                        {courseFeatures.guidedMeditations}
                      </p>
                    </div>
                  </div>
                )}

                {courseFeatures.studyMaterials && (
                  <div className="flex">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                      <span className="text-purple-700 font-bold">3</span>
                    </div>
                    <div>
                      <p className="text-gray-800 font-medium">
                        Study Materials
                      </p>
                      <p className="text-sm text-gray-600">
                        {courseFeatures.studyMaterials}
                      </p>
                    </div>
                  </div>
                )}

                {courseFeatures.supportInfo && (
                  <div className="flex">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                      <span className="text-purple-700 font-bold">4</span>
                    </div>
                    <div>
                      <p className="text-gray-800 font-medium">Support</p>
                      <p className="text-sm text-gray-600">
                        {courseFeatures.supportInfo}
                      </p>
                    </div>
                  </div>
                )}

                {courseFeatures.curriculumAids && (
                  <div className="flex">
                    <div className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3">
                      <span className="text-purple-700 font-bold">5</span>
                    </div>
                    <div>
                      <p className="text-gray-800 font-medium">
                        Curriculum Aids
                      </p>
                      <p className="text-sm text-gray-600">
                        {courseFeatures.curriculumAids}
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Preview Media */}
          {previewMedia?.data?.length > 0 && (
            <div className="mb-6 border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <PhotoIcon className="h-5 w-5 mr-2 text-gray-500" />
                Preview Media
              </h3>

              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                {previewMedia.data.map((media: any) => {
                  const mediaUrl = getImageUrl(media.attributes.url);
                  const isImage = media.attributes.mime?.startsWith("image/");

                  return (
                    <div key={media.id} className="relative group">
                      <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden relative">
                        {isImage ? (
                          <Image
                            src={mediaUrl}
                            alt={media.attributes.name || "Preview media"}
                            fill
                            sizes="(max-width: 768px) 50vw, 33vw"
                            style={{ objectFit: "cover" }}
                          />
                        ) : (
                          <div className="flex items-center justify-center h-full bg-gray-800 text-white">
                            <span className="text-xs p-2 text-center">
                              {media.attributes.name}
                            </span>
                          </div>
                        )}
                      </div>
                      <span className="text-xs mt-1 block truncate">
                        {media.attributes.name}
                      </span>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* Featured Quote */}
          {featuredQuote?.quoteText && (
            <div className="mb-6 border-t border-gray-200 pt-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <ChatBubbleBottomCenterTextIcon className="h-5 w-5 mr-2 text-gray-500" />
                Featured Quote
              </h3>

              <blockquote className="relative bg-purple-50 p-5 rounded-lg border-l-4 border-purple-400">
                <p className="italic text-gray-800 mb-3">
                  "{featuredQuote.quoteText}"
                </p>

                <footer className="flex items-center">
                  {featuredQuote.authorImage?.data && (
                    <div className="mr-3">
                      <div className="w-10 h-10 rounded-full overflow-hidden relative">
                        <Image
                          src={getImageUrl(
                            featuredQuote.authorImage.data.attributes.url
                          )}
                          alt={featuredQuote.authorName || "Quote author"}
                          fill
                          sizes="40px"
                          style={{ objectFit: "cover" }}
                        />
                      </div>
                    </div>
                  )}

                  <cite className="not-italic font-medium text-gray-900">
                    {featuredQuote.authorName}
                  </cite>
                </footer>
              </blockquote>
            </div>
          )}

          {/* Course classes section */}
          <div className="mt-8 border-t border-gray-200 pt-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-gray-900">
                Course Classes
              </h3>
              <div className="flex items-center space-x-2">
                <div className="flex items-center text-gray-500 text-sm">
                  <ArrowsUpDownIcon className="h-4 w-4 mr-1" />
                  Drag to reorder
                </div>
                {orderChanged && (
                  <button
                    onClick={updateClassOrder}
                    disabled={isUpdatingOrder}
                    className="px-3 py-1 bg-purple-600 text-white rounded-md hover:bg-purple-700 text-sm flex items-center"
                  >
                    {isUpdatingOrder ? (
                      <>
                        <ArrowPathIcon className="h-4 w-4 mr-1 animate-spin" />
                        Updating...
                      </>
                    ) : (
                      "Update Order"
                    )}
                  </button>
                )}
              </div>
            </div>

            {/* Display course classes including intro and addendum */}
            <div className="space-y-4">
              {/* Introduction as the first item */}
              {introduction && (
                <div className="bg-gray-50 rounded-lg overflow-hidden">
                  <div className="p-4 border-l-4 border-blue-500">
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="font-bold text-lg text-gray-900">
                        Introduction
                      </h4>
                    </div>
                    <div className="prose max-w-none mt-2">
                      <ReactMarkdown>{introduction}</ReactMarkdown>
                    </div>
                  </div>
                </div>
              )}

              {/* Regular classes - now with drag-and-drop */}
              {classes.length > 0 ? (
                <div className="space-y-2">
                  {classes.map((classItem, index) => (
                    <div
                      key={classItem.id}
                      draggable
                      onDragStart={() => handleDragStart(classItem)}
                      onDragOver={(e) => handleDragOver(e, index)}
                      onDragEnd={handleDragEnd}
                      className={`bg-gray-50 rounded-lg overflow-hidden cursor-move ${
                        draggedItem?.id === classItem.id ? "opacity-50" : ""
                      }`}
                    >
                      <div className="p-4 border-l-4 border-purple-500">
                        <div className="flex justify-between items-start mb-2">
                          <div className="flex items-center">
                            <span className="w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center mr-3 text-purple-700 font-bold">
                              {index + 1}
                            </span>
                            <h4 className="font-bold text-lg text-gray-900">
                              {classItem.attributes.title}
                            </h4>
                          </div>
                          <div className="flex items-center text-sm text-gray-500">
                            <ClockIcon className="h-4 w-4 mr-1" />
                            {formatDuration(classItem.attributes.duration)}
                          </div>
                        </div>

                        {/* Display class content types */}
                        {classItem.attributes.content && (
                          <div className="mt-3 flex flex-wrap gap-2">
                            {/* Video - blue */}
                            {classItem.attributes.content.video && (
                              <div className="inline-flex items-center px-2 py-1 bg-blue-100 text-blue-800 rounded-md text-xs">
                                <PlayIcon className="h-3 w-3 mr-1" />
                                Video
                              </div>
                            )}

                            {/* Key Concepts - green */}
                            {classItem.attributes.content.keyConcepts && (
                              <div className="inline-flex items-center px-2 py-1 bg-green-100 text-green-800 rounded-md text-xs">
                                <DocumentTextIcon className="h-3 w-3 mr-1" />
                                Key Concepts
                              </div>
                            )}

                            {/* Writing Prompts - rose */}
                            {classItem.attributes.content.writingPrompts && (
                              <div className="inline-flex items-center px-2 py-1 bg-rose-100 text-rose-800 rounded-md text-xs">
                                <DocumentTextIcon className="h-3 w-3 mr-1" />
                                Writing Prompts
                              </div>
                            )}

                            {/* Additional Materials - amber */}
                            {classItem.attributes.content
                              .additionalMaterials && (
                              <div className="inline-flex items-center px-2 py-1 bg-amber-100 text-amber-800 rounded-md text-xs">
                                <DocumentTextIcon className="h-3 w-3 mr-1" />
                                Additional Materials
                              </div>
                            )}
                          </div>
                        )}

                        <div className="mt-2 flex justify-end">
                          <Link
                            href={`/dashboard/admin/course/${course.attributes.slug}/class/edit/${classItem.id}`}
                            className="text-purple-600 hover:text-purple-800 text-sm flex items-center"
                          >
                            <PencilSquareIcon className="h-4 w-4 mr-1" />
                            Edit Class
                          </Link>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="bg-gray-50 p-4 rounded-md text-center text-gray-500">
                  No classes have been added to this course yet.
                </div>
              )}

              {/* Add Class button positioned between classes and addendum */}
              <div className="flex justify-center">
                <Link
                  href={`/dashboard/admin/course/${course.attributes.slug}/class/new`}
                  className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  <PlusIcon className="h-5 w-5 mr-2" />
                  Add New Class
                </Link>
              </div>

              {/* Addendum as the last item */}
              {addendum && (
                <div className="bg-gray-50 rounded-lg overflow-hidden">
                  <div className="p-4 border-l-4 border-green-500">
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="font-bold text-lg text-gray-900">
                        Addendum
                      </h4>
                    </div>
                    <div className="prose max-w-none mt-2">
                      <ReactMarkdown>{addendum}</ReactMarkdown>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Delete confirmation modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-gray-900 mb-4">
              Confirm Deletion
            </h3>
            <p className="text-gray-700 mb-6">
              Are you sure you want to delete "{title}"? This action cannot be
              undone.
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
                disabled={isDeleting}
              >
                Cancel
              </button>
              <button
                onClick={handleDelete}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <span className="flex items-center">
                    <ArrowPathIcon className="h-4 w-4 mr-2 animate-spin" />
                    Deleting...
                  </span>
                ) : (
                  "Delete Course"
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* No custom styles needed - using Tailwind's built-in classes */}
    </div>
  );
};

export default CourseDetailPage;

// === ./src/app/dashboard/admin/course/create/page.tsx ===
import CourseForm from "@/components/dashboard/course/admin/CourseForm";

export const metadata = {
  title: "Create New Course - Admin Dashboard",
  description:
    "Create a new course with details, content structure, and instructor information.",
};

export default function CreateCoursePage() {
  return (
    <div>
      <CourseForm />
    </div>
  );
}

// === ./src/app/dashboard/admin/course/page.tsx ===
import CourseIndex from "@/components/dashboard/course/admin/CourseIndex";

export const metadata = {
  title: "Courses Management - Admin Dashboard",
  description:
    "Manage your courses, add new courses, edit existing ones, and organize course content.",
};

export default function CoursesPage() {
  return (
    <div>
      <CourseIndex />
    </div>
  );
}

// === ./src/app/dashboard/admin/instructor/create/page.tsx ===
import InstructorForm from "@/components/dashboard/course/admin/InstructorForm";

export const metadata = {
  title: "Add New Instructor - Admin Dashboard",
  description:
    "Create a new instructor profile with bio, contact information, and photo.",
};

export default function CreateInstructorPage() {
  return (
    <div>
      <InstructorForm />
    </div>
  );
}

// === ./src/app/dashboard/admin/instructor/edit/[id]/page.tsx ===
import InstructorForm from "@/components/dashboard/course/admin/InstructorForm";

interface EditInstructorPageProps {
  params: {
    id: string;
  };
}

export async function generateMetadata({ params }: EditInstructorPageProps) {
  return {
    title: `Edit Instructor - Admin Dashboard`,
    description: `Edit instructor profile, bio, contact information, and photo.`,
  };
}

export default function EditInstructorPage({
  params,
}: EditInstructorPageProps) {
  const { id } = params;

  return (
    <div>
      <InstructorForm instructorId={id} />
    </div>
  );
}

// === ./src/app/dashboard/admin/instructor/page.tsx ===
import InstructorIndex from "@/components/dashboard/course/admin/InstructorIndex";

export const metadata = {
  title: "Instructors Management - Admin Dashboard",
  description:
    "Manage your course instructors, add new instructors, and edit existing ones.",
};

export default function InstructorsPage() {
  return (
    <div>
      <InstructorIndex />
    </div>
  );
}

// === ./src/app/dashboard/admin/layout.tsx ===
'use client';

import AdminSidebar from '@/components/dashboard/AdminSidebar';

interface AdminLayoutProps {
  children: React.ReactNode;
}

const AdminLayout: React.FC<AdminLayoutProps> = ({ children }) => {
  return (
    <div className="flex h-screen">
      <AdminSidebar />
      <main className="flex-1 overflow-y-auto bg-gray-100">
        <div className="px-6 py-6">
          {children}
        </div>
      </main>
    </div>
  );
};

export default AdminLayout;
// === ./src/app/dashboard/admin/page.tsx ===
import AdminDashboard from "@/components/dashboard/AdminDashboard";

export default function Page() {
  return <AdminDashboard />;
}

// === ./src/app/dashboard/page.tsx ===
import { redirect } from 'next/navigation';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

export default async function DashboardPage() {
    // Get the user session
    const session = await getServerSession(authOptions);
    
    // Debug - log the session to see what we're working with
    console.log("Dashboard redirect - session:", JSON.stringify({
      authenticated: !!session,
      user: session?.user,
      role: session?.user?.role,
    }, null, 2));
    
    // Redirect based on user role
    if (!session) {
      // Not authenticated, redirect to login
      console.log("No session, redirecting to login");
      redirect('/login');
    } else if (session.user?.role === 'admin') {
      // Admin users go to admin dashboard
      console.log("Admin user detected, redirecting to admin dashboard");
      redirect('/dashboard/admin');
    } else {
      // Regular users go to user dashboard
      console.log("Regular user detected, redirecting to user dashboard");
      redirect('/dashboard/user');
    }
  }
// === ./src/app/dashboard/user/courses/[slug]/addendum/page.tsx ===
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { ArrowLeftIcon } from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";
import ReactMarkdown from "react-markdown";

interface CourseAddendumPageProps {
  params: Promise<{
    slug: string;
  }>;
}

export default function CourseAddendumPage({
  params,
}: CourseAddendumPageProps) {
  // Unwrap params using React.use()
  const resolvedParams = React.use(params);
  const { slug } = resolvedParams;

  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [courseTitle, setCourseTitle] = useState("");
  const [addendum, setAddendum] = useState("");

  useEffect(() => {
    const fetchCourseAddendum = async () => {
      try {
        setIsLoading(true);
        const courseData = await courseApi.getCourseBySlug(slug);

        if (courseData && courseData.attributes) {
          setCourseTitle(courseData.attributes.title);

          if (courseData.attributes.addendum) {
            setAddendum(courseData.attributes.addendum);
          } else {
            setError("This course doesn't have an addendum");
          }
        } else {
          setError("Course not found");
        }
      } catch (err) {
        console.error("Error fetching course addendum:", err);
        setError("Failed to load course addendum");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCourseAddendum();
  }, [slug]);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 p-4 rounded-md">
          <p className="text-red-700">{error}</p>
        </div>
        <div className="mt-4">
          <Link
            href={`/dashboard/user/courses/${slug}/overview`}
            className="text-purple-600 hover:underline flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-1" />
            Back to course
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white min-h-screen">
      {/* Back button - UPDATED LINK */}
      <div className="container mx-auto px-4 py-4">
        <Link
          href={`/dashboard/user/courses/${slug}/overview`}
          className="text-gray-600 hover:text-gray-900 flex items-center"
        >
          <ArrowLeftIcon className="h-4 w-4 mr-1" />
          Back to course
        </Link>
      </div>

      <div className="container mx-auto px-4 py-6 max-w-3xl">
        <h1 className="text-2xl font-bold mb-6">Course Addendum</h1>
        <h2 className="text-xl text-gray-700 mb-8">{courseTitle}</h2>

        {/* Addendum content */}
        <div className="prose max-w-none mb-12">
          <ReactMarkdown>{addendum}</ReactMarkdown>
        </div>

        {/* Action buttons - UPDATED LINK */}
        <div className="flex justify-center mt-8 mb-16">
          <Link
            href={`/dashboard/user/courses/${slug}/overview`}
            className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-2" />
            Return to Course
          </Link>
        </div>
      </div>
    </div>
  );
}

// === ./src/app/dashboard/user/courses/[slug]/class/[id]/component/[componentId]/page.tsx ===
import { Suspense } from "react";
import ClassComponentLayout from "@/components/dashboard/course/user/ClassComponentLayout";
import ClassVideoComponent from "@/components/dashboard/course/user/ClassVideoComponent";
import ClassKeyConceptsComponent from "@/components/dashboard/course/user/ClassKeyConceptsComponent";
import ClassWritingPromptsComponent from "@/components/dashboard/course/user/ClassWritingPromptsComponent";
import ClassAdditionalMaterialsComponent from "@/components/dashboard/course/user/ClassAdditionalMaterialsComponent";

interface ClassComponentPageProps {
  params: {
    slug: string;
    id: string;
    componentId: string;
  };
}

// Loading fallback component
const LoadingFallback = () => (
  <div className="flex justify-center items-center min-h-64">
    <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
  </div>
);

export default function ClassComponentPage({
  params,
}: ClassComponentPageProps) {
  const slug = params.slug;
  const classIndex = parseInt(params.id, 10);
  const componentIndex = parseInt(params.componentId, 10);

  // Render the appropriate component based on the componentIndex
  const renderComponent = () => {
    switch (componentIndex) {
      case 1:
        return (
          <Suspense fallback={<LoadingFallback />}>
            <ClassVideoComponent slug={slug} classIndex={classIndex} />
          </Suspense>
        );
      case 2:
        return (
          <Suspense fallback={<LoadingFallback />}>
            <ClassKeyConceptsComponent slug={slug} classIndex={classIndex} />
          </Suspense>
        );
      case 3:
        return (
          <Suspense fallback={<LoadingFallback />}>
            <ClassWritingPromptsComponent slug={slug} classIndex={classIndex} />
          </Suspense>
        );
      case 4:
        return (
          <Suspense fallback={<LoadingFallback />}>
            <ClassAdditionalMaterialsComponent
              slug={slug}
              classIndex={classIndex}
            />
          </Suspense>
        );
      default:
        return <div>Component not found</div>;
    }
  };

  return (
    <ClassComponentLayout
      slug={slug}
      classIndex={classIndex}
      componentIndex={componentIndex}
    >
      {renderComponent()}
    </ClassComponentLayout>
  );
}

// === ./src/app/dashboard/user/courses/[slug]/class/[id]/page.tsx ===
import ClassPage from "@/components/dashboard/course/user/ClassPage";

export default function CourseClassPage({
  params,
}: {
  params: { slug: string; id: string };
}) {
  return <ClassPage courseSlug={params.slug} classId={params.id} />;
}

// Add metadata function for SEO
export async function generateMetadata({
  params,
}: {
  params: { slug: string; id: string };
}) {
  try {
    // You could fetch the class and course data here to generate dynamic metadata
    // For simplicity, we'll use a generic title
    return {
      title: `Class - Course Learning Platform`,
      description:
        "Learn at your own pace with our comprehensive course materials",
    };
  } catch (error) {
    console.error("Error generating metadata:", error);
    return {
      title: "Class - Course Learning Platform",
    };
  }
}

// === ./src/app/dashboard/user/courses/[slug]/introduction/page.tsx ===
"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { ArrowLeftIcon } from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";
import ReactMarkdown from "react-markdown";

interface IntroductionPageProps {
  params: Promise<{
    slug: string;
  }>;
}

export default function IntroductionPage({ params }: IntroductionPageProps) {
  // Unwrap params using React.use()
  const resolvedParams = React.use(params);
  const { slug } = resolvedParams;

  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [courseTitle, setCourseTitle] = useState("");
  const [introduction, setIntroduction] = useState("");
  const [progress, setProgress] = useState(0);

  useEffect(() => {
    const fetchCourseIntroduction = async () => {
      try {
        setIsLoading(true);
        const courseData = await courseApi.getCourseBySlug(slug);

        if (courseData && courseData.attributes) {
          setCourseTitle(courseData.attributes.title);
          setIntroduction(courseData.attributes.introduction || "");
        } else {
          setError("Course not found");
        }
      } catch (err) {
        console.error("Error fetching course introduction:", err);
        setError("Failed to load course introduction");
      } finally {
        setIsLoading(false);
      }
    };

    fetchCourseIntroduction();

    // Mock progress update
    const interval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + 10;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [slug]);

  const handleMarkAsComplete = () => {
    // Mock implementation - would save completion status in a real app
    console.log("Marking introduction as complete");

    // Navigate back to course overview
    router.push(`/dashboard/user/courses/${slug}/overview`);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 p-4 rounded-md">
          <p className="text-red-700">{error}</p>
        </div>
        <div className="mt-4">
          <Link
            href={`/dashboard/user/courses/${slug}/overview`}
            className="text-purple-600 hover:underline flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-1" />
            Back to course
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white min-h-screen">
      {/* Back button - UPDATED LINK */}
      <div className="container mx-auto px-4 py-4">
        <Link
          href={`/dashboard/user/courses/${slug}/overview`}
          className="text-gray-600 hover:text-gray-900 flex items-center"
        >
          <ArrowLeftIcon className="h-4 w-4 mr-1" />
          Back to course
        </Link>
      </div>

      {/* Progress bar */}
      <div className="sticky top-0 w-full h-1 bg-gray-200 z-10">
        <div
          className="h-1 bg-purple-600 transition-all duration-300"
          style={{ width: `${progress}%` }}
        ></div>
      </div>

      <div className="container mx-auto px-4 py-6 max-w-3xl">
        <h1 className="text-2xl font-bold mb-6">Introduction</h1>

        {/* Introduction content */}
        <div className="prose max-w-none mb-12">
          <ReactMarkdown>{introduction}</ReactMarkdown>
        </div>

        {/* Action buttons - UPDATED LINK */}
        <div className="flex justify-between mt-8 mb-16">
          <Link
            href={`/dashboard/user/courses/${slug}/overview`}
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-2" />
            Back
          </Link>

          <button
            onClick={handleMarkAsComplete}
            className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
          >
            Mark as Complete
          </button>
        </div>
      </div>
    </div>
  );
}

// === ./src/app/dashboard/user/courses/[slug]/overview/page.tsx ===
import CourseOverview from "@/components/dashboard/course/user/CourseOverview";

interface CourseOverviewPageProps {
  params: {
    slug: string;
  };
}

export default function CourseOverviewPage({
  params,
}: {
  params: { slug: string };
}) {
  const { slug } = params;

  return <CourseOverview slug={slug} isAuthenticated={true} />;
}

// === ./src/app/dashboard/user/courses/[slug]/page.tsx ===
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import CourseDetailPage from "@/components/dashboard/course/user/CourseDetailPage";
import { courseApi } from "@/lib/courseApi";
import { notFound } from "next/navigation";

interface CourseDetailRouteProps {
  params: Promise<{
    slug: string;
  }>;
}

export default async function CourseDetailRoute({
  params,
}: CourseDetailRouteProps) {
  // Properly unwrap the params object
  const resolvedParams = await params;
  const { slug } = resolvedParams;

  // Get the user session
  const session = await getServerSession(authOptions);

  // Check if the course exists
  try {
    const courseResponse = await courseApi.getCourseBySlug(slug);

    if (!courseResponse) {
      return notFound();
    }

    // Pass the slug to the client component
    return <CourseDetailPage slug={slug} />;
  } catch (error) {
    console.error(`Error fetching course with slug "${slug}":`, error);
    return notFound();
  }
}

// === ./src/app/dashboard/user/courses/[slug]/payment/page.tsx ===
"use client";

import PaymentPage from "@/components/dashboard/course/user/PaymentPage";
import { useParams } from "next/navigation";
import { useState, useEffect } from "react";
import { courseApi } from "@/lib/courseApi";

export default function CoursePurchasePage() {
  const params = useParams();
  const slug = params.slug as string;
  const [courseId, setCourseId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchCourseId = async () => {
      try {
        setIsLoading(true);
        const response = await courseApi.getCourseBySlug(slug);
        if (response && response.id) {
          setCourseId(response.id.toString());
        } else {
          setError("Course not found");
        }
      } catch (err) {
        console.error("Error fetching course:", err);
        setError("Failed to load course details");
      } finally {
        setIsLoading(false);
      }
    };

    if (slug) {
      fetchCourseId();
    }
  }, [slug]);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error || !courseId) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 p-4 rounded-md">
          <p className="text-red-700">{error || "Course not found"}</p>
        </div>
      </div>
    );
  }

  return <PaymentPage courseId={courseId} courseSlug={slug} />;
}

// === ./src/app/dashboard/user/courses/class/[id]/page.tsx ===
import CourseClassPage from '@/components/dashboard/course/user/CourseClassPage';

export default function CourseClassRoute({ params }: { params: { slug: string, id: string } }) {
  return <CourseClassPage course
// === ./src/app/dashboard/user/courses/page.tsx ===
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import CoursesClient from "@/components/dashboard/course/user/CoursesClient";

export default async function CoursesPage() {
  // Get the user session
  const session = await getServerSession(authOptions);

  // // Debug - log the session information
  // console.log(
  //   "Courses page - session:",
  //   JSON.stringify(
  //     {
  //       authenticated: !!session,
  //       user: session?.user,
  //       role: session?.user?.role,
  //     },
  //     null,
  //     2
  //   )
  // );

  // Pass the authenticated state and user information to the client component
  return (
    <CoursesClient
      isAuthenticated={!!session}
      userJwt={session?.user?.jwt || null}
    />
  );
}

// === ./src/app/dashboard/user/layout.tsx ===
'use client';

import UserSidebar from '@/components/dashboard/UserSidebar';

interface DashboardLayoutProps {
  children: React.ReactNode;
}

const DashboardLayout: React.FC<DashboardLayoutProps> = ({ children }) => {
  return (
    <div className="flex h-screen">
      <UserSidebar />
      <main className="flex-1 overflow-y-auto bg-gray-50">
        <div className="px-6 py-6">
          {children}
        </div>
      </main>
    </div>
  );
};

export default DashboardLayout;
// === ./src/app/dashboard/user/page.tsx ===
import UserDashboard from '@/components/dashboard/UserDashboard';

export default function Page() {
  return <UserDashboard />;
}
// === ./src/app/donate/[category]/page.tsx ===
// app/donate/[category]/page.tsx

import { Metadata } from 'next';
import { DonationPage } from '@/components/donation/DonationComponents';
import { notFound } from 'next/navigation';

type DonationCategory = 'Broadcasting' | 'Solarization' | 'Greenhouse & Seedbank' | 'Off-Grid' | 'Custom';

interface DonationCategoryPageProps {
  params: {
    category: string;
  };
}

export function generateMetadata({ params }: DonationCategoryPageProps): Metadata {
  const validCategories = ['broadcasting', 'solarization', 'greenhouse-seedbank', 'off-grid', 'custom'];
  const category = params.category.toLowerCase();
  
  if (!validCategories.includes(category)) {
    return {
      title: 'Not Found - Sat Yoga',
    };
  }
  
  const categoryTitles: Record<string, string> = {
    'broadcasting': 'Broadcasting Donation',
    'solarization': 'Solarization Project',
    'greenhouse-seedbank': 'Greenhouse & Seedbank Initiative',
    'off-grid': 'Off-Grid Sustainability',
    'custom': 'Custom Donation',
  };
  
  return {
    title: `${categoryTitles[category]} - Sat Yoga`,
    description: `Support the Sat Yoga ${categoryTitles[category]} through your generous contribution.`,
  };
}

export default function DonationCategoryPage({ params }: DonationCategoryPageProps) {
  const slug = params.category.toLowerCase();
  
  // Map slug to category
  const categoryMapping: Record<string, DonationCategory> = {
    'broadcasting': 'Broadcasting',
    'solarization': 'Solarization',
    'greenhouse-seedbank': 'Greenhouse & Seedbank',
    'off-grid': 'Off-Grid',
    'custom': 'Custom',
  };
  
  const category = categoryMapping[slug];
  
  if (!category) {
    notFound();
  }
  
  return (
    <div className="container mx-auto px-4 py-12">
      <DonationPage initialCategory={category} />
    </div>
  );
}

// === ./src/app/donate/page.tsx ===
// app/donate/page.tsx
import { Metadata } from 'next';
import { FriendOfSatYogaPage } from '@/components/donation/DonationComponents';

export const metadata: Metadata = {
  title: 'Donate - Sat Yoga',
  description: 'Support the Sat Yoga mission and help actualize a new way of life through your generous contribution.',
};

export default function DonatePage() {
  return <FriendOfSatYogaPage />;
}
// === ./src/app/donate/payment/page.tsx ===
// app/donate/payment/page.tsx
import { Metadata } from 'next';
import { DonationPaymentWrapper } from '@/components/donation/DonationPaymentWrapper';

export const metadata: Metadata = {
  title: 'Complete Your Donation - Sat Yoga',
  description: 'Complete your donation to Sat Yoga and contribute to our mission.',
};

export default function DonationPaymentPage() {
  return <DonationPaymentWrapper />;
}

// === ./src/app/donate/success/page.tsx ===
// app/donate/success/page.tsx
import { Metadata } from 'next';
import DonationSuccessPageComponent from '@/components/donation/DonationSuccessPageComponent';

// Metadata for the page
export const metadata: Metadata = {
  title: 'Donation Successful - Sat Yoga',
  description: 'Thank you for your generous donation to Sat Yoga. Your contribution helps create a more spiritual and ecological culture.',
};

// Server component that renders the client component
export default function DonationSuccessPage() {
  return <DonationSuccessPageComponent />;
}
// === ./src/app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
/* Add to your global.css file */

.markdown-preview pre {
  background-color: #f3f4f6;
  padding: 1rem;
  border-radius: 0.375rem;
  overflow-x: auto;
  margin: 1.5em 0;
}

.markdown-preview code {
  background-color: #f3f4f6;
  padding: 0.2em 0.4em;
  border-radius: 0.25rem;
  font-size: 0.875em;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    "Liberation Mono", "Courier New", monospace;
}

.markdown-preview pre code {
  background-color: transparent;
  padding: 0;
  border-radius: 0;
}

/* Heading styles */
.markdown-preview h1 {
  font-size: 2em;
  font-weight: bold;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  padding-bottom: 0.3em;
  border-bottom: 1px solid #e5e7eb;
}

.markdown-preview h2 {
  font-size: 1.5em;
  font-weight: bold;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
  padding-bottom: 0.3em;
  border-bottom: 1px solid #e5e7eb;
}

.markdown-preview h3 {
  font-size: 1.25em;
  font-weight: bold;
  margin-top: 1.5em;
  margin-bottom: 0.5em;
}

/* List styles */
.markdown-preview ul,
.markdown-preview ol {
  padding-left: 2em;
  margin: 1em 0;
}

.markdown-preview ul {
  list-style-type: disc;
}

.markdown-preview ol {
  list-style-type: decimal;
}

.markdown-preview li {
  margin: 0.5em 0;
}

/* Link styles */
.markdown-preview a {
  color: #4f46e5;
  text-decoration: underline;
}

.markdown-preview a:hover {
  text-decoration: none;
}

/* Blockquote styles */
.markdown-preview blockquote {
  padding-left: 1em;
  border-left: 4px solid #e5e7eb;
  color: #6b7280;
  margin: 1em 0;
}

// === ./src/app/layout.tsx ===
// app/layout.tsx

import { Inter } from 'next/font/google';
import './globals.css';
import { Metadata } from 'next';
import LayoutWrapper from '@/components/layout/LayoutWrapper';
import AuthProvider from '@/components/auth/AuthProvider';

// Initialize the Inter font with subset optimization
const inter = Inter({ 
  subsets: ['latin'],
  display: 'swap',
  variable: '--font-inter',
});

// Metadata for all pages (SEO)
export const metadata: Metadata = {
  title: {
    default: 'Sat Yoga - Spiritual Growth and Self-Discovery',
    template: '%s | Sat Yoga'
  },
  description: 'Explore transformative teachings, retreats, and courses at Sat Yoga. Join our community dedicated to spiritual awakening and self-discovery.',
  keywords: ['meditation', 'yoga', 'spiritual growth', 'retreats', 'mindfulness'],
  openGraph: {
    title: 'Sat Yoga - Spiritual Growth and Self-Discovery',
    description: 'Explore transformative teachings, retreats, and courses at Sat Yoga. Join our community dedicated to spiritual awakening and self-discovery.',
    url: 'https://satyoga.com',
    siteName: 'Sat Yoga',
    locale: 'en_US',
    type: 'website',
  },
};

interface RootLayoutProps {
  children: React.ReactNode;
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en" className={inter.variable}>
      <body className="flex flex-col min-h-screen">
        <AuthProvider>
          <LayoutWrapper>{children}</LayoutWrapper>
        </AuthProvider>
      </body>
    </html>
  );
}
// === ./src/app/login/page.tsx ===
import { Metadata } from 'next';
import { Login } from '@/components/auth/AuthComponents';
import { redirect } from 'next/navigation';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

export const metadata: Metadata = {
  title: 'Login - Sat Yoga',
  description: 'Log in to your Sat Yoga account to access exclusive content, courses, and community resources.',
};

export default async function LoginPage({
  searchParams,
}: {
  searchParams?: { [key: string]: string | string[] | undefined };
}) {
  // Check if user is already authenticated
  const session = await getServerSession(authOptions);
  
  // If already logged in, redirect to dashboard
  if (session) {
    redirect('/dashboard');
  }
  
  // Pass any query parameters as props (like redirectTo or registered=true)
  const redirectTo = searchParams?.callbackUrl as string || '/dashboard';
  const registered = searchParams?.registered === 'true';
  
  return (
    <div className="min-h-screen flex flex-col justify-center py-12">
      <Login redirectTo={redirectTo} />
      
      {/* Display success message if user just registered */}
      {registered && (
        <div className="w-full max-w-md mx-auto mt-4 px-4">
          <div className="bg-green-50 border-l-4 border-green-500 p-4">
            <p className="text-green-700">
              Account created successfully. Please log in with your credentials.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
// === ./src/app/membership/checkout/page.tsx ===
import { Metadata } from 'next';
import MembershipCheckoutClient from '@/components/membership/MembershipCheckoutClient';

// Metadata for the page
export const metadata: Metadata = {
  title: 'Checkout - Sat Yoga Membership',
  description: 'Complete your membership registration and begin your spiritual journey with Sat Yoga.',
};

// Server component that renders the client component
export default function MembershipCheckoutPage() {
  return <MembershipCheckoutClient />;
}
// === ./src/app/membership/page.tsx ===
import { Metadata } from 'next';
import MembershipPageClient from '@/components/membership/MembershipPageClient';

// Metadata for the page (properly exported at the page level)
export const metadata: Metadata = {
  title: 'Membership - Sat Yoga',
  description: 'Join our spiritual community and unlock exclusive content, courses, and resources to support your spiritual journey.',
};

// Server component that renders the client component
export default function MembershipPage() {
  return <MembershipPageClient />;
}
// === ./src/app/membership/register/page.tsx ===
// app/membership/register/page.tsx
import { Metadata } from 'next';
import { redirect } from 'next/navigation';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';
import MembershipRegisterComponent from '@/components/membership/MembershipRegisterComponent';

// Metadata for the page
export const metadata: Metadata = {
  title: 'Register for Membership - Sat Yoga',
  description: 'Create your account and join our spiritual community at Sat Yoga.'
};

// Server component that checks session and renders the client component
export default async function RegisterPage({
  searchParams,
}: {
  searchParams: { [key: string]: string | string[] | undefined };
}) {
  // Check if user is already logged in
  const session = await getServerSession(authOptions);
  
  // If user is logged in, redirect to checkout page with same params
  if (session) {
    const planParam = searchParams.plan ? `plan=${searchParams.plan}` : '';
    const billingParam = searchParams.billing ? `billing=${searchParams.billing}` : '';
    const queryString = [planParam, billingParam].filter(Boolean).join('&');
    
    const redirectUrl = `/membership/checkout${queryString ? `?${queryString}` : ''}`;
    redirect(redirectUrl);
  }
  
  return <MembershipRegisterComponent />;
}
// === ./src/app/membership/success/page.tsx ===
import { Metadata } from 'next';
import MembershipSuccessPageComponent  from '@/components/membership/SuccessPage';

// Metadata for the page
export const metadata: Metadata = {
  title: 'Checkout - Sat Yoga Membership',
  description: 'Complete your membership registration and begin your spiritual journey with Sat Yoga.',
};

// Server component that renders the client component
export default function MembershipSuccessPage() {
  return <MembershipSuccessPageComponent />;
}
// === ./src/app/not-found/page.tsx ===
import Link from 'next/link';

export default function NotFound() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="bg-white p-8 rounded-lg shadow-md max-w-md w-full text-center">
        <h2 className="text-2xl font-bold mb-4">Teaching Not Found</h2>
        <p className="text-gray-600 mb-6">
          The teaching you're looking for doesn't exist or has been removed.
        </p>
        <Link 
          href="/teachings" 
          className="inline-block px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700 transition-colors"
        >
          Back to Teachings
        </Link>
      </div>
    </div>
  );
}
// === ./src/app/page.tsx ===
// app/page.tsx (using App Router in Next.js 13+)

import { homeApi } from '@/lib/strapi';
import HomePage from '@/components/homepage/HomePage';

// This is a server component that fetches data
export default async function Home() {
  try {
    console.log("Fetching homepage data from Strapi...");
    
    // Fetch the main homepage data from Strapi
    const homeData = await homeApi.getHomePageData();
    console.log("Homepage data fetched successfully");
    
    // Fetch the latest blog posts (limit to 5 for the homepage)
    console.log("Fetching blog posts...");
    const blogResponse: any = await homeApi.getFeaturedBlogPosts(5);
    console.log("Blog response structure:", JSON.stringify(blogResponse, null, 2).substring(0, 300) + "...");
    
    const blogPostsData = blogResponse?.data || [];
    console.log(`Fetched ${blogPostsData.length} blog posts`);
    
    // Transform blog posts from Strapi format to what BlogCard expects
    const transformedBlogPosts = blogPostsData.map((post: any) => {
      // Extract data from Strapi structure
      const postData = post.attributes || {};
      
      // Format the date
      const publishDate = postData.publishedAt 
        ? new Date(postData.publishedAt).toLocaleDateString('en-US', { 
            month: 'long', 
            day: 'numeric', 
            year: 'numeric' 
          })
        : 'No date';
      
      // Get category name
      const category = postData.category?.data?.attributes?.name || 'Uncategorized';
      
      // Extract author data
      const authorData = {
        name: postData.author?.data?.attributes?.name || 'Anonymous',
        imageUrl: postData.author?.data?.attributes?.avatar?.data?.attributes?.url || ''
      };
      
      // Get image URL
      const imageUrl = postData.featuredImage?.data?.attributes?.url || '';
      
      // Return transformed post data
      return {
        title: postData.title || 'Untitled',
        excerpt: postData.excerpt || 'No excerpt available.',
        category: category,
        author: authorData,
        date: publishDate,
        slug: postData.slug || `post-${post.id}`,
        imageUrl: imageUrl,
        readTime: postData.readTime || 5
      };
    });
    
    // Combine all data needed for the homepage
    const pageData = {
      ...homeData,
      blogPosts: transformedBlogPosts
    };
    
    // Log the transformed blog posts for verification
    console.log("Transformed blog posts:", JSON.stringify(transformedBlogPosts, null, 2));
    
    // Pass the data to your client component
    return <HomePage data={pageData} />;
  } catch (error) {
    console.error("Error loading homepage data:", error);
    
    // Return an error message
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <h1 className="text-2xl font-bold text-red-600 mb-4">Error Loading Homepage</h1>
        <p className="mb-4">We encountered a problem while loading the homepage content.</p>
        <p className="text-gray-600 mb-8">Please check the browser console for detailed error information.</p>
        <p className="bg-gray-100 p-4 rounded-md text-left mx-auto max-w-2xl overflow-auto">
          <code>{error instanceof Error ? error.message : String(error)}</code>
        </p>
      </div>
    );
  }
}
// === ./src/app/reports/page.tsx ===
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { PivotTable } from '@/components/reports/pivot-table'
import { Download } from 'lucide-react'
import * as XLSX from 'xlsx'
import { generateMockData } from '@/lib/mock-data'

interface Application {
  id: number
  attributes: {
    email: string
    firstName: string
    lastName: string
    programType: string
    programDate: string
    nationality: string
    status: string
    createdAt: string
    [key: string]: any
  }
}

export default function ReportsPage() {
  const [applications, setApplications] = useState<Application[]>([])
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // Using mock data instead of API call
    const mockData = generateMockData(100)
    setApplications(mockData)
    setIsLoading(false)
  }, [])

  const downloadExcel = () => {
    const ws = XLSX.utils.json_to_sheet(applications.map(app => ({
      'Application ID': app.id,
      Email: app.attributes.email,
      'First Name': app.attributes.firstName,
      'Last Name': app.attributes.lastName,
      Program: app.attributes.programType,
      'Program Date': new Date(app.attributes.programDate).toLocaleDateString(),
      Nationality: app.attributes.nationality,
      'Marital Status': app.attributes.maritalStatus,
      'Membership Status': app.attributes.membershipStatus,
      'Has Health Conditions': app.attributes.hasHealthConditions ? 'Yes' : 'No',
      'Has Dietary Restrictions': app.attributes.hasDietaryRestrictions ? 'Yes' : 'No',
      'Application Status': app.attributes.status,
      'Created At': new Date(app.attributes.createdAt).toLocaleDateString()
    })))

    const wb = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(wb, ws, 'Applications')
    XLSX.writeFile(wb, 'retreat-applications.xlsx')
  }

  if (isLoading) {
    return <div>Loading...</div>
  }

  return (
    <div className="container mx-auto py-8">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <div>
            <CardTitle>Retreat Applications Report</CardTitle>
            <p className="text-sm text-muted-foreground mt-2">
              Total Applications: {applications.length}
            </p>
          </div>
          <Button onClick={downloadExcel}>
            <Download className="mr-2 h-4 w-4" />
            Download Excel
          </Button>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4">
            <div className="grid gap-2">
              <h3 className="text-lg font-medium">Quick Stats</h3>
              <div className="grid grid-cols-4 gap-4">
                {['shakti', 'sevadhari', 'darshan'].map(program => (
                  <Card key={program}>
                    <CardContent className="p-4">
                      <p className="text-sm font-medium capitalize">{program}</p>
                      <p className="text-2xl font-bold">
                        {applications.filter(app => app.attributes.programType === program).length}
                      </p>
                    </CardContent>
                  </Card>
                ))}
                <Card>
                  <CardContent className="p-4">
                    <p className="text-sm font-medium">Acceptance Rate</p>
                    <p className="text-2xl font-bold">
                      {Math.round((applications.filter(app => app.attributes.status === 'accepted').length / applications.length) * 100)}%
                    </p>
                  </CardContent>
                </Card>
              </div>
            </div>
            <PivotTable data={applications} />
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
// === ./src/app/retreats/faq/page.tsx ===
import { FAQPage } from "@/components/faq/FAQ";

// FAQ Page Component for Next.js App Router
export default function FAQPageWrapper() {
    return <FAQPage />;
  }
// === ./src/app/signup/page.tsx ===
import { Metadata } from 'next';
import { Signup } from '@/components/auth/AuthComponents';
import { redirect } from 'next/navigation';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

export const metadata: Metadata = {
  title: 'Sign Up - Sat Yoga',
  description: 'Create an account to access exclusive content, courses, and community resources at Sat Yoga.',
};

export default async function SignupPage() {
  // Check if user is already authenticated
  const session = await getServerSession(authOptions);
  
  // If already logged in, redirect to dashboard
  if (session) {
    redirect('/dashboard');
  }
  
  return (
    <div className="min-h-screen flex flex-col justify-center py-12">
      <Signup />
    </div>
  );
}
// === ./src/app/teachings/[id]/page.tsx ===
// app/(main)/teachings/[id]/page.tsx
import { Metadata } from 'next';
import { notFound } from 'next/navigation';

import TeachingDetail from '@/components/teachings/TeachingDetail';
import { teachings } from '@/lib/json_dump';           // ← local data

/* ---------------------------------------------------
 *  Dynamic metadata
 * --------------------------------------------------*/
export async function generateMetadata(
  { params }: { params: { id: string } }
): Promise<Metadata> {
  const post = teachings.find(t => t.slug === params.id);
  return {
    title: post ? `${post.title} | Sat Yoga` : 'Teaching – Sat Yoga',
    description:
      post?.summary ||
      post?.description ||
      'Explore wisdom teachings from Shunyamurti and the Sat Yoga Institute.',
  };
}

/* ---------------------------------------------------
 *  The page itself
 * --------------------------------------------------*/
export default function TeachingDetailPage(
  { params }: { params: { id: string } }
) {
  // use slug (“id” in the route) to find the record
  const teaching = teachings.find(t => t.slug === params.id);

  if (!teaching) {
    /* will render the built-in /404 page */
    notFound();
  }

  /* pass the full object to the client component */
  return <TeachingDetail teaching={teaching} />;
}

// === ./src/app/teachings/page.tsx ===
// app/(main)/teachings/page.tsx
import { Metadata } from 'next';
import TeachingLibraryPage from '@/components/teachings/Teachings';

export const metadata: Metadata = {
  title: 'Teachings Library - Sat Yoga',
  description: 'Explore our collection of teachings, guided meditations, and wisdom from Shunyamurti to support your spiritual journey.',
};

export default function TeachingsPage() {
  // In a real implementation, you would fetch data from your API here
  return <TeachingLibraryPage />;
}
// === ./src/app/thank-you/page.tsx ===
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function ThankYouPage() {
  const searchParams = useSearchParams();
  const [isSuccess, setIsSuccess] = useState(true);
  const [donationData, setDonationData] = useState<any>(null);
  
  useEffect(() => {
    // Check Tilopay response
    const code = searchParams.get('code');
    const description = searchParams.get('description');
    const returnData = searchParams.get('returnData');
    
    // Parse transaction status
    if (code !== null) {
      setIsSuccess(code === '1'); // code=1 means success
    }
    
    // Try to parse the return data if it exists
    if (returnData) {
      try {
        const decodedData = atob(returnData);
        setDonationData(JSON.parse(decodedData));
      } catch (error) {
        console.error('Error parsing return data:', error);
      }
    }
  }, [searchParams]);

  if (!isSuccess) {
    return (
      <div className="container mx-auto px-4 py-20 text-center">
        <svg className="w-16 h-16 text-red-500 mx-auto mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <h1 className="text-4xl font-bold mb-4">Payment Unsuccessful</h1>
        <p className="text-xl mb-8 max-w-2xl mx-auto">
          We encountered an issue processing your donation. Your payment was not completed.
        </p>
        <p className="text-lg mb-12 max-w-2xl mx-auto">
          Please try again or contact us at support@satyoga.org if you continue to experience issues.
        </p>
        <Link href="/donate" className="inline-block bg-gray-900 text-white rounded-md px-6 py-3 font-medium hover:bg-gray-800">
          Try Again
        </Link>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-20 text-center">
      <svg className="w-16 h-16 text-green-500 mx-auto mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
      </svg>
      <h1 className="text-4xl font-bold mb-4">Thank You for Your Donation!</h1>
      
      {donationData && donationData.donationCategory && (
        <div className="mb-6">
          <span className="inline-block bg-gray-100 text-gray-800 px-4 py-2 rounded-full text-sm font-medium">
            {donationData.donationCategory} Project
          </span>
        </div>
      )}
      
      <p className="text-xl mb-4 max-w-2xl mx-auto">
        Your generous contribution of {donationData?.donationAmount ? `$${donationData.donationAmount}` : 'your donation'} will help support our mission to create a more spiritual and ecological culture and foster human and planetary rebirth.
      </p>
      
      <p className="text-lg mb-12 max-w-2xl mx-auto">
        A confirmation email has been sent with details of your donation. If you have any questions, please contact us at support@satyoga.org.
      </p>
      
      <div className="flex flex-col sm:flex-row justify-center gap-4">
        <Link href="/" className="inline-block bg-white border border-gray-300 text-gray-700 rounded-md px-6 py-3 font-medium hover:bg-gray-50">
          Return to Home
        </Link>
      </div>
    </div>
  );
}
// === ./src/components/auth/AuthComponents.tsx ===
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { signIn, signOut, useSession } from "next-auth/react";
import { useRouter } from 'next/navigation';

// Common Form Input Component
interface FormInputProps {
  id: string;
  label: string;
  type: string;
  placeholder?: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  required?: boolean;
  autoComplete?: string;
}

const FormInput: React.FC<FormInputProps> = ({
  id,
  label,
  type,
  placeholder,
  value,
  onChange,
  required = true,
  autoComplete,
}) => {
  return (
    <div className="mb-4">
      <label htmlFor={id} className="block text-gray-700 mb-2">
        {label}
      </label>
      <input
        id={id}
        type={type}
        placeholder={placeholder}
        value={value}
        onChange={onChange}
        className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
        required={required}
        autoComplete={autoComplete}
      />
    </div>
  );
};

// Social Auth Button
interface SocialAuthButtonProps {
  provider: 'google' | 'facebook' | 'apple';
  onClick: () => void;
}

const SocialAuthButton: React.FC<SocialAuthButtonProps> = ({ provider, onClick }) => {
  const getProviderDetails = () => {
    switch (provider) {
      case 'google':
        return {
          icon: (
            <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972a6.033 6.033 0 110-12.064 5.963 5.963 0 014.23 1.74l2.694-2.689A9.99 9.99 0 0012.545 2.001a10.089 10.089 0 00-9.286 6.255 10.034 10.034 0 003.7 12.66 10.003 10.003 0 005.586 1.694c7.058 0 11.668-5.736 10.924-12.01l-10.924-.36z"
              />
            </svg>
          ),
          text: 'Sign in with Google',
        };
      case 'facebook':
        return {
          icon: (
            <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M20.007 3H3.993A.993.993 0 003 3.993v16.014c0 .549.444.993.993.993h8.628v-6.961h-2.343v-2.813h2.343V9.312c0-2.325 1.42-3.591 3.494-3.591.993 0 1.847.073 2.096.106v2.43h-1.44c-1.125 0-1.345.532-1.345 1.315v1.723h2.689l-.35 2.813h-2.339V21h4.573a.993.993 0 00.993-.993V3.993A.993.993 0 0020.007 3z"
              />
            </svg>
          ),
          text: 'Sign in with Facebook',
        };
      case 'apple':
        return {
          icon: (
            <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M17.05 20.28c-.98.95-2.05.88-3.08.45-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.47C2.79 15.22 3.51 7.89 8.42 7.56c1.57.05 2.62 1.06 3.54 1.1 1.35-.18 2.63-1.16 4.11-1.22.7.01 2.65.27 3.91 2.08-3.34 2.13-2.79 6.17.55 7.83-2.25 3.96-4.51 4.13-3.86 2.44.41-1.08 1.67-1.72 1.67-1.72-1.5-.92-1.82-3.32-1.29-4.79zM12.03 7.28c-.19-2.15 1.76-4 4.1-4.16.25 2.41-2.16 4.2-4.1 4.16z"
              />
            </svg>
          ),
          text: 'Sign in with Apple',
        };
    }
  };

  const { icon, text } = getProviderDetails();

  return (
    <button
      type="button"
      onClick={onClick}
      className="w-full border border-gray-300 rounded-md px-4 py-3 flex items-center justify-center text-gray-700 font-medium mt-3 hover:bg-gray-50 transition-colors"
    >
      {icon}
      {text}
    </button>
  );
};

// Login Component
interface LoginProps {
  onSuccess?: () => void;
  redirectTo?: string;
}

export const Login: React.FC<LoginProps> = ({ onSuccess, redirectTo = '/dashboard' }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');
    
    try {
      const result = await signIn('credentials', {
        redirect: false,
        email,
        password,
        callbackUrl: redirectTo,
      });
      
      if (result?.error) {
        setError('Invalid email or password. Please try again.');
      } else if (result?.url) {
        if (onSuccess) {
          onSuccess();
        } else {
          router.push(result.url);
        }
      }
    } catch (err) {
      setError('An unexpected error occurred. Please try again.');
      console.error('Login error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialLogin = async (provider: 'google' | 'facebook' | 'apple') => {
    try {
      await signIn(provider, { callbackUrl: redirectTo });
    } catch (err) {
      console.error(`${provider} login error:`, err);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto px-4">
      <div className="text-center mb-8">
        <Link href="/" className="inline-block">
          <span className="text-2xl font-serif italic">Logo</span>
        </Link>
        <h1 className="text-3xl font-bold mt-8 mb-2">Log In</h1>
        <p className="text-gray-600">Enter your credentials to access your account</p>
      </div>

      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
          <p className="text-red-700">{error}</p>
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <FormInput
          id="email"
          label="Email"
          type="email"
          placeholder="Enter your email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          autoComplete="email"
        />

        <FormInput
          id="password"
          label="Password"
          type="password"
          placeholder="••••••••"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          autoComplete="current-password"
        />

        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center">
            <input
              id="remember-me"
              type="checkbox"
              className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
              checked={rememberMe}
              onChange={(e) => setRememberMe(e.target.checked)}
            />
            <label htmlFor="remember-me" className="ml-2 block text-sm text-gray-700">
              Remember
            </label>
          </div>
          <div className="text-sm">
            <Link href="/forgot-password" className="text-purple-600 hover:text-purple-500">
              Forgot password
            </Link>
          </div>
        </div>

        <button
          type="submit"
          className={`w-full bg-gray-900 text-white rounded-md py-3 font-medium hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 ${
            isLoading ? 'opacity-75 cursor-not-allowed' : ''
          }`}
          disabled={isLoading}
        >
          {isLoading ? 'Logging in...' : 'Login'}
        </button>
      </form>

      <div className="mt-6">
        <div className="relative">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-gray-300"></div>
          </div>
          <div className="relative flex justify-center text-sm">
            <span className="px-2 bg-white text-gray-500">Or continue with</span>
          </div>
        </div>

        <div className="mt-6 space-y-3">
          <SocialAuthButton provider="google" onClick={() => handleSocialLogin('google')} />
          <SocialAuthButton provider="facebook" onClick={() => handleSocialLogin('facebook')} />
          <SocialAuthButton provider="apple" onClick={() => handleSocialLogin('apple')} />
        </div>
      </div>

      <p className="mt-8 text-center text-gray-600">
        Don't have an account?{' '}
        <Link href="/signup" className="text-purple-600 font-medium hover:text-purple-500">
          Sign up
        </Link>
      </p>

      <p className="mt-8 text-center text-sm text-gray-500">
        © Satyoga {new Date().getFullYear()}
      </p>
    </div>
  );
};

// Signup Component
interface SignupProps {
  onSuccess?: () => void;
  redirectTo?: string;
}

export const Signup: React.FC<SignupProps> = ({ onSuccess, redirectTo = '/login' }) => {
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Basic validation
    if (password !== confirmPassword) {
      setError('Passwords do not match');
      return;
    }
    
    setIsLoading(true);
    setError('');
    
    try {
      // Register with Strapi
      const response = await fetch(`${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/auth/local/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
          email,
          password,
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error?.message || 'Failed to register');
      }
      
      // Handle successful registration
      if (onSuccess) {
        onSuccess();
      } else {
        // Redirect to login page with success message
        router.push(`${redirectTo}?registered=true`);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to create account');
      console.error('Registration error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialSignup = async (provider: 'google' | 'facebook' | 'apple') => {
    try {
      await signIn(provider, { callbackUrl: redirectTo });
    } catch (err) {
      console.error(`${provider} signup error:`, err);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto px-4">
      <div className="text-center mb-8">
        <Link href="/" className="inline-block">
          <span className="text-2xl font-serif italic">Logo</span>
        </Link>
        <h1 className="text-3xl font-bold mt-8 mb-2">Sign Up</h1>
        <p className="text-gray-600">Create a new account to access Sat Yoga resources</p>
      </div>

      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
          <p className="text-red-700">{error}</p>
        </div>
      )}

      <form onSubmit={handleSubmit}>
        <FormInput
          id="email"
          label="Email"
          type="email"
          placeholder="Enter your email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          autoComplete="email"
        />
        
        <FormInput
          id="username"
          label="Username"
          type="text"
          placeholder="Choose a username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          autoComplete="username"
        />

        <FormInput
          id="password"
          label="Password"
          type="password"
          placeholder="••••••••"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          autoComplete="new-password"
        />
        
        <FormInput
          id="confirm-password"
          label="Confirm Password"
          type="password"
          placeholder="••••••••"
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
          autoComplete="new-password"
        />

        <div className="flex items-center my-4">
          <input
            id="terms"
            type="checkbox"
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
            required
          />
          <label htmlFor="terms" className="ml-2 block text-sm text-gray-700">
            I agree to the <Link href="/terms" className="text-purple-600 hover:underline">Terms of Service</Link> and <Link href="/privacy" className="text-purple-600 hover:underline">Privacy Policy</Link>
          </label>
        </div>

        <button
          type="submit"
          className={`w-full bg-gray-900 text-white rounded-md py-3 font-medium hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 ${
            isLoading ? 'opacity-75 cursor-not-allowed' : ''
          }`}
          disabled={isLoading}
        >
          {isLoading ? 'Creating account...' : 'Sign up'}
        </button>
      </form>

      <div className="mt-6">
        <div className="relative">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-gray-300"></div>
          </div>
          <div className="relative flex justify-center text-sm">
            <span className="px-2 bg-white text-gray-500">Or continue with</span>
          </div>
        </div>

        <div className="mt-6 space-y-3">
          <SocialAuthButton provider="google" onClick={() => handleSocialSignup('google')} />
          <SocialAuthButton provider="facebook" onClick={() => handleSocialSignup('facebook')} />
          <SocialAuthButton provider="apple" onClick={() => handleSocialSignup('apple')} />
        </div>
      </div>

      <p className="mt-8 text-center text-gray-600">
        Already have an account?{' '}
        <Link href="/login" className="text-purple-600 font-medium hover:text-purple-500">
          Login
        </Link>
      </p>

      <p className="mt-8 text-center text-sm text-gray-500">
        © Satyoga {new Date().getFullYear()}
      </p>
    </div>
  );
};

// Export Login and Signup pages for direct usage in app/
export const LoginPage: React.FC = () => (
  <div className="min-h-screen flex flex-col justify-center py-12">
    <Login />
  </div>
);

export const SignupPage: React.FC = () => (
  <div className="min-h-screen flex flex-col justify-center py-12">
    <Signup />
  </div>
);
// === ./src/components/auth/AuthProvider.tsx ===
'use client';

import { SessionProvider } from "next-auth/react";
import type { Session } from "next-auth";

type AuthProviderProps = {
  children: React.ReactNode;
  session?: Session | null;
};

/**
 * Auth provider wrapper for the application
 * This component provides the NextAuth session to all child components
 */
export default function AuthProvider({
  children,
  session,
}: AuthProviderProps) {
  return (
    <SessionProvider session={session}>
      {children}
    </SessionProvider>
  );
}
// === ./src/components/blog/Blog.tsx ===
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import MarkdownRenderer from './MarkdownRenderer';

// Types
export interface Author {
  id: string;
  name: string;
  imageUrl?: string;
}

export interface BlogPost {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  content: string;
  featuredImage?: string;
  category: string;
  author: Author;
  publishedAt: string;
  readTime: number;
  isFeatured?: boolean;
}

export type BlogCategory = 'All' | 'Featured articles' | 'Ashram Life' | 'Arts & Culture' | 'Recipes' | 'Essays';

// Featured Blog Component
interface FeaturedBlogProps {
  post: BlogPost;
}

export const FeaturedBlog: React.FC<FeaturedBlogProps> = ({ post }) => {
  if (!post) return null;
  
  return (
    <div className="grid md:grid-cols-2 gap-6 overflow-hidden rounded-lg border border-gray-200 mb-12">
      <div className="relative bg-gray-200 min-h-[300px] md:min-h-full">
        <span className="absolute top-3 left-3 text-xs font-medium py-1 px-2 bg-white rounded z-10">
          Featured blog
        </span>
        
        {post.featuredImage ? (
          <Image
            src={post.featuredImage}
            alt={post.title}
            fill
            className="object-cover"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center">
            <svg 
              className="h-24 w-24 text-gray-400" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={1} 
                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" 
              />
            </svg>
          </div>
        )}
      </div>
      
      <div className="p-6 flex flex-col justify-between">
        <div>
          <div className="text-sm text-gray-500 mb-3">
            {post.readTime} min read
          </div>
          
          <h2 className="text-2xl md:text-3xl font-bold mb-3">
            <Link href={`/blog/${post.slug}`} className="hover:text-purple-700">
              {post.title}
            </Link>
          </h2>
          
          <p className="text-gray-700 mb-6">
            {post.excerpt}
          </p>
        </div>
        
        <Link 
          href={`/blog/${post.slug}`}
          className="inline-block bg-gray-900 text-white rounded-md px-4 py-2 text-sm font-medium hover:bg-gray-800 w-fit"
        >
          Read more
        </Link>
      </div>
    </div>
  );
};

// Blog Card Component
interface BlogCardProps {
  post: BlogPost;
}

export const BlogCard: React.FC<BlogCardProps> = ({ post }) => {
  return (
    <div className="rounded-lg overflow-hidden bg-white border border-gray-200 h-full flex flex-col">
      <div className="relative bg-gray-200 aspect-video">
        <button 
          className="absolute top-3 right-3 w-8 h-8 rounded-full bg-white shadow flex items-center justify-center text-gray-500 hover:text-gray-900 z-10"
          aria-label="Bookmark article"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
          </svg>
        </button>
        
        {post.featuredImage ? (
          <Image
            src={post.featuredImage}
            alt={post.title}
            fill
            className="object-cover"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center">
            <svg 
              className="h-16 w-16 text-gray-400" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={1} 
                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" 
              />
            </svg>
          </div>
        )}
      </div>
      
      <div className="p-4 flex-grow">
        <div className="text-sm font-medium text-gray-600 mb-2">
          {post.category}
        </div>
        
        <h3 className="text-lg font-bold mb-2 line-clamp-2">
          <Link href={`/blog/${post.slug}`} className="hover:text-purple-700">
            {post.title}
          </Link>
        </h3>
        
        <p className="text-gray-600 mb-4 line-clamp-2">
          {post.excerpt}
        </p>
      </div>
      
      <div className="p-4 border-t border-gray-100">
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-full bg-gray-200 mr-3 flex-shrink-0">
            {post.author.imageUrl ? (
              <Image
                src={post.author.imageUrl}
                alt={post.author.name}
                width={32}
                height={32}
                className="rounded-full"
              />
            ) : (
              <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
                <span className="text-sm font-medium text-gray-600">
                  {post.author.name.charAt(0)}
                </span>
              </div>
            )}
          </div>
          <div>
            <p className="text-sm font-medium">{post.author.name}</p>
            <div className="flex items-center text-xs text-gray-500">
              <span>{new Date(post.publishedAt).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</span>
              <span className="mx-1">•</span>
              <span>{post.readTime} min read</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Blog Category Filter
interface BlogCategoryFilterProps {
  categories: Array<BlogCategory>;
  activeCategory: BlogCategory;
  onCategoryChange: (category: BlogCategory) => void;
}

export const BlogCategoryFilter: React.FC<BlogCategoryFilterProps> = ({
  categories,
  activeCategory,
  onCategoryChange,
}) => {
  return (
    <div className="border-b border-gray-200 mb-8 overflow-x-auto">
      <div className="flex min-w-max">
        {categories.map((category) => (
          <button
            key={category}
            onClick={() => onCategoryChange(category)}
            className={`py-3 px-4 text-sm font-medium whitespace-nowrap ${
              activeCategory === category
                ? 'text-gray-900 border-b-2 border-purple-600'
                : 'text-gray-600 hover:text-gray-900 hover:border-b-2 hover:border-gray-300'
            }`}
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  );
};

// Blog Pagination
interface BlogPaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
}

export const BlogPagination: React.FC<BlogPaginationProps> = ({
  currentPage,
  totalPages,
  onPageChange,
}) => {
  const displayPages = 5; // Number of page buttons to display
  
  // Calculate start and end page for the pagination display
  let startPage = Math.max(1, currentPage - Math.floor(displayPages / 2));
  let endPage = Math.min(totalPages, startPage + displayPages - 1);
  
  // Adjust startPage if endPage limit is reached
  if (endPage - startPage + 1 < displayPages && startPage > 1) {
    startPage = Math.max(1, endPage - displayPages + 1);
  }
  
  const pages = Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);
  
  return (
    <div className="flex items-center justify-between py-8">
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className={`flex items-center text-sm font-medium ${
          currentPage === 1
            ? 'text-gray-400 cursor-not-allowed'
            : 'text-gray-700 hover:text-purple-700'
        }`}
      >
        <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
        </svg>
        Previous
      </button>
      
      <div className="flex space-x-1">
        {pages.map((page) => (
          <button
            key={page}
            onClick={() => onPageChange(page)}
            className={`w-8 h-8 flex items-center justify-center text-sm rounded-md ${
              currentPage === page
                ? 'bg-gray-900 text-white'
                : 'text-gray-700 hover:bg-gray-100'
            }`}
          >
            {page}
          </button>
        ))}
        
        {endPage < totalPages && (
          <>
            {endPage < totalPages - 1 && (
              <span className="w-8 h-8 flex items-center justify-center text-sm text-gray-500">...</span>
            )}
            <button
              onClick={() => onPageChange(totalPages)}
              className="w-8 h-8 flex items-center justify-center text-sm rounded-md text-gray-700 hover:bg-gray-100"
            >
              {totalPages}
            </button>
          </>
        )}
      </div>
      
      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className={`flex items-center text-sm font-medium ${
          currentPage === totalPages
            ? 'text-gray-400 cursor-not-allowed'
            : 'text-gray-700 hover:text-purple-700'
        }`}
      >
        Next
        <svg className="w-4 h-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  );
};

// Blog Filter and Sort Controls
interface BlogControlsProps {
  totalItems: number;
  onSortChange: (sort: string) => void;
  onFilterClick: () => void;
}

export const BlogControls: React.FC<BlogControlsProps> = ({
  totalItems,
  onSortChange,
  onFilterClick,
}) => {
  return (
    <div className="flex justify-between items-center mb-6">
      <div className="text-sm text-gray-600">
        <span className="font-medium">{totalItems}</span> items
      </div>
      
      <div className="flex items-center space-x-4">
        <div className="flex items-center text-sm">
          <span className="mr-2">Sort by</span>
          <select 
            onChange={(e) => onSortChange(e.target.value)}
            className="py-1 px-2 border border-gray-300 rounded-md bg-white text-gray-700 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          >
            <option value="newest">Newest</option>
            <option value="oldest">Oldest</option>
            <option value="popular">Most Popular</option>
          </select>
        </div>
        
        <button
          onClick={onFilterClick}
          className="flex items-center py-1 px-3 text-sm border border-gray-300 rounded-md hover:bg-gray-50"
        >
          <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
          </svg>
          Filters
        </button>
      </div>
    </div>
  );
};

// Main Blog Page Component
interface BlogPageProps {
  initialPosts?: BlogPost[];
  initialCategory?: BlogCategory;
}

export const BlogPage: React.FC<BlogPageProps> = ({
  initialPosts = [],
  initialCategory = 'All',
}) => {
  const [posts, setPosts] = useState<BlogPost[]>(initialPosts);
  const [filteredPosts, setFilteredPosts] = useState<BlogPost[]>(initialPosts);
  const [activeCategory, setActiveCategory] = useState<BlogCategory>(initialCategory);
  const [currentPage, setCurrentPage] = useState(1);
  const [sortBy, setSortBy] = useState('newest');
  const postsPerPage = 6;
  
  // Available categories - could be dynamic based on your data
  const categories: BlogCategory[] = ['All', 'Featured articles', 'Ashram Life', 'Arts & Culture', 'Recipes', 'Essays'];
  //TODO: set these categories in strapi and fetch them dynamically from there while giving the category all by default to all blog posts
  // Featured post is the first featured post or the first post
  const featuredPost = posts.find(post => post.isFeatured) || posts[0];
  
  // Filter posts based on active category
  const filterPosts = (category: BlogCategory, allPosts: BlogPost[]) => {
    if (category === 'All') {
      return allPosts;
    } else if (category === 'Featured articles') {
      return allPosts.filter((post) => post.isFeatured);
    } else {
      return allPosts.filter((post) => post.category === category);
    }
  };
  
  // Sort posts based on the selected sort option
  const sortPosts = (postsToSort: BlogPost[], sortOption: string) => {
    const sortedPosts = [...postsToSort];
    
    switch (sortOption) {
      case 'newest':
        return sortedPosts.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());
      case 'oldest':
        return sortedPosts.sort((a, b) => new Date(a.publishedAt).getTime() - new Date(b.publishedAt).getTime());
      case 'popular':
        // This would ideally be based on view count or some popularity metric
        // For this example, we'll just use read time as a proxy for popularity
        return sortedPosts.sort((a, b) => b.readTime - a.readTime);
      default:
        return sortedPosts;
    }
  };
  
  // Apply filtering and sorting
  useEffect(() => {
    let result = filterPosts(activeCategory, posts);
    result = sortPosts(result, sortBy);
    setFilteredPosts(result);
    setCurrentPage(1); // Reset to first page when filters change
  }, [activeCategory, posts, sortBy]);
  
  // Get current posts for pagination
  const indexOfLastPost = currentPage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const currentPosts = filteredPosts.slice(indexOfFirstPost, indexOfLastPost);
  const totalPages = Math.ceil(filteredPosts.length / postsPerPage);
  
  // Change page
  const handlePageChange = (pageNumber: number) => {
    setCurrentPage(pageNumber);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  
  // Change category
  const handleCategoryChange = (category: BlogCategory) => {
    setActiveCategory(category);
  };
  
  // Change sort
  const handleSortChange = (sort: string) => {
    setSortBy(sort);
  };
  
  // Handle filter button click
  const handleFilterClick = () => {
    // This would typically open a filter modal or dropdown
    console.log('Filter button clicked');
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="text-center mb-12">
        <div className="text-purple-600 text-sm font-medium mb-2">Blog</div>
        <h1 className="text-3xl md:text-4xl font-bold mb-4">Sat Yoga Blog</h1>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique.
        </p>
      </div>
      
      {/* Featured Blog Post */}
      {featuredPost && <FeaturedBlog post={featuredPost} />}
      
      {/* Category Filter */}
      <BlogCategoryFilter
        categories={categories}
        activeCategory={activeCategory}
        onCategoryChange={handleCategoryChange}
      />
      
      {/* Blog Controls */}
      <BlogControls
        totalItems={filteredPosts.length}
        onSortChange={handleSortChange}
        onFilterClick={handleFilterClick}
      />
      
      {/* Blog Posts Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {currentPosts.map((post) => (
          <BlogCard key={post.id} post={post} />
        ))}
      </div>
      
      {/* Pagination */}
      {totalPages > 1 && (
        <BlogPagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange}
        />
      )}
    </div>
  );
};

// Blog Post Page Component
interface BlogPostPageProps {
  post: BlogPost;
  relatedPosts?: BlogPost[];
}

export const BlogPostPage: React.FC<BlogPostPageProps> = ({
  post,
  relatedPosts = [],
}) => {
  if (!post) return null;
  
  return (
    <div className="container mx-auto px-4 py-8">
      <Link href="/blog" className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-8">
        <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Blog
      </Link>
      
      <div className="max-w-3xl mx-auto">
        <div className="mb-6">
          <h1 className="text-3xl md:text-4xl font-bold mb-4">{post.title}</h1>
          
          <div className="flex items-center mb-6">
            <div className="w-10 h-10 rounded-full bg-gray-200 mr-3">
              {post.author.imageUrl ? (
                <Image
                  src={post.author.imageUrl}
                  alt={post.author.name}
                  width={40}
                  height={40}
                  className="rounded-full"
                />
              ) : (
                <div className="w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center">
                  <span className="text-sm font-medium text-gray-600">
                    {post.author.name.charAt(0)}
                  </span>
                </div>
              )}
            </div>
            <div>
              <p className="font-medium">{post.author.name}</p>
              <div className="flex items-center text-sm text-gray-500">
                <span>{new Date(post.publishedAt).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</span>
                <span className="mx-1">•</span>
                <span>{post.readTime} min read</span>
              </div>
            </div>
          </div>
        </div>
        
        {post.featuredImage && (
          <div className="relative aspect-video mb-8 rounded-lg overflow-hidden">
            <Image
              src={post.featuredImage}
              alt={post.title}
              fill
              className="object-cover"
              priority
            />
          </div>
        )}
        
        <div className="prose prose-lg max-w-none mb-12">
          <MarkdownRenderer content={post.content} />
        </div>
        
        <div className="border-t border-gray-200 pt-8 mb-12">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <div className="text-sm font-medium mr-2">Tags:</div>
              <div className="flex items-center space-x-2">
                <Link href={`/blog/category/${post.category.toLowerCase().replace(' ', '-')}`} className="text-sm bg-gray-100 text-gray-700 py-1 px-3 rounded-full hover:bg-gray-200">
                  {post.category}
                </Link>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <button className="text-gray-500 hover:text-gray-700">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                </svg>
              </button>
              <button className="text-gray-500 hover:text-gray-700">
                <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                </svg>
              </button>
            </div>
          </div>
        </div>
        
        {relatedPosts.length > 0 && (
          <div className="mb-12">
            <h2 className="text-2xl font-bold mb-6">Related Articles</h2>
            <div className="grid sm:grid-cols-2 gap-6">
              {relatedPosts.map((relatedPost) => (
                <BlogCard key={relatedPost.id} post={relatedPost} />
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Export all the components
//export { FeaturedBlog, BlogCard, BlogCategoryFilter, BlogPagination, BlogControls, BlogPage, BlogPostPage };
// === ./src/components/blog/MarkdownRenderer.tsx ===
'use client';

import React from 'react';
import ReactMarkdown from 'react-markdown';
import rehypeRaw from 'rehype-raw';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';

interface MarkdownRendererProps {
  content: string;
  className?: string;
}

const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ content, className }) => {
  return (
    <div className={`markdown-content ${className || ''}`}>
      <ReactMarkdown
        rehypePlugins={[rehypeRaw]}
        remarkPlugins={[remarkGfm]}
        components={{
          h1: ({ node, ...props }) => <h1 className="text-3xl font-bold my-4" {...props} />,
          h2: ({ node, ...props }) => <h2 className="text-2xl font-bold my-4" {...props} />,
          h3: ({ node, ...props }) => <h3 className="text-xl font-bold my-3" {...props} />,
          h4: ({ node, ...props }) => <h4 className="text-lg font-bold my-3" {...props} />,
          p: ({ node, ...props }) => <p className="my-4" {...props} />,
          a: ({ node, ...props }) => <a className="text-purple-600 hover:text-purple-800 underline" {...props} />,
          ul: ({ node, ...props }) => <ul className="list-disc pl-5 my-4" {...props} />,
          ol: ({ node, ...props }) => <ol className="list-decimal pl-5 my-4" {...props} />,
          li: ({ node, ...props }) => <li className="mb-1" {...props} />,
          blockquote: ({ node, ...props }) => (
            <blockquote className="border-l-4 border-purple-500 pl-4 italic my-4 text-gray-700" {...props} />
          ),
          img: ({ node, alt, src, ...props }) => (
            <img 
              src={src} 
              alt={alt} 
              className="my-4 max-w-full rounded-lg" 
              {...props} 
            />
          ),
          code: ({ node, inline, className, children, ...props }) => {
            const match = /language-(\w+)/.exec(className || '');
            return !inline && match ? (
              <SyntaxHighlighter
                style={atomDark}
                language={match[1]}
                PreTag="div"
                className="rounded-md my-4"
                {...props}
              >
                {String(children).replace(/\n$/, '')}
              </SyntaxHighlighter>
            ) : (
              <code className="bg-gray-100 px-1 rounded text-sm" {...props}>
                {children}
              </code>
            );
          },
          table: ({ node, ...props }) => (
            <div className="overflow-x-auto my-4">
              <table className="min-w-full divide-y divide-gray-200" {...props} />
            </div>
          ),
          thead: ({ node, ...props }) => <thead className="bg-gray-50" {...props} />,
          tr: ({ node, ...props }) => <tr className="border-b border-gray-200" {...props} />,
          th: ({ node, ...props }) => <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" {...props} />,
          td: ({ node, ...props }) => <td className="px-6 py-4 whitespace-nowrap" {...props} />,
          hr: ({ node, ...props }) => <hr className="my-8 border-t border-gray-300" {...props} />,
        }}
      >
        {content}
      </ReactMarkdown>
    </div>
  );
};

export default MarkdownRenderer;
// === ./src/components/calendar/Calendar.tsx ===
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';

// Types
export interface Event {
  id: string;
  title: string;
  slug: string;
  subtitle?: string;
  description: string;
  startDate: string;
  endDate?: string;
  duration: {
    value: number;
    unit: 'days' | 'weeks' | 'months'
  };
  location: 'Onsite' | 'Online';
  imageUrl?: string;
  teacher?: string;
  isSoldOut?: boolean;
}

export type EventFilterType = 'all' | 'onsite' | 'online';

// Event Card Component
interface EventCardProps {
  event: Event;
}

export const EventCard: React.FC<EventCardProps> = ({ event }) => {
  // Format start date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };
  
  // Format duration for display
  const formatDuration = (duration: Event['duration']) => {
    if (duration.value === 1) {
      return `${duration.value} ${duration.unit.slice(0, -1)}`;
    }
    return `${duration.value} ${duration.unit}`;
  };
  
  return (
    <div className="flex flex-col md:flex-row gap-6 py-6 border-b border-gray-200">
      <div className="md:w-24 h-24 relative bg-gray-200 rounded flex-shrink-0">
        {event.imageUrl ? (
          <Image
            src={event.imageUrl}
            alt={event.title}
            fill
            className="object-cover rounded"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center">
            <svg 
              className="h-10 w-10 text-gray-400" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={1.5} 
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" 
              />
            </svg>
          </div>
        )}
      </div>
      
      <div className="flex-grow">
        <h3 className="text-lg font-bold mb-1">{event.title}</h3>
        
        {event.subtitle && (
          <p className="text-sm text-gray-600 mb-2">{event.subtitle}</p>
        )}
        
        <p className="text-gray-700 mb-4 line-clamp-3">
          {event.description}
        </p>
        
        <Link
          href={`/events/${event.slug}`}
          className="inline-flex items-center text-gray-700 font-medium hover:text-purple-700"
        >
          View event
          <svg className="w-4 h-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
          </svg>
        </Link>
      </div>
      
      <div className="md:w-48 flex-shrink-0 flex flex-col md:text-right">
        <div className="mb-2">
          <div className="text-sm font-medium">Start: {formatDate(event.startDate)}</div>
          
          <div className="flex items-center mt-1 justify-start md:justify-end">
            {event.duration && (
              <div className="flex items-center text-sm text-gray-600 mr-3 md:ml-3 md:mr-0">
                <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>{formatDuration(event.duration)}</span>
              </div>
            )}
          </div>
        </div>
        
        <div className="inline-flex items-center mt-2 bg-gray-100 rounded-full px-3 py-1 text-xs font-medium text-gray-700 justify-start md:justify-end md:self-end">
          {event.location}
        </div>
      </div>
    </div>
  );
};

// Event Filter Component
interface EventFilterProps {
  activeFilter: EventFilterType;
  onFilterChange: (filter: EventFilterType) => void;
}

export const EventFilter: React.FC<EventFilterProps> = ({
  activeFilter,
  onFilterChange,
}) => {
  return (
    <div className="inline-flex rounded-md shadow-sm mb-8">
      <button
        onClick={() => onFilterChange('all')}
        className={`px-4 py-2 text-sm font-medium rounded-l-md ${
          activeFilter === 'all'
            ? 'bg-gray-100 text-gray-900'
            : 'bg-white text-gray-700 hover:bg-gray-50'
        } border border-gray-300`}
      >
        View all
      </button>
      <button
        onClick={() => onFilterChange('onsite')}
        className={`px-4 py-2 text-sm font-medium ${
          activeFilter === 'onsite'
            ? 'bg-gray-100 text-gray-900'
            : 'bg-white text-gray-700 hover:bg-gray-50'
        } border-t border-b border-r border-gray-300`}
      >
        Onsite
      </button>
      <button
        onClick={() => onFilterChange('online')}
        className={`px-4 py-2 text-sm font-medium rounded-r-md ${
          activeFilter === 'online'
            ? 'bg-gray-100 text-gray-900'
            : 'bg-white text-gray-700 hover:bg-gray-50'
        } border-t border-b border-r border-gray-300`}
      >
        Online
      </button>
    </div>
  );
};

// Event Controls Component
interface EventControlsProps {
  totalEvents: number;
  onSortChange: (sort: string) => void;
  onFilterClick: () => void;
}

export const EventControls: React.FC<EventControlsProps> = ({
  totalEvents,
  onSortChange,
  onFilterClick,
}) => {
  return (
    <div className="flex justify-between items-center mb-6">
      <div className="text-sm text-gray-600">
        <span className="font-medium">{totalEvents}</span> events
      </div>
      
      <div className="flex items-center space-x-4">
        <div className="flex items-center text-sm">
          <span className="mr-2">Sort by</span>
          <select 
            onChange={(e) => onSortChange(e.target.value)}
            className="py-1 px-2 border border-gray-300 rounded-md bg-white text-gray-700 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          >
            <option value="date-asc">Date (Ascending)</option>
            <option value="date-desc">Date (Descending)</option>
            <option value="duration">Duration</option>
          </select>
        </div>
        
        <button
          onClick={onFilterClick}
          className="flex items-center py-1 px-3 text-sm border border-gray-300 rounded-md hover:bg-gray-50"
        >
          <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
          </svg>
          Filters
        </button>
      </div>
    </div>
  );
};

// Event Month Group Component
interface EventMonthGroupProps {
  month: string;
  events: Event[];
}

export const EventMonthGroup: React.FC<EventMonthGroupProps> = ({ month, events }) => {
  if (events.length === 0) return null;
  
  return (
    <div className="mb-12">
      <h2 className="text-2xl font-bold mb-6">{month}</h2>
      <div className="divide-y divide-gray-200">
        {events.map((event) => (
          <EventCard key={event.id} event={event} />
        ))}
      </div>
    </div>
  );
};

// Main Calendar Page Component
interface CalendarPageProps {
  initialEvents?: Event[];
  initialFilter?: EventFilterType;
}

export const CalendarPage: React.FC<CalendarPageProps> = ({
  initialEvents = [],
  initialFilter = 'all',
}) => {
  const [events, setEvents] = useState<Event[]>(initialEvents);
  const [filteredEvents, setFilteredEvents] = useState<Event[]>(initialEvents);
  const [activeFilter, setActiveFilter] = useState<EventFilterType>(initialFilter);
  const [sortBy, setSortBy] = useState('date-asc');
  
  // Filter events based on active filter
  const filterEvents = (filter: EventFilterType, allEvents: Event[]) => {
    if (filter === 'all') {
      return allEvents;
    } else {
      return allEvents.filter(event => event.location.toLowerCase() === filter);
    }
  };
  
  // Sort events based on the selected sort option
  const sortEvents = (eventsToSort: Event[], sortOption: string) => {
    const sortedEvents = [...eventsToSort];
    
    switch (sortOption) {
      case 'date-asc':
        return sortedEvents.sort((a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());
      case 'date-desc':
        return sortedEvents.sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime());
      case 'duration':
        return sortedEvents.sort((a, b) => {
          // Convert duration to days for comparison
          const getDaysValue = (duration: Event['duration']) => {
            switch (duration.unit) {
              case 'days': return duration.value;
              case 'weeks': return duration.value * 7;
              case 'months': return duration.value * 30;
              default: return duration.value;
            }
          };
          
          return getDaysValue(b.duration) - getDaysValue(a.duration);
        });
      default:
        return sortedEvents;
    }
  };
  
  // Apply filtering and sorting
  useEffect(() => {
    let result = filterEvents(activeFilter, events);
    result = sortEvents(result, sortBy);
    setFilteredEvents(result);
  }, [activeFilter, events, sortBy]);
  
  // Group events by month
  const groupEventsByMonth = (eventsToGroup: Event[]) => {
    const months: Record<string, Event[]> = {};
    
    // Get all months from the current date forward for the next year
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();
    
    for (let i = 0; i < 12; i++) {
      const monthIndex = (currentMonth + i) % 12;
      const year = currentYear + Math.floor((currentMonth + i) / 12);
      const monthName = new Date(year, monthIndex, 1).toLocaleString('en-US', { month: 'long' });
      months[monthName] = [];
    }
    
    // Group events by month
    eventsToGroup.forEach(event => {
      const date = new Date(event.startDate);
      const monthName = date.toLocaleString('en-US', { month: 'long' });
      
      if (months[monthName]) {
        months[monthName].push(event);
      }
    });
    
    // Remove empty months
    Object.keys(months).forEach(month => {
      if (months[month].length === 0) {
        delete months[month];
      }
    });
    
    return months;
  };
  
  // Group events by month
  const eventsByMonth = groupEventsByMonth(filteredEvents);
  
  // Handle filter change
  const handleFilterChange = (filter: EventFilterType) => {
    setActiveFilter(filter);
  };
  
  // Handle sort change
  const handleSortChange = (sort: string) => {
    setSortBy(sort);
  };
  
  // Handle filter button click
  const handleFilterClick = () => {
    // This would typically open a filter modal or dropdown
    console.log('Filter button clicked');
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="text-center mb-12">
        <div className="text-purple-600 text-sm font-medium mb-2">Calendar</div>
        <h1 className="text-3xl md:text-4xl font-bold mb-4">Upcoming retreats</h1>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique.
        </p>
      </div>
      
      <div className="mb-6 flex items-center justify-between flex-wrap gap-4">
        <EventFilter
          activeFilter={activeFilter}
          onFilterChange={handleFilterChange}
        />
        
        <EventControls
          totalEvents={filteredEvents.length}
          onSortChange={handleSortChange}
          onFilterClick={handleFilterClick}
        />
      </div>
      
      {Object.keys(eventsByMonth).length === 0 ? (
        <div className="text-center py-12">
          <p className="text-gray-500">No events found matching your criteria.</p>
        </div>
      ) : (
        Object.entries(eventsByMonth).map(([month, monthEvents]) => (
          <EventMonthGroup
            key={month}
            month={month}
            events={monthEvents}
          />
        ))
      )}
    </div>
  );
};

// Event Detail Page Component
interface EventDetailPageProps {
  event: Event;
  relatedEvents?: Event[];
}

export const EventDetailPage: React.FC<EventDetailPageProps> = ({
  event,
  relatedEvents = [],
}) => {
  if (!event) return null;
  
  // Format start date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    });
  };
  
  // Format duration for display
  const formatDuration = (duration: Event['duration']) => {
    if (duration.value === 1) {
      return `${duration.value} ${duration.unit.slice(0, -1)}`;
    }
    return `${duration.value} ${duration.unit}`;
  };
  
  return (
    <div className="container mx-auto px-4 py-8">
      <Link href="/calendar" className="inline-flex items-center text-gray-600 hover:text-gray-900 mb-8">
        <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Calendar
      </Link>
      
      <div className="max-w-4xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl md:text-4xl font-bold mb-2">{event.title}</h1>
          
          {event.subtitle && (
            <p className="text-xl text-gray-600 mb-4">{event.subtitle}</p>
          )}
          
          <div className="flex flex-wrap items-center gap-4 text-sm text-gray-600 mb-6">
            <div className="flex items-center">
              <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <span>{formatDate(event.startDate)}</span>
            </div>
            
            <div className="flex items-center">
              <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{formatDuration(event.duration)}</span>
            </div>
            
            <div className="flex items-center">
              <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span>{event.location}</span>
            </div>
            
            {event.teacher && (
              <div className="flex items-center">
                <svg className="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                <span>Guided by {event.teacher}</span>
              </div>
            )}
          </div>
        </div>
        
        {event.imageUrl && (
          <div className="relative aspect-video mb-8 rounded-lg overflow-hidden">
            <Image
              src={event.imageUrl}
              alt={event.title}
              fill
              className="object-cover"
              priority
            />
          </div>
        )}
        
        <div className="prose prose-lg max-w-none mb-12">
          <div dangerouslySetInnerHTML={{ __html: event.description }} />
        </div>
        
        <div className="bg-gray-50 rounded-lg p-6 mb-12">
          <h2 className="text-xl font-bold mb-4">Event Details</h2>
          
          <div className="grid sm:grid-cols-2 gap-4">
            <div>
              <div className="text-sm font-medium text-gray-600 mb-1">Date</div>
              <div>{formatDate(event.startDate)}</div>
            </div>
            
            <div>
              <div className="text-sm font-medium text-gray-600 mb-1">Duration</div>
              <div>{formatDuration(event.duration)}</div>
            </div>
            
            <div>
              <div className="text-sm font-medium text-gray-600 mb-1">Location</div>
              <div>{event.location}</div>
            </div>
            
            {event.teacher && (
              <div>
                <div className="text-sm font-medium text-gray-600 mb-1">Teacher</div>
                <div>{event.teacher}</div>
              </div>
            )}
          </div>
          
          <div className="mt-6">
            <button
              className={`w-full py-3 rounded-md font-medium text-center ${
                event.isSoldOut
                  ? 'bg-gray-300 text-gray-600 cursor-not-allowed'
                  : 'bg-gray-900 text-white hover:bg-gray-800'
              }`}
              disabled={event.isSoldOut}
            >
              {event.isSoldOut ? 'Sold Out' : 'Register Now'}
            </button>
          </div>
        </div>
        
        {relatedEvents.length > 0 && (
          <div className="mb-12">
            <h2 className="text-2xl font-bold mb-6">Other Upcoming Events</h2>
            <div className="divide-y divide-gray-200">
              {relatedEvents.map((relatedEvent) => (
                <EventCard key={relatedEvent.id} event={relatedEvent} />
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Export all the components
//export { EventCard, EventFilter, EventControls, EventMonthGroup, CalendarPage, EventDetailPage };
// === ./src/components/contact/ContactForm.tsx ===
'use client';

import { useState, FormEvent } from 'react';
import Link from 'next/link';

interface FormData {
  firstName: string;
  lastName: string;
  email: string;
  topic: string;
  message: string;
  privacyPolicy: boolean;
}

interface FormDataErr {
  firstName: string;
  lastName: string;
  email: string;
  topic: string;
  message: string;
  privacyPolicy: string;
}

const ContactForm: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({
    firstName: '',
    lastName: '',
    email: '',
    topic: '',
    message: '',
    privacyPolicy: false,
  });
  
  const [errors, setErrors] = useState<Partial<FormDataErr>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);
  const [submitError, setSubmitError] = useState('');
  
  // List of topic options for the dropdown
  const topicOptions = [
    'General Inquiry',
    'Retreats',
    'Membership',
    'Online Courses',
    'Donation',
    'Other',
  ];
  
  const validateForm = (): boolean => {
    const newErrors: Partial<FormDataErr> = {};
    
    if (!formData.firstName.trim()) {
      newErrors.firstName = 'First name is required';
    }
    
    if (!formData.lastName.trim()) {
      newErrors.lastName = 'Last name is required';
    }
    
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }
    
    if (!formData.message.trim()) {
      newErrors.message = 'Message is required';
    }
    
    if (!formData.privacyPolicy) {
      newErrors.privacyPolicy = 'You must agree to our privacy policy';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setFormData(prev => ({ ...prev, [name]: checked }));
  };
  
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setSubmitError('');
    
    try {
      // In a real implementation, you would send the form data to your API
      // const response = await fetch('/api/contact', {
      //   method: 'POST',
      //   headers: {
      //     'Content-Type': 'application/json',
      //   },
      //   body: JSON.stringify(formData),
      // });
      
      // if (!response.ok) {
      //   throw new Error('Failed to submit form');
      // }
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Reset form after successful submission
      setFormData({
        firstName: '',
        lastName: '',
        email: '',
        topic: '',
        message: '',
        privacyPolicy: false,
      });
      
      setSubmitSuccess(true);
    } catch (error) {
      setSubmitError('There was an error submitting your message. Please try again later.');
      console.error('Form submission error:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  if (submitSuccess) {
    return (
      <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
        <svg className="w-12 h-12 text-green-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
        </svg>
        <h3 className="text-xl font-bold mb-2">Thank You!</h3>
        <p className="text-gray-700 mb-4">
          Your message has been sent successfully. We'll get back to you as soon as possible.
        </p>
        <button
          onClick={() => setSubmitSuccess(false)}
          className="text-purple-600 font-medium hover:text-purple-800"
        >
          Send another message
        </button>
      </div>
    );
  }
  
  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Form error message */}
      {submitError && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
          {submitError}
        </div>
      )}
      
      {/* First name and Last name (side by side) */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">
            First name <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="firstName"
            name="firstName"
            value={formData.firstName}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent ${
              errors.firstName ? 'border-red-500' : 'border-gray-300'
            }`}
            placeholder="First name"
          />
          {errors.firstName && (
            <p className="mt-1 text-sm text-red-500">{errors.firstName}</p>
          )}
        </div>
        
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">
            Last name <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="lastName"
            name="lastName"
            value={formData.lastName}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent ${
              errors.lastName ? 'border-red-500' : 'border-gray-300'
            }`}
            placeholder="Last name"
          />
          {errors.lastName && (
            <p className="mt-1 text-sm text-red-500">{errors.lastName}</p>
          )}
        </div>
      </div>
      
      {/* Email */}
      <div>
        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
          Email <span className="text-red-500">*</span>
        </label>
        <input
          type="email"
          id="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
          className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent ${
            errors.email ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder="you@company.com"
        />
        {errors.email && (
          <p className="mt-1 text-sm text-red-500">{errors.email}</p>
        )}
      </div>
      
      {/* Topic */}
      <div>
        <label htmlFor="topic" className="block text-sm font-medium text-gray-700 mb-1">
          Choose a topic
        </label>
        <div className="relative">
          <select
            id="topic"
            name="topic"
            value={formData.topic}
            onChange={handleChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md appearance-none bg-white focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          >
            <option value="" disabled>Select one...</option>
            {topicOptions.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
          <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
            <svg className="w-5 h-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
      </div>
      
      {/* Message */}
      <div>
        <label htmlFor="message" className="block text-sm font-medium text-gray-700 mb-1">
          Message <span className="text-red-500">*</span>
        </label>
        <textarea
          id="message"
          name="message"
          value={formData.message}
          onChange={handleChange}
          rows={6}
          className={`w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent ${
            errors.message ? 'border-red-500' : 'border-gray-300'
          }`}
          placeholder="Leave us a message..."
        />
        {errors.message && (
          <p className="mt-1 text-sm text-red-500">{errors.message}</p>
        )}
      </div>
      
      {/* Privacy Policy */}
      <div className="flex items-start">
        <div className="flex items-center h-5">
          <input
            id="privacyPolicy"
            name="privacyPolicy"
            type="checkbox"
            checked={formData.privacyPolicy}
            onChange={handleCheckboxChange}
            className={`h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded ${
              errors.privacyPolicy ? 'border-red-500' : ''
            }`}
          />
        </div>
        <div className="ml-3 text-sm">
          <label htmlFor="privacyPolicy" className="text-gray-700">
            You agree to our friendly <Link href="/privacy-policy" className="text-purple-600 hover:text-purple-800">privacy policy</Link>.
          </label>
          {errors.privacyPolicy && (
            <p className="mt-1 text-sm text-red-500">{errors.privacyPolicy}</p>
          )}
        </div>
      </div>
      
      {/* Submit Button */}
      <div>
        <button
          type="submit"
          disabled={isSubmitting}
          className={`w-full bg-gray-900 text-white py-3 px-4 rounded-md font-medium hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 ${
            isSubmitting ? 'opacity-75 cursor-not-allowed' : ''
          }`}
        >
          {isSubmitting ? 'Submitting...' : 'Submit'}
        </button>
      </div>
    </form>
  );
};

export default ContactForm;
// === ./src/components/contact/ContactInfo.tsx ===
'use client';

import { useState } from 'react';
import Link from 'next/link';
import Script from 'next/script';

// Contact Info Component
interface ContactInfoProps {
  email?: string;
  phone?: string;
  address?: string;
  subheading?: string;
}

export const ContactInfo: React.FC<ContactInfoProps> = ({
  email = 'hello@satyoga.com',
  phone = '+1 (000) 000-0000',
  address = 'Fila San Marcos, Rio Nuevo, Perez Zeledon, Costa Rica',
  subheading = 'Do you need more information?'
}) => {
  return (
    <div className="max-w-lg">
      {subheading && (
        <p className="text-purple-600 mb-2">{subheading}</p>
      )}
      <h2 className="text-3xl font-bold mb-4">Contact us</h2>
      <p className="text-gray-700 mb-8">
        We'd love to hear from you! Whether you have questions, need 
        assistance, or simply want to connect, we're here to help.
      </p>
      
      <div className="space-y-4">
        <div className="flex items-start">
          <div className="flex-shrink-0 text-gray-500 mr-3">
            <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
            </svg>
          </div>
          <div>
            <Link href={`mailto:${email}`} className="text-gray-700 hover:text-purple-700">
              {email}
            </Link>
          </div>
        </div>
        
        <div className="flex items-start">
          <div className="flex-shrink-0 text-gray-500 mr-3">
            <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
            </svg>
          </div>
          <div>
            <Link href={`tel:${phone.replace(/[^0-9+]/g, '')}`} className="text-gray-700 hover:text-purple-700">
              {phone}
            </Link>
          </div>
        </div>
        
        <div className="flex items-start">
          <div className="flex-shrink-0 text-gray-500 mr-3">
            <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </div>
          <div>
            <address className="text-gray-700 not-italic">
              {address}
            </address>
          </div>
        </div>
      </div>
    </div>
  );
};

// === ./src/components/contact/ContactMap.tsx ===
'use client';

import React from 'react';
import Image from 'next/image';

const ContactMap: React.FC = () => {
  // Coordinates for Perez Zeledon, Costa Rica
  const lat = 9.3543;
  const lng = -83.6424;
  const zoom = 14;
  
  // Generate OpenStreetMap URL - no API key needed
  const mapUrl = `https://www.openstreetmap.org/export/embed.html?bbox=${lng-0.02}%2C${lat-0.02}%2C${lng+0.02}%2C${lat+0.02}&layer=mapnik&marker=${lat}%2C${lng}`;

  return (
    <div className="w-full h-[350px] relative rounded overflow-hidden border border-gray-300 mt-10">
      {/* OpenStreetMap iframe - no API key required */}
      <iframe 
        src={mapUrl}
        width="100%" 
        height="100%" 
        frameBorder="0" 
        scrolling="no" 
        title="Satyoga location"
        className="z-0"
      />
      
      {/* Weather indicator overlay */}
      <div className="absolute bottom-4 left-4 bg-white rounded-full p-2 shadow-md flex items-center space-x-2 z-10">
        <span className="font-medium">32</span>
        <span className="text-yellow-500">Sunny</span>
      </div>
    </div>
  );
};

export default ContactMap;
// === ./src/components/dashboard/AdminDashboard.tsx ===
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { 
  UsersIcon, 
  BookOpenIcon, 
  CurrencyDollarIcon, 
  ShoppingBagIcon, 
  ChartBarIcon 
} from '@heroicons/react/24/outline';

export default function AdminDashboard() {
  const [isLoading, setIsLoading] = useState(true);
  
  useEffect(() => {
    // Simulate loading data
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []);

  // Dashboard stats
  const stats = [
    { name: 'Total Users', value: '3,245', icon: UsersIcon, change: '+5.2%', changeType: 'increase' },
    { name: 'Active Courses', value: '2', icon: BookOpenIcon, change: '+2.1%', changeType: 'increase' },
    { name: 'Revenue (Month)', value: '$12,450', icon: CurrencyDollarIcon, change: '+12.5%', changeType: 'increase' },
    { name: 'Products Sold', value: '126', icon: ShoppingBagIcon, change: '-3.4%', changeType: 'decrease' },
  ];
  
  // Recent activities
  const activities = [
    { id: 1, user: 'Alex Thompson', action: 'signed up for', item: 'Introduction to Meditation', time: '15 minutes ago' },
    { id: 2, user: 'Maria Garcia', action: 'purchased', item: 'Dharma Teachings Bundle', time: '2 hours ago' },
    { id: 3, user: 'John Davis', action: 'applied for', item: 'Summer Retreat', time: '5 hours ago' },
    { id: 4, user: 'Sarah Wilson', action: 'commented on', item: 'The Path to Enlightenment', time: 'Yesterday' },
    { id: 5, user: 'Robert Smith', action: 'registered for', item: 'Online Group Meditation', time: 'Yesterday' },
  ];
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-700"></div>
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">Admin Dashboard</h1>
        <div className="flex space-x-3">
          <button className="px-4 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
            Export Data
          </button>
          <button className="px-4 py-2 bg-purple-600 rounded-md text-sm font-medium text-white hover:bg-purple-700">
            View Reports
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5 mb-8">
        {stats.map((stat, index) => (
          <div key={index} className="bg-white rounded-lg shadow p-5">
            <div className="flex justify-between items-start">
              <div>
                <p className="text-sm font-medium text-gray-500">{stat.name}</p>
                <p className="text-2xl font-bold mt-1">{stat.value}</p>
              </div>
              <span className="p-2 rounded-md bg-purple-100">
                <stat.icon className="h-6 w-6 text-purple-600" />
              </span>
            </div>
            <div className="mt-4">
              <span 
                className={`text-sm font-medium ${
                  stat.changeType === 'increase' ? 'text-green-600' : 'text-red-600'
                }`}
              >
                {stat.change}
              </span>
              <span className="text-sm text-gray-500 ml-1">from last month</span>
            </div>
          </div>
        ))}
      </div>

      {/* Charts Row */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow p-5">
          <div className="flex justify-between items-center mb-5">
            <h2 className="text-lg font-semibold">Revenue Overview</h2>
            <select className="text-sm border rounded-md px-2 py-1">
              <option>This Week</option>
              <option>This Month</option>
              <option>This Year</option>
            </select>
          </div>
          <div className="h-64 flex items-center justify-center border border-dashed border-gray-300 rounded-md">
            <div className="text-center">
              <ChartBarIcon className="h-10 w-10 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-500 text-sm">Revenue Chart Placeholder</p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-5">
          <div className="flex justify-between items-center mb-5">
            <h2 className="text-lg font-semibold">User Growth</h2>
            <select className="text-sm border rounded-md px-2 py-1">
              <option>3 Months</option>
              <option>6 Months</option>
              <option>1 Year</option>
            </select>
          </div>
          <div className="h-64 flex items-center justify-center border border-dashed border-gray-300 rounded-md">
            <div className="text-center">
              <ChartBarIcon className="h-10 w-10 text-gray-400 mx-auto mb-2" />
              <p className="text-gray-500 text-sm">User Growth Chart Placeholder</p>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="bg-white rounded-lg shadow overflow-hidden mb-8">
        <div className="px-5 py-4 border-b border-gray-200">
          <h2 className="text-lg font-semibold">Recent Activity</h2>
        </div>
        <div className="divide-y divide-gray-200">
          {activities.map((activity) => (
            <div key={activity.id} className="px-5 py-4">
              <div className="flex items-center">
                <div className="flex-shrink-0 h-8 w-8 bg-gray-200 rounded-full overflow-hidden">
                  {/* User avatar placeholder */}
                </div>
                <div className="ml-3">
                  <p className="text-sm">
                    <span className="font-medium text-gray-900">{activity.user}</span>
                    <span className="text-gray-500"> {activity.action} </span>
                    <span className="font-medium text-gray-900">{activity.item}</span>
                  </p>
                  <p className="text-xs text-gray-500">{activity.time}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
        <div className="px-5 py-4 bg-gray-50 border-t border-gray-200">
          <a href="#" className="text-sm font-medium text-purple-600 hover:text-purple-800">
            View all activity →
          </a>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-lg shadow p-5">
        <h2 className="text-lg font-semibold mb-4">Quick Actions</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button className="flex items-center p-3 bg-gray-50 hover:bg-gray-100 rounded-md">
            <UsersIcon className="h-5 w-5 text-gray-500 mr-2" />
            <span className="text-sm">Add New User</span>
          </button>
          <button className="flex items-center p-3 bg-gray-50 hover:bg-gray-100 rounded-md">
            <BookOpenIcon className="h-5 w-5 text-gray-500 mr-2" />
            <span className="text-sm">Create Course</span>
          </button>
          <button className="flex items-center p-3 bg-gray-50 hover:bg-gray-100 rounded-md">
            <ShoppingBagIcon className="h-5 w-5 text-gray-500 mr-2" />
            <span className="text-sm">Add Product</span>
          </button>
        </div>
      </div>
    </div>
  );
}
// === ./src/components/dashboard/AdminSidebar.tsx ===
"use client";

import { useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  UsersIcon,
  BookOpenIcon,
  HomeIcon,
  DocumentTextIcon,
  ShoppingBagIcon,
  CurrencyDollarIcon,
  EnvelopeIcon,
  ChartBarIcon,
  Cog6ToothIcon,
  QuestionMarkCircleIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  XMarkIcon,
} from "@heroicons/react/24/outline";

const AdminSidebar = () => {
  const pathname = usePathname();
  const [expandedItems, setExpandedItems] = useState<string[]>([]);
  const [showUpgradeModal, setShowUpgradeModal] = useState(true);

  // Toggle submenu expanded state
  const toggleExpand = (item: string) => {
    setExpandedItems((prev) =>
      prev.includes(item) ? prev.filter((i) => i !== item) : [...prev, item]
    );
  };

  // Check if a menu item is active
  const isActive = (path: string) => {
    return pathname === path || pathname?.startsWith(`${path}/`);
  };

  // Main navigation items
  const mainNavItems = [
    {
      name: "Dashboard",
      href: "/dashboard/admin",
      icon: HomeIcon,
    },
    {
      name: "Users",
      href: "/dashboard/admin/users",
      icon: UsersIcon,
      subItems: [
        { name: "All Users", href: "/dashboard/admin/users" },
        { name: "Memberships", href: "/dashboard/admin/users/memberships" },
        { name: "Permissions", href: "/dashboard/admin/users/permissions" },
      ],
    },
    {
      name: "Courses",
      href: "/dashboard/admin/course",
      icon: BookOpenIcon,
      subItems: [
        { name: "All Courses", href: "/dashboard/admin/course" },
        { name: "Instructors", href: "/dashboard/admin/course/instructors" },
        { name: "Reviews", href: "/dashboard/admin/course/reviews" },
      ],
    },
    {
      name: "Retreats",
      href: "/dashboard/admin/retreats",
      icon: HomeIcon,
      subItems: [
        { name: "Upcoming Retreats", href: "/dashboard/admin/retreats" },
        { name: "Past Retreats", href: "/dashboard/admin/retreats/past" },
        {
          name: "Applications",
          href: "/dashboard/admin/retreats/applications",
        },
      ],
    },
    {
      name: "Blog",
      href: "/dashboard/admin/blog",
      icon: DocumentTextIcon,
      subItems: [
        { name: "All Posts", href: "/dashboard/admin/blog" },
        { name: "Categories", href: "/dashboard/admin/blog/categories" },
        { name: "Comments", href: "/dashboard/admin/blog/comments" },
      ],
    },
    {
      name: "Products",
      href: "/dashboard/admin/products",
      icon: ShoppingBagIcon,
      subItems: [
        { name: "All Products", href: "/dashboard/admin/products" },
        { name: "Categories", href: "/dashboard/admin/products/categories" },
        { name: "Inventory", href: "/dashboard/admin/products/inventory" },
      ],
    },
    {
      name: "Sales",
      href: "/dashboard/admin/sales",
      icon: CurrencyDollarIcon,
      subItems: [
        { name: "Orders", href: "/dashboard/admin/sales" },
        { name: "Transactions", href: "/dashboard/admin/sales/transactions" },
        { name: "Discounts", href: "/dashboard/admin/sales/discounts" },
      ],
    },
    {
      name: "Email",
      href: "/dashboard/admin/email",
      icon: EnvelopeIcon,
      subItems: [
        { name: "Campaigns", href: "/dashboard/admin/email" },
        { name: "Templates", href: "/dashboard/admin/email/templates" },
        { name: "Subscribers", href: "/dashboard/admin/email/subscribers" },
      ],
    },
    {
      name: "Analytics",
      href: "/dashboard/admin/analytics",
      icon: ChartBarIcon,
      subItems: [
        { name: "Overview", href: "/dashboard/admin/analytics" },
        {
          name: "User Engagement",
          href: "/dashboard/admin/analytics/engagement",
        },
        { name: "Revenue", href: "/dashboard/admin/analytics/revenue" },
      ],
    },
  ];

  // Support and settings
  const bottomNavItems = [
    {
      name: "Help Center",
      href: "/dashboard/admin/help",
      icon: QuestionMarkCircleIcon,
    },
    {
      name: "Settings",
      href: "/dashboard/admin/settings",
      icon: Cog6ToothIcon,
    },
  ];

  // Render an individual navigation item
  const renderNavItem = (item: any, key: number) => {
    const isItemActive = isActive(item.href);
    const isExpanded = expandedItems.includes(item.name);
    const hasSubItems = item.subItems && item.subItems.length > 0;

    return (
      <div key={key} className="mb-1">
        <div
          className={`flex items-center justify-between rounded-md px-3 py-2 cursor-pointer ${
            isItemActive
              ? "bg-gray-700 text-white"
              : "text-gray-700 hover:bg-gray-200"
          }`}
          onClick={() => (hasSubItems ? toggleExpand(item.name) : null)}
        >
          <Link
            href={item.href}
            className="flex items-center flex-grow"
            onClick={(e) => hasSubItems && e.preventDefault()}
          >
            <item.icon className="h-5 w-5 mr-3" />
            <span className="text-sm font-medium">{item.name}</span>
          </Link>
          {hasSubItems && (
            <button className="p-1">
              {isExpanded ? (
                <ChevronUpIcon className="h-4 w-4" />
              ) : (
                <ChevronDownIcon className="h-4 w-4" />
              )}
            </button>
          )}
        </div>

        {/* Sub items */}
        {hasSubItems && isExpanded && (
          <div className="ml-5 pl-4 border-l border-gray-200 mt-1 space-y-1">
            {item.subItems.map((subItem: any, idx: number) => (
              <Link
                key={idx}
                href={subItem.href}
                className={`block px-3 py-2 text-sm rounded-md ${
                  pathname === subItem.href
                    ? "text-purple-700 font-medium"
                    : "text-gray-600 hover:text-purple-700"
                }`}
              >
                {subItem.name}
              </Link>
            ))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="w-64 h-screen bg-gray-50 border-r border-gray-200 flex flex-col">
      {/* Logo section */}
      <div className="p-5">
        <Link href="/dashboard" className="text-2xl font-serif italic">
          Logo
        </Link>
      </div>

      {/* Main navigation */}
      <div className="flex-grow overflow-y-auto px-4 py-2">
        {/* Main items */}
        {mainNavItems.map((item, idx) => renderNavItem(item, idx))}

        {/* Bottom items (Support and Settings) */}
        <div className="mt-8 pt-6 border-t border-gray-200">
          {bottomNavItems.map((item, idx) => renderNavItem(item, idx))}
        </div>
      </div>

      {/* Admin info */}
      <div className="p-4 border-t border-gray-200 flex items-center">
        <div className="w-8 h-8 rounded-full bg-gray-300 mr-3 overflow-hidden">
          <img
            src="/admin-avatar.jpg"
            alt="Admin"
            className="w-full h-full object-cover"
            onError={(e) => {
              // Fallback if image doesn't load
              const target = e.target as HTMLImageElement;
              target.style.display = "none";
            }}
          />
        </div>
        <div className="flex-grow">
          <p className="text-sm font-medium truncate">Admin User</p>
          <p className="text-xs text-gray-500 truncate">admin@example.com</p>
        </div>
        <button className="ml-2 text-gray-400 hover:text-gray-600">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M8 9l4-4 4 4m0 6l-4 4-4-4"
            />
          </svg>
        </button>
      </div>

      {/* Upgrade modal */}
      {showUpgradeModal && (
        <div className="mx-4 mb-4 p-4 bg-white rounded-lg border border-gray-200 relative">
          <button
            className="absolute top-2 right-2 text-gray-400 hover:text-gray-600"
            onClick={() => setShowUpgradeModal(false)}
          >
            <XMarkIcon className="h-4 w-4" />
          </button>
          <h3 className="text-sm font-medium mb-1">Admin Pro Upgrade</h3>
          <p className="text-xs text-gray-500 mb-3">
            Get advanced analytics and batch operations
          </p>
          <button className="w-full bg-purple-600 text-white py-2 rounded-md text-sm font-medium hover:bg-purple-700">
            Upgrade now
          </button>
        </div>
      )}
    </div>
  );
};

export default AdminSidebar;

// === ./src/components/dashboard/UserDashboard.tsx ===
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

export default function UserDashboard() {
  const [isLoading, setIsLoading] = useState(true);
  const [hideCalendar, setHideCalendar] = useState(false);
  
  useEffect(() => {
    // Simulate loading data
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1000);
    
    return () => clearTimeout(timer);
  }, []);
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-700"></div>
      </div>
    );
  }

  return (
    <div className="bg-white min-h-screen">
      {/* Header */}
      <div className="max-w-6xl mx-auto px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div className="w-12 h-12 rounded-full bg-gray-100 mr-4 flex items-center justify-center">
              <svg className="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </div>
            <div>
              <div className="flex items-center">
                <h1 className="text-2xl text-gray-900 font-medium">Namaste, Alessandra</h1>
                <span className="ml-2 px-2 py-0.5 text-xs bg-gray-100 text-gray-600 rounded">Free</span>
              </div>
              <p className="text-sm text-gray-500">Sunday, Jan 5th, 2024</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <button className="text-gray-500 hover:text-gray-700">
              <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
            <button className="text-gray-500 hover:text-gray-700">
              <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
              </svg>
            </button>
            <button className="text-gray-500 hover:text-gray-700">
              <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
            </button>
            <button className="px-3 py-1.5 border border-gray-300 rounded text-sm font-medium hover:bg-gray-50">
              Donate
            </button>
            <button className="px-3 py-1.5 border border-gray-300 rounded text-sm font-medium hover:bg-gray-50">
              Go to website
            </button>
          </div>
        </div>

        {/* Quote of the week */}
        <div className="mt-6">
          <h2 className="text-base font-medium mb-2">Quote of the week</h2>
          <div className="bg-gray-100 rounded-lg p-6">
            <div className="text-center p-6 relative">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="bg-gray-200 w-48 h-48 rounded-md"></div>
              </div>
              <div className="relative z-10 max-w-3xl mx-auto mb-1">
                <h3 className="text-lg font-medium mb-4">
                  Lorem ipsum dolor sit amet consectetur....
                </h3>
                <p className="text-gray-700 italic">
                  "Lorem ipsum dolor sit amet consectetur. Sit hendrerit ornare porttitor eros malesuada lorem. Id velit at auctor bibendum interdum sem placerat nibh. Maecenas eget faucibus ullamcorper id elementum molestie pellentesque dui a. Feugiat sit ipsum malesuada vehicula id mont..."
                </p>
              </div>
            </div>
          </div>
        </div>

        <div className="mt-8 grid grid-cols-12 gap-8">
          {/* Left column - Wider */}
          <div className="col-span-8">
            {/* Happening now */}
            <div className="mb-8">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-medium">Happening now</h2>
                <button>
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
                  </svg>
                </button>
              </div>
              
              {/* Live video player */}
              <div className="bg-gray-500 rounded-lg relative mb-3" style={{ height: "250px" }}>
                <div className="absolute inset-0 flex items-center justify-center">
                  <button className="w-20 h-20 bg-white rounded-full flex items-center justify-center">
                    <svg className="h-8 w-8 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    </svg>
                  </button>
                </div>
                <div className="absolute top-3 left-3 bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                  Live
                </div>
                <div className="absolute top-3 right-3 bg-black bg-opacity-60 text-white text-xs px-2 py-1 rounded-full">
                  203
                </div>
              </div>
              
              <div className="pb-3">
                <div className="text-xs text-gray-500">Sun, Sept 28th</div>
                <h3 className="text-base font-medium mt-1 mb-1">Title here</h3>
                <p className="text-sm text-gray-600">
                  Lorem ipsum dolor sit amet consectetur. Sit hendrerit ornare porttitor eros malesuada lorem. Id velit at auctor bibendum interdum sem placerat nibh. Maecenas eget faucibus ullamcorper id elementum molestie pellentesque dui a. Feugiat sit ipsum malesuada veh...
                </p>
                <button className="mt-3 px-4 py-2 bg-white border border-gray-300 rounded text-sm font-medium text-blue-600">
                  Join zoom
                </button>
              </div>
            </div>

                          {/* Featured teaching */}
            <div className="mb-8">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-medium">Featured teaching</h2>
                <a href="#" className="text-sm text-gray-500 hover:text-gray-700 flex items-center">
                  View all
                  <svg className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
              
              <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                <div className="flex p-4">
                  <div className="w-32 h-32 bg-gray-100 rounded-md flex-shrink-0 flex items-center justify-center mr-4">
                    <svg className="h-12 w-12 text-gray-300" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <div className="flex-1">
                    <div className="text-xs text-gray-500">November 5th, 2024</div>
                    <h3 className="text-base font-medium mt-1">The Technique of Detachment from Technique</h3>
                    <p className="text-sm text-gray-600 mt-2">
                      For some time, critical theorists have declared that we have entered a new evolutionary period, that they refer to as the Anthropocene era, meaning that our biological fate is now dominate...
                    </p>
                    <div className="flex mt-3 space-x-4">
                      <button className="inline-flex items-center text-xs text-gray-600">
                        <svg className="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0" />
                        </svg>
                        Audio
                      </button>
                      <button className="inline-flex items-center text-xs text-gray-600">
                        <svg className="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        Video
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right column - Narrower */}
          <div className="col-span-4">
            {/* Enrolled calendar */}
            <div className="mb-8">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-medium">Enrolled calendar</h2>
                <a href="#" className="text-sm text-gray-500 hover:text-gray-700 flex items-center">
                  View all
                  <svg className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              </div>
              
              <div className="bg-white border border-gray-200 rounded-lg p-5">
                {!hideCalendar && (
                  <>
                    <div className="flex justify-between items-center mb-4">
                      <div className="text-base font-medium">December, 2024</div>
                      <div className="flex">
                        <button className="p-1">
                          <svg className="h-4 w-4 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                          </svg>
                        </button>
                        <button className="p-1">
                          <svg className="h-4 w-4 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </button>
                      </div>
                    </div>

                    <div className="mb-4">
                      <div className="grid grid-cols-7 text-center mb-2">
                        {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map((day, idx) => (
                          <div key={idx} className="text-xs font-medium text-gray-600">{day}</div>
                        ))}
                      </div>
                      <div className="grid grid-cols-7 text-center mb-1">
                        {[28, 29, 30, 1, 2, 3, 4].map((day, idx) => (
                          <div key={idx} className="py-2">
                            <div className={`text-sm ${idx < 3 ? 'text-gray-400' : ''}`}>{day}</div>
                          </div>
                        ))}
                      </div>
                      <div className="grid grid-cols-7 text-center mb-1">
                        {[5, 6, 7, 8, 9, 10, 11].map((day, idx) => (
                          <div key={idx} className="py-2">
                            <div className="text-sm">{day}</div>
                          </div>
                        ))}
                      </div>
                      <div className="grid grid-cols-7 text-center mb-1">
                        {[12, 13, 14, 15, 16, 17, 18].map((day, idx) => (
                          <div key={idx} className="py-2">
                            <div className={`text-sm ${day === 13 ? 'w-8 h-8 bg-purple-600 text-white rounded-full inline-flex items-center justify-center' : ''}`}>{day}</div>
                          </div>
                        ))}
                      </div>
                      <div className="grid grid-cols-7 text-center mb-1">
                        {[19, 20, 21, 22, 23, 24, 25].map((day, idx) => (
                          <div key={idx} className="py-2">
                            <div className="text-sm">{day}</div>
                          </div>
                        ))}
                      </div>
                      <div className="grid grid-cols-7 text-center mb-1">
                        {[26, 27, 28, 29, 30, 31, 1].map((day, idx) => (
                          <div key={idx} className="py-2">
                            <div className={`text-sm ${idx === 6 ? 'text-gray-400' : ''}`}>{day}</div>
                          </div>
                        ))}
                      </div>
                    </div>

                    <button 
                      className="text-sm text-blue-600 block"
                      onClick={() => setHideCalendar(true)}
                    >
                      Hide calendar
                    </button>
                  </>
                )}
              </div>
            </div>
            
            {/* Calendar Events - Separate Cards with dots */}
            <div className="space-y-4 mt-4">
              {/* Event 1 */}
              <div className="flex items-start">
                <div className="flex-shrink-0 mr-2">
                  <span className="inline-block w-2 h-2 bg-black rounded-full mt-2"></span>
                </div>
                <div>
                  <div className="flex items-center">
                    <span className="text-sm font-medium">December 28th</span>
                    <span className="text-sm text-gray-500 ml-1">Saturday</span>
                  </div>
                  <div className="mt-2 flex items-start">
                    <div className="bg-gray-200 w-8 h-8 rounded-md flex items-center justify-center mr-3 flex-shrink-0">
                      <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <div>
                      <div className="text-sm font-medium">Event title</div>
                      <div className="text-xs text-gray-500 mt-0.5">
                        Fri 17 Dec 2024 • Onsite • 3 days
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Event 2 */}
              <div className="flex items-start">
                <div className="flex-shrink-0 mr-2">
                  <span className="inline-block w-2 h-2 bg-black rounded-full mt-2"></span>
                </div>
                <div>
                  <div className="flex items-center">
                    <span className="text-sm font-medium">December 27th</span>
                    <span className="text-sm text-gray-500 ml-1">Friday</span>
                  </div>
                  <div className="mt-2 flex items-start">
                    <div className="bg-gray-200 w-8 h-8 rounded-md flex items-center justify-center mr-3 flex-shrink-0">
                      <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <div>
                      <div className="text-sm font-medium">Event title</div>
                      <div className="text-xs text-gray-500 mt-0.5">
                        Fri 17 Dec 2024 • Onsite • 3 days
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Event 3 */}
              <div className="flex items-start">
                <div className="flex-shrink-0 mr-2">
                  <span className="inline-block w-2 h-2 bg-black rounded-full mt-2"></span>
                </div>
                <div>
                  <div className="flex items-center">
                    <span className="text-sm font-medium">December 30th</span>
                    <span className="text-sm text-gray-500 ml-1">Monday</span>
                  </div>
                  <div className="mt-2 flex items-start">
                    <div className="bg-gray-200 w-8 h-8 rounded-md flex items-center justify-center mr-3 flex-shrink-0">
                      <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <div>
                      <div className="text-sm font-medium">Event title</div>
                      <div className="text-xs text-gray-500 mt-0.5">
                        Fri 17 Dec 2024 • Onsite • 3 days
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Event 4 */}
              <div className="flex items-start">
                <div className="flex-shrink-0 mr-2">
                  <span className="inline-block w-2 h-2 bg-black rounded-full mt-2"></span>
                </div>
                <div>
                  <div className="flex items-center">
                    <span className="text-sm font-medium">December 28th</span>
                    <span className="text-sm text-gray-500 ml-1">Sunday</span>
                  </div>
                  <div className="mt-2 flex items-start">
                    <div className="bg-gray-200 w-8 h-8 rounded-md flex items-center justify-center mr-3 flex-shrink-0">
                      <svg className="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>
                    <div>
                      <div className="text-sm font-medium">Event title</div>
                      <div className="text-xs text-gray-500 mt-0.5">
                        Fri 17 Dec 2024 • Onsite • 3 days
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

                  {/* Most recent publications - Full width */}
        <div className="mt-8 mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium">Most recent publications</h2>
            <a href="#" className="text-sm text-gray-500 hover:text-gray-700 flex items-center">
              View all
              <svg className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </a>
          </div>
          <div className="grid grid-cols-3 gap-6">
            {/* Publication 1 */}
            <div>
              <div className="bg-gray-100 aspect-w-1 aspect-h-1 rounded-lg relative mb-3">
                <div className="h-full w-full flex items-center justify-center">
                  <div className="text-gray-300">
                    <svg className="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <button className="absolute top-2 right-2 bg-white p-2 rounded-md">
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <div>
                <div className="text-xs text-gray-500">November 5th, 2024</div>
                <h3 className="text-base font-medium my-1">The Technique of Detachment from Technique</h3>
                <div className="flex mt-2 space-x-3">
                  <button className="inline-flex items-center px-2 py-0.5 text-xs text-gray-500 border border-gray-200 rounded">
                    <svg className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0" />
                    </svg>
                    Audio
                  </button>
                  <button className="inline-flex items-center px-2 py-0.5 text-xs text-gray-500 border border-gray-200 rounded">
                    <svg className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    Video
                  </button>
                </div>
              </div>
            </div>

            {/* Publication 2 */}
            <div>
              <div className="bg-gray-100 aspect-w-1 aspect-h-1 rounded-lg relative mb-3">
                <div className="h-full w-full flex items-center justify-center">
                  <div className="text-gray-300">
                    <svg className="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <button className="absolute top-2 right-2 bg-white p-2 rounded-md">
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <div>
                <div className="text-xs text-gray-500">November 5th, 2024</div>
                <h3 className="text-base font-medium my-1">Lorem ipsum dolor sit amet</h3>
                <div className="flex mt-2 space-x-3">
                  <button className="inline-flex items-center px-2 py-0.5 text-xs text-gray-500 border border-gray-200 rounded">
                    <svg className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    Video
                  </button>
                </div>
              </div>
            </div>

            {/* Publication 3 */}
            <div>
              <div className="bg-gray-100 aspect-w-1 aspect-h-1 rounded-lg relative mb-3">
                <div className="h-full w-full flex items-center justify-center">
                  <div className="text-gray-300">
                    <svg className="h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <button className="absolute top-2 right-2 bg-white p-2 rounded-md">
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <div>
                <div className="text-xs text-gray-500">November 5th, 2024</div>
                <h3 className="text-base font-medium my-1">Lorem ipsum dolor sit amet</h3>
                <div className="flex mt-2 space-x-3">
                  <button className="inline-flex items-center px-2 py-0.5 text-xs text-gray-500 border border-gray-200 rounded">
                    <svg className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15.536a5 5 0 017.072 0m-9.9-2.828a9 9 0 0112.728 0" />
                    </svg>
                    Audio
                  </button>
                  <button className="inline-flex items-center px-2 py-0.5 text-xs text-gray-500 border border-gray-200 rounded">
                    <svg className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                    Video
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

                  {/* Continue where you left off */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium">Continue where you left off</h2>
            <button>
              <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
              </svg>
            </button>
          </div>
          
          {/* Continue course card */}
          <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <div className="flex">
              <div className="w-80 bg-gray-800 relative" style={{ height: "220px" }}>
                <div className="absolute inset-0 flex items-center justify-center">
                  <button className="w-20 h-20 bg-white rounded-full flex items-center justify-center">
                    <svg className="h-10 w-10 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    </svg>
                  </button>
                </div>
                <button className="absolute top-3 right-3 bg-white p-2 rounded-md">
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <div className="flex-1 p-6">
                <div className="flex items-center text-xs text-gray-500 mb-1">
                  <svg className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                  40 lessons
                </div>
                <h3 className="text-base font-medium">Fundamentals of meditation</h3>
                <p className="text-sm text-gray-600 mt-1">
                  Darshan is a Sanskrit term for a sacred meeting with a spiritual teacher, acharya, guru, sage, or other holy being...
                </p>
                <div className="mt-6">
                  <div className="flex items-center justify-between text-xs text-gray-500 mb-1">
                    <span>3% completed</span>
                    <span>6 hours left</span>
                  </div>
                  <div className="w-full h-1 bg-gray-200 rounded-full mb-6">
                    <div 
                      className="h-1 bg-purple-600 rounded-full" 
                      style={{ width: '3%' }}
                    ></div>
                  </div>
                  <button className="px-6 py-3 bg-black text-white text-sm font-medium rounded-md hover:bg-gray-800">
                    Continue course
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

                  {/* Recently Watched */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium">Recently Watched</h2>
            <a href="#" className="text-sm text-gray-500 hover:text-gray-700 flex items-center">
              View all
              <svg className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </a>
          </div>
          <div className="grid grid-cols-3 gap-6">
            {/* Recently Watched Card 1 */}
            <div>
              <div className="relative">
                <div className="bg-gray-500 rounded-lg h-32 mb-2 flex items-center justify-center">
                  <button className="w-14 h-14 bg-white rounded-full flex items-center justify-center">
                    <svg className="h-8 w-8 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    </svg>
                  </button>
                </div>
                <div className="absolute top-2 left-2 bg-green-500 text-white text-xs font-medium px-2 py-0.5 rounded">
                  New
                </div>
                <button className="absolute top-2 right-2 bg-white p-2 rounded-md">
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <p className="text-sm font-medium mb-1">Lorem ipsum dolor sit amet</p>
              <div className="flex items-center justify-between">
                <div className="flex items-center text-xs text-gray-500">
                  <svg className="h-3.5 w-3.5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  45 minutes
                </div>
                <span className="text-xs text-gray-500">November 5th, 2024</span>
              </div>
            </div>

            {/* Recently Watched Card 2 */}
            <div>
              <div className="relative">
                <div className="bg-gray-500 rounded-lg h-32 mb-2 flex items-center justify-center">
                  <button className="w-14 h-14 bg-white rounded-full flex items-center justify-center">
                    <svg className="h-8 w-8 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    </svg>
                  </button>
                </div>
                <div className="absolute top-2 left-2 bg-green-500 text-white text-xs font-medium px-2 py-0.5 rounded">
                  New
                </div>
                <button className="absolute top-2 right-2 bg-white p-2 rounded-md">
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <p className="text-sm font-medium mb-1">Lorem ipsum dolor sit amet</p>
              <div className="flex items-center justify-between">
                <div className="flex items-center text-xs text-gray-500">
                  <svg className="h-3.5 w-3.5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  45 minutes
                </div>
                <span className="text-xs text-gray-500">November 5th, 2024</span>
              </div>
            </div>

            {/* Recently Watched Card 3 */}
            <div>
              <div className="relative">
                <div className="bg-gray-500 rounded-lg h-32 mb-2 flex items-center justify-center">
                  <button className="w-14 h-14 bg-white rounded-full flex items-center justify-center">
                    <svg className="h-8 w-8 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    </svg>
                  </button>
                </div>
                <button className="absolute top-2 right-2 bg-white p-2 rounded-md">
                  <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                  </svg>
                </button>
              </div>
              <p className="text-sm font-medium mb-1">Lorem ipsum dolor sit amet</p>
              <div className="flex items-center justify-between">
                <div className="flex items-center text-xs text-gray-500">
                  <svg className="h-3.5 w-3.5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  45 minutes
                </div>
                <span className="text-xs text-gray-500">November 5th, 2024</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
// === ./src/components/dashboard/UserSidebar.tsx ===
"use client";

import { useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  HomeIcon,
  BookOpenIcon,
  ShoppingBagIcon,
  HeartIcon,
  CalendarIcon,
  BookmarkIcon,
  DocumentTextIcon,
  UserGroupIcon,
  Cog6ToothIcon,
  XMarkIcon,
  ChevronDownIcon,
  ChevronUpIcon,
} from "@heroicons/react/24/outline";

const UserSidebar = () => {
  const pathname = usePathname();
  const [expandedItems, setExpandedItems] = useState<string[]>(["Library"]); // Default expanded
  const [showUpgradeModal, setShowUpgradeModal] = useState(true);

  // Toggle submenu expanded state
  const toggleExpand = (item: string) => {
    setExpandedItems((prev) =>
      prev.includes(item) ? prev.filter((i) => i !== item) : [...prev, item]
    );
  };

  // Check if a menu item is active
  const isActive = (path: string) => {
    return pathname === path || pathname?.startsWith(`${path}/`);
  };

  // Navigation sections
  const dashboardItem = {
    name: "Dashboard",
    href: "/dashboard",
    icon: HomeIcon,
  };

  const quickAccessItems = [
    {
      name: "Online retreats",
      href: "/dashboard/retreats",
      icon: HomeIcon,
    },
    {
      name: "Courses",
      href: "/dashboard/user/courses",
      icon: BookOpenIcon,
    },
  ];

  const userSpaceItems = [
    {
      name: "My purchases",
      href: "/dashboard/purchases",
      icon: ShoppingBagIcon,
    },
    {
      name: "My favourites",
      href: "/dashboard/favourites",
      icon: HeartIcon,
    },
    {
      name: "Calendar",
      href: "/dashboard/calendar",
      icon: CalendarIcon,
    },
  ];

  const membershipItems = [
    {
      name: "Library",
      href: "/dashboard/library",
      icon: BookmarkIcon,
      subItems: [
        { name: "Teachings", href: "/dashboard/library/teachings" },
        { name: "Guided meditations", href: "/dashboard/library/meditations" },
        { name: "Q&A's", href: "/dashboard/library/qanda" },
        { name: "Essays", href: "/dashboard/library/essays" },
      ],
    },
  ];

  const storeItems = [
    {
      name: "The Dharma Bandha",
      href: "/dashboard/store",
      icon: ShoppingBagIcon,
      subItems: [
        { name: "Store", href: "/dashboard/store/items" },
        { name: "Saved for later", href: "/dashboard/store/saved" },
      ],
    },
  ];

  const resourceItems = [
    {
      name: "Blog",
      href: "/dashboard/blog",
      icon: DocumentTextIcon,
    },
    {
      name: "Telegram group",
      href: "/dashboard/telegram",
      icon: UserGroupIcon,
    },
  ];

  // Render a navigation section with title
  const renderNavSection = (
    title: string,
    items: any[],
    marginTop: boolean = true
  ) => (
    <div className={`${marginTop ? "mt-6" : ""}`}>
      <h3 className="px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider">
        {title}
      </h3>
      <div className="mt-2 space-y-1">
        {items.map((item, idx) => renderNavItem(item, idx))}
      </div>
    </div>
  );

  // Render an individual navigation item
  const renderNavItem = (item: any, key: number) => {
    const isItemActive = isActive(item.href);
    const isExpanded = expandedItems.includes(item.name);
    const hasSubItems = item.subItems && item.subItems.length > 0;

    return (
      <div key={key}>
        <div
          className={`flex items-center justify-between rounded-md px-3 py-2 cursor-pointer ${
            isItemActive
              ? "bg-gray-700 text-white"
              : "text-gray-700 hover:bg-gray-200"
          }`}
          onClick={() => (hasSubItems ? toggleExpand(item.name) : null)}
        >
          <Link
            href={item.href}
            className="flex items-center flex-grow"
            onClick={(e) => hasSubItems && e.preventDefault()}
          >
            <item.icon className="h-5 w-5 mr-3" />
            <span className="text-sm font-medium">{item.name}</span>
          </Link>
          {hasSubItems && (
            <button className="p-1">
              {isExpanded ? (
                <ChevronUpIcon className="h-4 w-4" />
              ) : (
                <ChevronDownIcon className="h-4 w-4" />
              )}
            </button>
          )}
        </div>

        {/* Sub items */}
        {hasSubItems && isExpanded && (
          <div className="ml-12 mt-1 space-y-1">
            {item.subItems.map((subItem: any, idx: number) => (
              <Link
                key={idx}
                href={subItem.href}
                className={`block px-3 py-2 text-sm rounded-md ${
                  pathname === subItem.href
                    ? "text-purple-700 font-medium"
                    : "text-gray-600 hover:text-purple-700"
                }`}
              >
                {subItem.name}
              </Link>
            ))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="w-64 h-screen bg-gray-50 border-r border-gray-200 flex flex-col">
      {/* Logo section */}
      <div className="p-5">
        <Link href="/dashboard" className="text-2xl font-serif italic">
          Logo
        </Link>
      </div>

      {/* Main navigation */}
      <div className="flex-grow overflow-y-auto px-4 py-2">
        {/* Dashboard */}
        <div className="mb-2">{renderNavItem(dashboardItem, 0)}</div>

        {/* Quick Access */}
        {renderNavSection("Quick access", quickAccessItems, false)}

        {/* Your Space */}
        {renderNavSection("Your space", userSpaceItems)}

        {/* Free Membership */}
        {renderNavSection("Free Membership", membershipItems)}

        {/* Store */}
        {renderNavSection("Store", storeItems)}

        {/* Resources */}
        {renderNavSection("Resources", resourceItems)}

        {/* Settings */}
        <div className="mt-6">
          <Link
            href="/dashboard/settings"
            className="flex items-center px-3 py-2 text-gray-700 hover:bg-gray-200 rounded-md"
          >
            <Cog6ToothIcon className="h-5 w-5 mr-3" />
            <span className="text-sm font-medium">Settings</span>
          </Link>
        </div>

        {/* Help center */}
        <div className="mt-1">
          <button className="flex items-center px-3 py-2 text-gray-700 hover:bg-gray-200 rounded-md w-full text-left">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5 mr-3"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
            <span className="text-sm font-medium">Help us improve</span>
          </button>
        </div>
      </div>

      {/* User info */}
      <div className="p-4 border-t border-gray-200 flex items-center">
        <div className="w-8 h-8 rounded-full bg-gray-300 mr-3 overflow-hidden">
          <img
            src="/user-avatar.jpg"
            alt="User"
            className="w-full h-full object-cover"
            onError={(e) => {
              // Fallback if image doesn't load
              const target = e.target as HTMLImageElement;
              target.style.display = "none";
            }}
          />
        </div>
        <div className="flex-grow">
          <p className="text-sm font-medium truncate">Alessandra Franc...</p>
          <p className="text-xs text-gray-500 truncate">
            alessandra@thefranc...
          </p>
        </div>
        <button className="ml-2 text-gray-400 hover:text-gray-600">
          <svg
            className="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M9 5l7 7-7 7"
            />
          </svg>
        </button>
      </div>

      {/* Upgrade modal */}
      {showUpgradeModal && (
        <div className="mx-4 mb-4 p-4 bg-white rounded-lg border border-gray-200 relative">
          <button
            className="absolute top-2 right-2 text-gray-400 hover:text-gray-600"
            onClick={() => setShowUpgradeModal(false)}
          >
            <XMarkIcon className="h-4 w-4" />
          </button>
          <h3 className="text-sm font-medium mb-1">Upgrade to Gyani</h3>
          <p className="text-xs text-gray-500 mb-3">
            10-Day Free Trial for Gyani
          </p>
          <button className="w-full bg-purple-600 text-white py-2 rounded-md text-sm font-medium hover:bg-purple-700">
            Upgrade now
          </button>
        </div>
      )}
    </div>
  );
};

export default UserSidebar;

// === ./src/components/dashboard/blog/BlogCategories.tsx ===
"use client";

import { useState, useEffect } from "react";
import {
  PencilIcon,
  TrashIcon,
  PlusIcon,
  ArrowPathIcon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import { blogApi } from "@/lib/strapi";

interface Category {
  id: number;
  attributes: {
    name: string;
    slug: string;
    description?: string;
    createdAt: string;
    updatedAt: string;
  };
}

const BlogCategories = () => {
  const [categories, setCategories] = useState<Category[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [currentCategory, setCurrentCategory] = useState<Category | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    slug: "",
    description: "",
  });

  // Fetch categories
  const fetchCategories = async () => {
    setIsLoading(true);
    setError(null);
    try {
      const categories: any = await blogApi.getCategories()
      setCategories(categories.data);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "An unknown error occurred"
      );
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  // Generate slug from name
  const generateSlug = (name: string): string => {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/(^-|-$)/g, "");
  };

  // Handle input changes
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;

    setFormData((prev) => ({ ...prev, [name]: value }));

    // Auto-generate slug when name changes
    if (
      name === "name" &&
      (!formData.slug || formData.slug === generateSlug(formData.name))
    ) {
      setFormData((prev) => ({ ...prev, slug: generateSlug(value) }));
    }
  };

  // Reset form
  const resetForm = () => {
    setFormData({
      name: "",
      slug: "",
      description: "",
    });
  };

  // Open edit modal with category data
  const handleEdit = (category: Category) => {
    setCurrentCategory(category);
    setFormData({
      name: category.attributes.name,
      slug: category.attributes.slug,
      description: category.attributes.description || "",
    });
    setShowEditModal(true);
  };

  // Open delete modal
  const handleDeleteClick = (category: Category) => {
    setCurrentCategory(category);
    setShowDeleteModal(true);
  };

  // Handle create category
  const handleCreate = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.name.trim() || !formData.slug.trim()) {
      setError("Name and slug are required");
      return;
    }

    try {

      const createdCategory: any = await blogApi.createCategory({
        name: formData.name,
        slug: formData.slug,
        description: formData.description,
      })

      if (!createdCategory.data.id) {
        throw new Error(
          JSON.stringify(createdCategory) || "Failed to create category"
        );
      }

      // Refresh categories and close modal
      setShowAddModal(false);
      resetForm();
      fetchCategories();
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Failed to create category"
      );
    }
  };

  // Handle update category
  const handleUpdate = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!currentCategory) return;

    if (!formData.name.trim() || !formData.slug.trim()) {
      setError("Name and slug are required");
      return;
    }

    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/blog-categories/${currentCategory.id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("jwt")}`,
          },
          body: JSON.stringify({
            data: {
              name: formData.name,
              slug: formData.slug,
              description: formData.description,
            },
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error?.message || "Failed to update category"
        );
      }

      // Refresh categories and close modal
      setShowEditModal(false);
      setCurrentCategory(null);
      resetForm();
      fetchCategories();
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Failed to update category"
      );
    }
  };

  // Handle delete category
  const handleDelete = async () => {
    if (!currentCategory) return;

    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/blog-categories/${currentCategory.id}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("jwt")}`,
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error?.message || "Failed to delete category"
        );
      }

      // Refresh categories and close modal
      setShowDeleteModal(false);
      setCurrentCategory(null);
      fetchCategories();
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Failed to delete category"
      );
    }
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Category form modal (used for both add and edit)
  const CategoryFormModal = ({ isEdit = false }: { isEdit?: boolean }) => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-medium text-gray-900">
            {isEdit ? "Edit Category" : "Add New Category"}
          </h3>
          <button
            onClick={() => {
              isEdit ? setShowEditModal(false) : setShowAddModal(false);
              resetForm();
            }}
            className="text-gray-400 hover:text-gray-600"
          >
            <XMarkIcon className="h-5 w-5" />
          </button>
        </div>

        <form onSubmit={isEdit ? handleUpdate : handleCreate}>
          <div className="mb-4">
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Name <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Category name"
              required
            />
          </div>

          <div className="mb-4">
            <label
              htmlFor="slug"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Slug <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="slug"
              name="slug"
              value={formData.slug}
              onChange={handleChange}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="category-slug"
              required
            />
            <p className="mt-1 text-xs text-gray-500">
              URL-friendly version of the name. Will be auto-generated.
            </p>
          </div>

          <div className="mb-6">
            <label
              htmlFor="description"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Description
            </label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleChange}
              rows={3}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Category description (optional)"
            />
          </div>

          <div className="flex justify-end space-x-3">
            <button
              type="button"
              onClick={() => {
                isEdit ? setShowEditModal(false) : setShowAddModal(false);
                resetForm();
              }}
              className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
            >
              {isEdit ? "Update" : "Create"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );

  // Delete confirmation modal
  const DeleteConfirmationModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          Confirm Delete
        </h3>
        <p className="mb-6 text-gray-600">
          Are you sure you want to delete the category "
          {currentCategory?.attributes.name}"? This action cannot be undone.
        </p>
        <div className="flex justify-end space-x-3">
          <button
            onClick={() => setShowDeleteModal(false)}
            className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            Cancel
          </button>
          <button
            onClick={handleDelete}
            className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <h1 className="text-2xl font-bold text-gray-900 mb-4 sm:mb-0">
          Blog Categories
        </h1>
        <div className="flex space-x-2">
          <button
            onClick={() => setShowAddModal(true)}
            className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
          >
            <PlusIcon className="h-5 w-5 mr-2" />
            New Category
          </button>
          <button
            onClick={fetchCategories}
            className="inline-flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            <ArrowPathIcon className="h-5 w-5" />
          </button>
        </div>
      </div>

      {/* Error message */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      {/* Loading state */}
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
        </div>
      ) : (
        <>
          {/* Categories table */}
          <div className="overflow-x-auto bg-white rounded-lg shadow">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Name
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Slug
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Description
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Created
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {categories.length > 0 ? (
                  categories.map((category) => (
                    <tr key={category.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {category.attributes.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {category.attributes.slug}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 truncate max-w-xs">
                          {category.attributes.description || "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {formatDate(category.attributes.createdAt)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <button
                            onClick={() => handleEdit(category)}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            <PencilIcon className="h-5 w-5" />
                          </button>
                          <button
                            onClick={() => handleDeleteClick(category)}
                            className="text-red-600 hover:text-red-900"
                          >
                            <TrashIcon className="h-5 w-5" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td
                      colSpan={5}
                      className="px-6 py-10 text-center text-gray-500"
                    >
                      No categories found.
                      <button
                        onClick={() => setShowAddModal(true)}
                        className="text-purple-600 hover:underline ml-1"
                      >
                        Create a new category
                      </button>
                      .
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </>
      )}

      {/* Modals */}
      {showAddModal && <CategoryFormModal />}
      {showEditModal && <CategoryFormModal isEdit />}
      {showDeleteModal && <DeleteConfirmationModal />}
    </div>
  );
};

export default BlogCategories;

// === ./src/components/dashboard/blog/BlogIndex.tsx ===
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import {
  PencilIcon,
  TrashIcon,
  PlusIcon,
  ArrowPathIcon,
  EyeIcon,
  StarIcon,
} from "@heroicons/react/24/outline";
import { blogApi } from "@/lib/strapi";

// Updated BlogPost interface to match Strapi collection structure
interface BlogPost {
  id: number;
  attributes: {
    title: string;
    slug: string;
    excerpt: string;
    content: string;
    featuredImage?: {
      data?: {
        id: number;
        attributes: {
          url: string;
          formats: {
            thumbnail: {
              url: string;
            };
          };
        };
      };
    };
    category?: {
      data?: {
        id: number;
        attributes: {
          name: string;
        };
      };
    };
    author?: {
      data?: {
        id: number;
        attributes: {
          name: string;
        };
      };
    };
    readTime?: number;
    isFeatured: boolean;
    hiddenTag?: string;
    createdAt: string;
    updatedAt: string;
    publishedAt: string | null;
  };
}

const BlogIndex = () => {
  const [blogPosts, setBlogPosts] = useState<BlogPost[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [searchQuery, setSearchQuery] = useState("");
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [postToDelete, setPostToDelete] = useState<number | null>(null);

  const fetchBlogPosts = async (page = 1, query = "") => {
    setIsLoading(true);
    try {
      // Using blogApi from strapi.ts instead of direct fetch
      const data: any = await blogApi.getPosts(page, 10, query);
      
      setBlogPosts(data.data);

      // Set pagination info
      if (data.meta?.pagination) {
        setTotalPages(data.meta.pagination.pageCount);
        setCurrentPage(data.meta.pagination.page);
      }
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "An unknown error occurred"
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Initial fetch
  useEffect(() => {
    fetchBlogPosts(currentPage, searchQuery);
  }, [currentPage, searchQuery]);

  // Handle search
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    setCurrentPage(1); // Reset to first page on new search
    fetchBlogPosts(1, searchQuery);
  };

  // Delete blog post
  const deleteBlogPost = async (id: number) => {
    try {
      // Using blogApi from strapi.ts instead of direct fetch
      await blogApi.deletePost(id.toString());

      // Refresh the blog posts list
      fetchBlogPosts(currentPage, searchQuery);
      setShowDeleteModal(false);
      setPostToDelete(null);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to delete post");
    }
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Truncate excerpt for display
  const truncateExcerpt = (text?: string, maxLength = 50) => {
    if (!text) return "-";
    return text.length > maxLength
      ? text.substring(0, maxLength) + "..."
      : text;
  };

  // Confirm delete modal
  const DeleteConfirmationModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          Confirm Delete
        </h3>
        <p className="mb-6 text-gray-600">
          Are you sure you want to delete this blog post? This action cannot be
          undone.
        </p>
        <div className="flex justify-end space-x-3">
          <button
            onClick={() => setShowDeleteModal(false)}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
          >
            Cancel
          </button>
          <button
            onClick={() =>
              postToDelete !== null && deleteBlogPost(postToDelete)
            }
            className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <h1 className="text-2xl font-bold text-gray-900 mb-4 sm:mb-0">
          Blog Posts
        </h1>
        <div className="flex space-x-2">
          <Link
            href="/dashboard/admin/blog/create"
            className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
          >
            <PlusIcon className="h-5 w-5 mr-2" />
            New Post
          </Link>
          <button
            onClick={() => fetchBlogPosts(currentPage, searchQuery)}
            className="inline-flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            <ArrowPathIcon className="h-5 w-5" />
          </button>
        </div>
      </div>

      {/* Search bar */}
      <div className="mb-6">
        <form onSubmit={handleSearch} className="flex">
          <input
            type="text"
            placeholder="Search blog posts..."
            className="px-4 py-2 border border-gray-300 rounded-l-md flex-grow focus:outline-none focus:ring-2 focus:ring-purple-500"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          <button
            type="submit"
            className="px-4 py-2 bg-purple-600 text-white rounded-r-md hover:bg-purple-700"
          >
            Search
          </button>
        </form>
      </div>

      {/* Error message */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      {/* Loading state */}
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
        </div>
      ) : (
        <>
          {/* Blog posts table */}
          <div className="overflow-x-auto bg-white rounded-lg shadow">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Title
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Excerpt
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Category
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Author
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Date
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Status
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {blogPosts.length > 0 ? (
                  blogPosts.map((post) => (
                    <tr key={post.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          {post.attributes.isFeatured && (
                            <StarIcon className="h-4 w-4 text-yellow-500 mr-1" />
                          )}
                          <div className="text-sm font-medium text-gray-900 truncate max-w-xs">
                            {post.attributes.title}
                          </div>
                        </div>
                        {post.attributes.hiddenTag && (
                          <span className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800 mt-1">
                            {post.attributes.hiddenTag}
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 truncate max-w-xs">
                          {truncateExcerpt(post.attributes.excerpt)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {post.attributes.category?.data?.attributes.name ||
                            "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {post.attributes.author?.data?.attributes.name || "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {formatDate(post.attributes.createdAt)}
                        </div>
                        {post.attributes.readTime && (
                          <div className="text-xs text-gray-400">
                            {post.attributes.readTime} min read
                          </div>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            post.attributes.publishedAt
                              ? "bg-green-100 text-green-800"
                              : "bg-yellow-100 text-yellow-800"
                          }`}
                        >
                          {post.attributes.publishedAt ? "Published" : "Draft"}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <Link
                            href={`/blog/${post.attributes.slug}`}
                            target="_blank"
                            className="text-indigo-600 hover:text-indigo-900"
                          >
                            <EyeIcon className="h-5 w-5" />
                          </Link>
                          <Link
                            href={`/dashboard/admin/blog/edit/${post.id}`}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            <PencilIcon className="h-5 w-5" />
                          </Link>
                          <button
                            onClick={() => {
                              setPostToDelete(post.id);
                              setShowDeleteModal(true);
                            }}
                            className="text-red-600 hover:text-red-900"
                          >
                            <TrashIcon className="h-5 w-5" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td
                      colSpan={7}
                      className="px-6 py-10 text-center text-gray-500"
                    >
                      No blog posts found.{" "}
                      {searchQuery && "Try a different search term or "}
                      <Link
                        href="/dashboard/admin/blog/create"
                        className="text-purple-600 hover:underline"
                      >
                        create a new post
                      </Link>
                      .
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="mt-6 flex justify-center">
              <nav className="flex items-center" aria-label="Pagination">
                <button
                  onClick={() =>
                    setCurrentPage((prev) => Math.max(prev - 1, 1))
                  }
                  disabled={currentPage === 1}
                  className={`relative inline-flex items-center px-4 py-2 mr-2 text-sm font-medium rounded-md ${
                    currentPage === 1
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-white text-gray-700 hover:bg-gray-50"
                  } border border-gray-300`}
                >
                  Previous
                </button>
                <span className="text-sm text-gray-700">
                  Page {currentPage} of {totalPages}
                </span>
                <button
                  onClick={() =>
                    setCurrentPage((prev) => Math.min(prev + 1, totalPages))
                  }
                  disabled={currentPage === totalPages}
                  className={`relative inline-flex items-center px-4 py-2 ml-2 text-sm font-medium rounded-md ${
                    currentPage === totalPages
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-white text-gray-700 hover:bg-gray-50"
                  } border border-gray-300`}
                >
                  Next
                </button>
              </nav>
            </div>
          )}
        </>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && <DeleteConfirmationModal />}
    </div>
  );
};

export default BlogIndex;
// === ./src/components/dashboard/blog/BlogPostForm.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import ReactMarkdown from "react-markdown";
import {
  HashtagIcon,
  CodeBracketIcon,
  ListBulletIcon,
  LinkIcon,
  PhotoIcon,
} from "@heroicons/react/24/outline";
import { useRouter } from "next/navigation";
import {
  ArrowLeftIcon,
  ExclamationCircleIcon,
  ArrowPathIcon,
} from "@heroicons/react/24/outline";
import Link from "next/link";
import { fetchAPI, blogApi } from "@/lib/strapi";

interface Category {
  id: number;
  attributes: {
    name: string;
    slug: string;
  };
}

interface BlogFormProps {
  postId?: string; // Optional for editing existing posts
}

const BlogPostForm = ({ postId }: BlogFormProps) => {
  const router = useRouter();
  const isEditMode = !!postId;

  // Form state
  const [formData, setFormData] = useState({
    title: "",
    slug: "",
    content: "",
    excerpt: "",
    categoryId: "",
    author: "",
    readTime: 0,
    isFeatured: false,
    hiddenTag: "",
    metaTitle: "",
    metaDescription: "",
    keywords: "",
    canonicalUrl: "",
    publishImmediately: false,
  });

  const [showPreview, setShowPreview] = useState(false);
  const [showHeadingMenu, setShowHeadingMenu] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const [urlError, setUrlError] = useState<string | null>(null);

  // File upload state
  const [featuredImage, setFeaturedImage] = useState<File | null>(null);
  const [metaImage, setMetaImage] = useState<File | null>(null);
  const [currentFeaturedImage, setCurrentFeaturedImage] = useState<
    string | null
  >(null);
  const [currentMetaImage, setCurrentMetaImage] = useState<string | null>(null);
  const [isDraggingOver, setIsDraggingOver] = useState(false);
  const [isUploadingImage, setIsUploadingImage] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  // UI state
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [categories, setCategories] = useState<Category[]>([]);
  const [successMessage, setSuccessMessage] = useState("");
  const [showSeoFields, setShowSeoFields] = useState(false);

  // Fetch categories
  useEffect(() => {
    // In your useEffect that fetches categories
    const fetchCategories = async () => {
      try {
        // Use the fetchAPI helper
        const data: any = await fetchAPI("/api/blog-categories");
        console.log("Categories API response:", data);
        setCategories(data.data);
      } catch (error) {
        console.error("Error fetching categories:", error);
        setCategories([]);
      }
    };

    fetchCategories();
  }, []);

  // If in edit mode, fetch the existing post
  useEffect(() => {
    if (isEditMode) {
      const fetchPost = async () => {
        setIsLoading(true);
        try {
          // Use blogApi helper instead of direct fetch
          const { data }: any = await blogApi.getPost(postId!);

          // Get the featured image URL if it exists
          let featuredImageUrl = null;
          if (data.attributes.featuredImage?.data) {
            featuredImageUrl = `${process.env.NEXT_PUBLIC_STRAPI_URL || ""}${
              data.attributes.featuredImage.data.attributes.url
            }`;
            setCurrentFeaturedImage(featuredImageUrl);
          }

          // Get the meta image URL if it exists
          let metaImageUrl = null;
          if (data.attributes.seo?.metaImage?.data) {
            metaImageUrl = `${process.env.NEXT_PUBLIC_STRAPI_URL || ""}${
              data.attributes.seo.metaImage.data.attributes.url
            }`;
            setCurrentMetaImage(metaImageUrl);
          }

          setFormData({
            title: data.attributes.title || "",
            slug: data.attributes.slug || "",
            content: data.attributes.content || "",
            excerpt: data.attributes.excerpt || "",
            categoryId: data.attributes.category?.data?.id.toString() || "",
            author: data.attributes.author?.data?.attributes.name || "",
            readTime: data.attributes.readTime || 0,
            isFeatured: data.attributes.isFeatured || false,
            hiddenTag: data.attributes.hiddenTag || "",
            metaTitle: data.attributes.seo?.metaTitle || "",
            metaDescription: data.attributes.seo?.metaDescription || "",
            keywords: data.attributes.seo?.keywords || "",
            canonicalUrl: data.attributes.seo?.canonicalURL || "",
            publishImmediately: !!data.attributes.publishedAt,
          });

          // Expand SEO fields if they have data
          if (
            data.attributes.seo?.metaTitle ||
            data.attributes.seo?.metaDescription ||
            data.attributes.seo?.keywords ||
            data.attributes.seo?.canonicalURL ||
            data.attributes.seo?.metaImage
          ) {
            setShowSeoFields(true);
          }
        } catch (error) {
          console.error("Error fetching post:", error);
          setErrors({ form: "Failed to load blog post" });
        } finally {
          setIsLoading(false);
        }
      };

      fetchPost();
    }
  }, [isEditMode, postId]);

  // Generate slug from title
  const generateSlug = (title: string): string => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/(^-|-$)/g, "");
  };

  // Handle input changes
  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;

    setFormData((prev) => ({ ...prev, [name]: value }));

    // Auto-generate slug when title changes
    if (
      name === "title" &&
      (!formData.slug || formData.slug === generateSlug(formData.title))
    ) {
      setFormData((prev) => ({ ...prev, slug: generateSlug(value) }));
    }

    // Validate canonical URL
    if (name === "canonicalUrl") {
      if (value && !isValidUrl(value)) {
        setUrlError(
          "Please enter a valid URL (e.g., https://example.com/page)"
        );
      } else {
        setUrlError(null);
      }
    }

    // Clear error when field is edited
    if (errors[name]) {
      setErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // Helper function to handle list continuation
  const handleContentKeyDown = (
    e: React.KeyboardEvent<HTMLTextAreaElement>
  ) => {
    // Allow default behavior for copy/paste shortcuts
    if (
      (e.metaKey || e.ctrlKey) &&
      (e.key === "c" || e.key === "v" || e.key === "x")
    ) {
      return; // Let the browser handle copy/paste/cut
    }

    // Handle tab key for indentation
    if (e.key === "Tab") {
      e.preventDefault(); // Prevent moving focus to the next element

      if (!textareaRef.current) return;

      const textarea = textareaRef.current;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const value = textarea.value;

      // If text is selected, indent each line in the selection
      if (start !== end) {
        const selectedText = value.substring(start, end);
        const lines = selectedText.split("\n");

        // Handle shift+tab (outdent)
        if (e.shiftKey) {
          const outdentedLines = lines.map((line) => {
            if (line.startsWith("    ")) {
              return line.substring(4); // Remove 4 spaces
            } else if (line.startsWith("\t")) {
              return line.substring(1); // Remove 1 tab
            } else if (line.startsWith("  ")) {
              return line.substring(2); // Remove 2 spaces
            }
            return line;
          });

          const newText = outdentedLines.join("\n");
          const newContent =
            value.substring(0, start) + newText + value.substring(end);

          setFormData({ ...formData, content: newContent });

          // Set selection to maintain the same range
          setTimeout(() => {
            if (textareaRef.current) {
              textareaRef.current.selectionStart = start;
              textareaRef.current.selectionEnd = start + newText.length;
            }
          }, 0);
        }
        // Regular tab (indent)
        else {
          const indentedLines = lines.map((line) => "    " + line);
          const newText = indentedLines.join("\n");
          const newContent =
            value.substring(0, start) + newText + value.substring(end);

          setFormData({ ...formData, content: newContent });

          // Set selection to maintain the same range
          setTimeout(() => {
            if (textareaRef.current) {
              textareaRef.current.selectionStart = start;
              textareaRef.current.selectionEnd = start + newText.length;
            }
          }, 0);
        }
      }
      // No selection, just insert indentation at cursor position
      else {
        const newContent =
          value.substring(0, start) +
          "    " + // Insert 4 spaces
          value.substring(end);

        setFormData({ ...formData, content: newContent });

        // Place cursor after the inserted indentation
        setTimeout(() => {
          if (textareaRef.current) {
            textareaRef.current.selectionStart = start + 4;
            textareaRef.current.selectionEnd = start + 4;
          }
        }, 0);
      }
    }

    if (e.key === "Enter") {
      const textarea = e.currentTarget;
      const { value, selectionStart } = textarea;

      // Get the current line
      const currentLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const currentLine = value.substring(currentLineStart, selectionStart);

      // Check if it's a list item
      const listItemMatch = currentLine.match(/^(\s*)([-*+]|\d+\.)\s+(.*)$/);

      if (listItemMatch) {
        // If the list item is empty (just the bullet/number), end the list
        if (!listItemMatch[3].trim()) {
          e.preventDefault();
          const beforeCursor = value.substring(0, currentLineStart);
          const afterCursor = value.substring(selectionStart);
          setFormData({
            ...formData,
            content: beforeCursor + "\n" + afterCursor,
          });

          // Set cursor position after the inserted newline
          setTimeout(() => {
            if (textareaRef.current) {
              textareaRef.current.selectionStart = currentLineStart + 1;
              textareaRef.current.selectionEnd = currentLineStart + 1;
            }
          }, 0);
        } else {
          // Continue the list with a new bullet/number
          e.preventDefault();
          const [, indent, bullet] = listItemMatch;
          const isNumbered = /^\d+\./.test(bullet);

          let newBullet;
          if (isNumbered) {
            const num = parseInt(bullet, 10);
            newBullet = `${num + 1}.`;
          } else {
            newBullet = bullet;
          }

          const insertion = `\n${indent}${newBullet} `;
          const newContent =
            value.substring(0, selectionStart) +
            insertion +
            value.substring(selectionStart);

          setFormData({ ...formData, content: newContent });

          // Set cursor position after the inserted list item
          setTimeout(() => {
            if (textareaRef.current) {
              textareaRef.current.selectionStart =
                selectionStart + insertion.length;
              textareaRef.current.selectionEnd =
                selectionStart + insertion.length;
            }
          }, 0);
        }
      }
    }
  };

  // Helper function to format selected text
  const formatSelectedText = (format: string) => {
    if (!textareaRef.current) return;

    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    const text = textarea.value;
    let newText = text;
    let cursorOffset = 0;

    switch (format) {
      case "bold":
        newText =
          text.substring(0, start) +
          `**${selectedText}**` +
          text.substring(end);
        cursorOffset = 2;
        break;
      case "italic":
        newText =
          text.substring(0, start) + `*${selectedText}*` + text.substring(end);
        cursorOffset = 1;
        break;
      case "h1":
        // For headings, ensure it starts on a new line
        if (start === 0 || text[start - 1] === "\n") {
          newText =
            text.substring(0, start) +
            `# ${selectedText}` +
            text.substring(end);
          cursorOffset = 2;
        } else {
          newText =
            text.substring(0, start) +
            `\n# ${selectedText}` +
            text.substring(end);
          cursorOffset = 3;
        }
        break;
      case "h2":
        if (start === 0 || text[start - 1] === "\n") {
          newText =
            text.substring(0, start) +
            `## ${selectedText}` +
            text.substring(end);
          cursorOffset = 3;
        } else {
          newText =
            text.substring(0, start) +
            `\n## ${selectedText}` +
            text.substring(end);
          cursorOffset = 4;
        }
        break;
      case "h3":
        if (start === 0 || text[start - 1] === "\n") {
          newText =
            text.substring(0, start) +
            `### ${selectedText}` +
            text.substring(end);
          cursorOffset = 4;
        } else {
          newText =
            text.substring(0, start) +
            `\n### ${selectedText}` +
            text.substring(end);
          cursorOffset = 5;
        }
        break;
      case "link":
        newText =
          text.substring(0, start) +
          `[${selectedText || "Link text"}](https://example.com)` +
          text.substring(end);
        cursorOffset = selectedText ? 1 : 10;
        break;
      case "list":
        // If selected text spans multiple lines, format each line as a list item
        if (selectedText.includes("\n")) {
          const lines = selectedText.split("\n");
          const formattedLines = lines.map((line) => `- ${line}`).join("\n");
          newText =
            text.substring(0, start) + formattedLines + text.substring(end);
        } else {
          newText =
            text.substring(0, start) +
            `- ${selectedText}` +
            text.substring(end);
        }
        cursorOffset = 2;
        break;
      case "code":
        // Format code block properly ensuring it's on its own lines
        if (selectedText.includes("\n")) {
          // For multiline selection, wrap in code fence
          if (start === 0 || text[start - 1] === "\n") {
            newText =
              text.substring(0, start) +
              "```\n" +
              selectedText +
              "\n```" +
              text.substring(end);
          } else {
            newText =
              text.substring(0, start) +
              "\n```\n" +
              selectedText +
              "\n```" +
              text.substring(end);
          }
          cursorOffset = 4;
        } else {
          // For single line, use inline code
          newText =
            text.substring(0, start) +
            "`" +
            selectedText +
            "`" +
            text.substring(end);
          cursorOffset = 1;
        }
        break;
      case "codeblock":
        // Always insert a code fence block
        if (start === 0 || text[start - 1] === "\n") {
          newText =
            text.substring(0, start) +
            "```\n" +
            selectedText +
            "\n```" +
            text.substring(end);
        } else {
          newText =
            text.substring(0, start) +
            "\n```\n" +
            selectedText +
            "\n```" +
            text.substring(end);
        }
        cursorOffset = 4;
        break;
      case "image":
        // For images, insert the markdown image syntax
        newText =
          text.substring(0, start) +
          `![${selectedText || "Image"}](image_url)` +
          text.substring(end);
        cursorOffset = selectedText ? 2 : 7;
        break;
    }

    setFormData({ ...formData, content: newText });

    // Set cursor position after formatting
    setTimeout(() => {
      if (textareaRef.current) {
        if (start === end) {
          // If no text was selected, place cursor in the meaningful position
          const cursorPos = start + cursorOffset;
          textareaRef.current.selectionStart = cursorPos;
          textareaRef.current.selectionEnd = cursorPos;
        } else {
          // If text was selected, place cursor at the end of the formatted block
          let cursorPos;
          if (format === "code" && selectedText.includes("\n")) {
            // For code blocks with multiple lines, place cursor after the closing ```
            cursorPos = start + selectedText.length + 8; // Account for ```\n and \n```
          } else if (format === "codeblock") {
            cursorPos = start + selectedText.length + 8; // Account for ```\n and \n```
          } else if (
            format.startsWith("h") &&
            (start === 0 || text[start - 1] !== "\n")
          ) {
            // For headings that needed a newline added
            cursorPos = end + cursorOffset + 1;
          } else {
            cursorPos = end + cursorOffset * 2;
          }
          textareaRef.current.selectionStart = cursorPos;
          textareaRef.current.selectionEnd = cursorPos;
        }
        textareaRef.current.focus();
      }
    }, 0);
  };

  // Insert image markdown at cursor position
  const insertImageMarkdown = (imageUrl: string, altText = "Image") => {
    if (!textareaRef.current) return;

    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const text = textarea.value;

    // Create image markdown
    const imageMarkdown = `![${altText}](${imageUrl})`;

    // Insert at cursor position
    const newContent =
      text.substring(0, start) + imageMarkdown + text.substring(end);

    setFormData({ ...formData, content: newContent });

    // Set cursor position after the inserted image markdown
    setTimeout(() => {
      if (textareaRef.current) {
        const newCursorPos = start + imageMarkdown.length;
        textareaRef.current.selectionStart = newCursorPos;
        textareaRef.current.selectionEnd = newCursorPos;
        textareaRef.current.focus();
      }
    }, 0);
  };

  // Upload image to Strapi and get the URL
  const uploadImageToStrapi = async (file: File): Promise<string> => {
    setIsUploadingImage(true);
    setUploadProgress(0);

    try {
      const formData = new FormData();
      formData.append("files", file);

      // Simulate progress for better UX
      const progressInterval = setInterval(() => {
        setUploadProgress((prev) => Math.min(prev + 10, 90));
      }, 200);

      // Get API URL from environment variable
      const apiUrl =
        process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";

      // Get the token - try multiple sources
      const token =
        process.env.NEXT_PUBLIC_STRAPI_TOKEN ||
        process.env.NEXT_PUBLIC_STRAPI_API_TOKEN ||
        localStorage.getItem("jwt");

      if (!token) {
        throw new Error("Authentication token not found");
      }

      // Direct fetch instead of using fetchAPI helper
      const response = await fetch(`${apiUrl}/api/upload`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          // Don't set Content-Type header as it's automatically set by FormData
        },
        body: formData,
      });

      clearInterval(progressInterval);

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        console.error("Strapi upload response:", response.status, errorData);
        throw new Error(
          errorData?.error?.message ||
            `Upload failed with status: ${response.status}`
        );
      }

      const uploadResult = await response.json();
      console.log("Upload result:", uploadResult);

      // Get the URL of the uploaded image
      if (
        uploadResult &&
        Array.isArray(uploadResult) &&
        uploadResult[0] &&
        uploadResult[0].url
      ) {
        let imageUrl = uploadResult[0].url;

        // Check if the URL is already absolute (starts with http or https)
        if (imageUrl.startsWith("http://") || imageUrl.startsWith("https://")) {
          // For Cloudinary or other external providers, use the URL as is
          setUploadProgress(100);
          return imageUrl;
        } else {
          // For local storage, prepend the API URL
          imageUrl = `${apiUrl}${imageUrl}`;
          setUploadProgress(100);
          return imageUrl;
        }
      } else {
        console.error("Unexpected upload response format:", uploadResult);
        throw new Error("Failed to get image URL from upload response");
      }
    } catch (error) {
      console.error("Error uploading image:", error);
      alert(
        `Failed to upload image: ${
          error instanceof Error ? error.message : "Unknown error"
        }`
      );
      throw error;
    } finally {
      // Reset upload state after a short delay to show complete progress
      setTimeout(() => {
        setIsUploadingImage(false);
        setUploadProgress(0);
      }, 500);
    }
  };

  // Handle file drop
  const handleDrop = async (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDraggingOver(false);

    const files = e.dataTransfer.files;
    if (files.length === 0) return;

    // Process each dropped file
    for (let i = 0; i < files.length; i++) {
      const file = files[i];

      // Check if it's an image
      if (!file.type.startsWith("image/")) {
        alert(`File "${file.name}" is not an image`);
        continue;
      }

      try {
        // Upload the image and get its URL
        const imageUrl = await uploadImageToStrapi(file);

        // Insert image markdown at cursor position
        insertImageMarkdown(imageUrl, file.name.split(".")[0]);
      } catch (error) {
        console.error(`Error processing image "${file.name}":`, error);
        alert(`Failed to upload image "${file.name}". Please try again.`);
      }
    }
  };

  // Handle drag events
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDraggingOver(true);
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDraggingOver(false);
  };

  // Handle pasting images
  const handlePaste = async (e: React.ClipboardEvent<HTMLTextAreaElement>) => {
    const items = e.clipboardData.items;

    for (let i = 0; i < items.length; i++) {
      const item = items[i];

      // Check if the pasted content is an image
      if (item.type.indexOf("image") !== -1) {
        e.preventDefault(); // Prevent the default paste behavior

        const file = item.getAsFile();
        if (!file) continue;

        try {
          // Upload the image and get its URL
          const imageUrl = await uploadImageToStrapi(file);

          // Insert image markdown at cursor position
          insertImageMarkdown(imageUrl, "Pasted image");
        } catch (error) {
          console.error("Error processing pasted image:", error);
          alert("Failed to upload pasted image. Please try again.");
        }

        // Only process the first image in the clipboard
        break;
      }
    }
  };

  // Handle manual image upload via button
  const handleImageUploadClick = async () => {
    // Create an input element
    const input = document.createElement("input");
    input.type = "file";
    input.accept = "image/*";

    // Handle file selection
    input.onchange = async (e) => {
      const files = (e.target as HTMLInputElement).files;
      if (!files || files.length === 0) return;

      const file = files[0];

      try {
        console.log("Selected file:", file.name, file.type, file.size);

        // Upload the image and get its URL
        const imageUrl = await uploadImageToStrapi(file);

        // Insert image markdown at cursor position
        insertImageMarkdown(imageUrl, file.name.split(".")[0]);

        console.log("Successfully uploaded and inserted image:", file.name);
      } catch (error) {
        // Error is already logged and alerted in uploadImageToStrapi
        console.error("Failed to process selected image");
        // Don't show another alert as the upload function already shows one
      }
    };

    // Trigger file browser
    input.click();
  };

  // Function to detect and apply markdown syntax on selection and shortcut keys
  const handleKeyUp = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    // Check if user has typed markdown syntax and selected text
    if (textareaRef.current) {
      const textarea = textareaRef.current;
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const text = textarea.value;

      // Only process if there's selected text
      if (start !== end) {
        const selectedText = text.substring(start, end);

        // Get the current line start
        const currentLineStart = text.lastIndexOf("\n", start - 1) + 1;

        // If user types ** at the beginning and end of selection, apply bold
        if (
          text.substring(start - 2, start) === "**" &&
          text.substring(end, end + 2) === "**"
        ) {
          // Remove the markdown syntax and apply formatting
          const newText =
            text.substring(0, start - 2) +
            selectedText +
            text.substring(end + 2);

          setFormData({ ...formData, content: newText });

          // Apply bold formatting programmatically
          formatSelectedText("bold");
        }

        // If user types * at the beginning and end of selection, apply italic
        else if (
          text.substring(start - 1, start) === "*" &&
          text.substring(end, end + 1) === "*" &&
          text.substring(start - 2, start) !== "**" &&
          text.substring(end, end + 2) !== "**"
        ) {
          // Remove the markdown syntax and apply formatting
          const newText =
            text.substring(0, start - 1) +
            selectedText +
            text.substring(end + 1);

          setFormData({ ...formData, content: newText });

          // Apply italic formatting programmatically
          formatSelectedText("italic");
        }

        // If user types # at the beginning of a line with selected text
        else if (text.substring(currentLineStart, start) === "# ") {
          // Apply heading formatting
          formatSelectedText("h1");
        } else if (text.substring(currentLineStart, start) === "## ") {
          // Apply heading formatting
          formatSelectedText("h2");
        } else if (text.substring(currentLineStart, start) === "### ") {
          // Apply heading formatting
          formatSelectedText("h3");
        }
      }
    }
  };

  // Handle checkbox changes
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setFormData((prev) => ({ ...prev, [name]: checked }));
  };

  // Handle file changes
  const handleFileChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: "featuredImage" | "metaImage"
  ) => {
    const file = e.target.files?.[0] || null;
    if (type === "featuredImage") {
      setFeaturedImage(file);
    } else {
      setMetaImage(file);
    }
  };

  // Handle URL changes
  const isValidUrl = (url: string): boolean => {
    if (!url.trim()) return true; // Empty URL is considered valid (just not filled)

    try {
      // Try to create a URL object - this will throw an error for invalid URLs
      new URL(url);
      return true;
    } catch (error) {
      return false;
    }
  };

  // Validate form
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = "Title is required";
    }

    if (!formData.slug.trim()) {
      newErrors.slug = "Slug is required";
    } else if (!/^[a-z0-9-]+$/.test(formData.slug)) {
      newErrors.slug =
        "Slug can only contain lowercase letters, numbers, and hyphens";
    }

    if (!formData.content.trim()) {
      newErrors.content = "Content is required";
    }

    if (!formData.excerpt.trim()) {
      newErrors.excerpt = "Excerpt is required";
    }

    if (!formData.categoryId) {
      newErrors.categoryId = "Category is required";
    }

    // Check canonical URL
    if (formData.canonicalUrl && !isValidUrl(formData.canonicalUrl)) {
      newErrors.canonicalUrl = "Please enter a valid URL";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Upload a file to Strapi
  const uploadFile = async (file: File): Promise<number> => {
    try {
      console.log("Starting file upload:", file.name);
      const formData = new FormData();
      formData.append("files", file);

      // Get API URL from environment variable
      const apiUrl =
        process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";

      // Get the token
      const token =
        process.env.NEXT_PUBLIC_STRAPI_API_TOKEN ||
        process.env.NEXT_PUBLIC_STRAPI_TOKEN;

      if (!token) {
        throw new Error("Authentication token not found");
      }

      // Direct fetch for file upload
      const response = await fetch(`${apiUrl}/api/upload`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        console.error("Strapi upload response:", response.status, errorData);
        throw new Error(
          errorData?.error?.message ||
            `Upload failed with status: ${response.status}`
        );
      }

      const uploadResult = await response.json();
      console.log("Upload result:", uploadResult);

      // Return just the ID of the first uploaded file
      if (Array.isArray(uploadResult) && uploadResult.length > 0) {
        return uploadResult[0].id;
      } else {
        throw new Error("Invalid upload response format");
      }
    } catch (error) {
      console.error("Upload error:", error);
      throw error;
    }
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsSaving(true);
    setSuccessMessage("");

    try {
      // First upload any images
      let featuredImageId = null;
      let metaImageId = null;

      if (featuredImage) {
        try {
          console.log("Attempting to upload featured image...");
          featuredImageId = await uploadFile(featuredImage);
          console.log(
            "Featured image uploaded successfully, ID:",
            featuredImageId
          );
        } catch (uploadError) {
          console.error("Featured image upload failed:", uploadError);
          setErrors({
            form: "Failed to upload featured image. Please try again or skip adding an image.",
          });
          setIsSaving(false);
          return;
        }
      }

      if (metaImage) {
        try {
          metaImageId = await uploadFile(metaImage);
          console.log("Meta image uploaded successfully, ID:", metaImageId);
        } catch (uploadError) {
          console.error("Meta image upload failed:", uploadError);
          // Continue with form submission even if meta image fails
        }
      }

      // Prepare request body with all the fields
      const postData = {
        title: formData.title,
        slug: formData.slug,
        content: formData.content,
        excerpt: formData.excerpt,
        category: formData.categoryId
          ? { connect: [parseInt(formData.categoryId)] }
          : undefined,
        readTime: formData.readTime || undefined,
        isFeatured: formData.isFeatured,
        hiddenTag: formData.hiddenTag || undefined,

        // Handle SEO fields
        seo: {
          metaTitle: formData.metaTitle || undefined,
          metaDescription: formData.metaDescription || undefined,
          keywords: formData.keywords || undefined,
          canonicalURL: formData.canonicalUrl || undefined,
          ...(metaImageId ? { metaImage: metaImageId } : {}),
        },

        // Handle featured image - use direct ID as per Strapi docs
        ...(featuredImageId ? { featuredImage: featuredImageId } : {}),

        // Handle published state
        publishedAt: formData.publishImmediately
          ? new Date().toISOString()
          : null,
      };

      console.log("Submitting blog post data:", postData);

      // Use blogApi helpers
      if (isEditMode) {
        await blogApi.updatePost(postId!, postData);
      } else {
        await blogApi.createPost(postData);
      }

      setSuccessMessage(
        isEditMode
          ? "Blog post updated successfully!"
          : "Blog post created successfully!"
      );

      // If creating a new post, redirect after a brief delay
      if (!isEditMode) {
        setTimeout(() => {
          router.push("/dashboard/admin/blog");
        }, 1500);
      }
    } catch (error) {
      console.error("Error saving post:", error);
      setErrors({
        form:
          error instanceof Error ? error.message : "An unknown error occurred",
      });
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
      </div>
    );
  }

  // Return statement for BlogPostForm component
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex items-center">
        <Link
          href="/dashboard/admin/blog"
          className="mr-4 text-gray-600 hover:text-gray-900"
        >
          <ArrowLeftIcon className="h-5 w-5" />
        </Link>
        <h1 className="text-2xl font-bold text-gray-900">
          {isEditMode ? "Edit Blog Post" : "Create New Blog Post"}
        </h1>
      </div>

      {/* Success message */}
      {successMessage && (
        <div className="mb-6 p-4 bg-green-100 text-green-700 rounded-md">
          {successMessage}
        </div>
      )}

      {/* Error message */}
      {errors.form && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {errors.form}
        </div>
      )}

      <form
        onSubmit={handleSubmit}
        className="bg-white shadow-md rounded-lg p-6"
      >
        {/* Title */}
        <div className="mb-6">
          <label
            htmlFor="title"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.title
                ? "border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:ring-purple-500"
            }`}
            placeholder="Enter post title"
          />
          {errors.title && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.title}
            </p>
          )}
        </div>

        {/* Slug */}
        <div className="mb-6">
          <label
            htmlFor="slug"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Slug <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="slug"
            name="slug"
            value={formData.slug}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.slug
                ? "border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:ring-purple-500"
            }`}
            placeholder="enter-post-slug"
          />
          {errors.slug && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.slug}
            </p>
          )}
          <p className="mt-1 text-xs text-gray-500">
            The URL-friendly version of the title. Will be automatically
            generated from the title.
          </p>
        </div>

        {/* Category */}
        <div className="mb-6">
          <label
            htmlFor="categoryId"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Category <span className="text-red-500">*</span>
          </label>
          <select
            id="categoryId"
            name="categoryId"
            value={formData.categoryId}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.categoryId
                ? "border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:ring-purple-500"
            }`}
          >
            <option value="">Select a category</option>
            {categories.map((category) => (
              <option key={category.id} value={category.id}>
                {category.attributes.name}
              </option>
            ))}
          </select>
          {errors.categoryId && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.categoryId}
            </p>
          )}
        </div>

        {/* Excerpt */}
        <div className="mb-6">
          <label
            htmlFor="excerpt"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Excerpt <span className="text-red-500">*</span>
          </label>
          <textarea
            id="excerpt"
            name="excerpt"
            value={formData.excerpt}
            onChange={handleChange}
            rows={3}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.excerpt
                ? "border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:ring-purple-500"
            }`}
            placeholder="Brief summary of the post"
          />
          {errors.excerpt && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.excerpt}
            </p>
          )}
          <p className="mt-1 text-xs text-gray-500">
            A short summary that will appear in blog listings and search
            results.
          </p>
        </div>

        {/* Content - Enhanced Rich Text Editor with Drag & Drop Image Support */}
        <div className="mb-6">
          <label
            htmlFor="content"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Content <span className="text-red-500">*</span>
          </label>
          <div
            className={`border ${
              isDraggingOver
                ? "border-purple-500 bg-purple-50"
                : "border-gray-300"
            } rounded-md overflow-hidden`}
            onDragOver={handleDragOver}
            onDragLeave={handleDragLeave}
            onDrop={handleDrop}
          >
            <div className="bg-gray-50 px-3 py-2 border-b border-gray-300 flex justify-between items-center">
              <span className="text-xs text-gray-500">Markdown Editor</span>
              <div className="flex space-x-2">
                <button
                  type="button"
                  onClick={() => formatSelectedText("bold")}
                  title="Bold"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <strong className="text-xs">B</strong>
                </button>
                <button
                  type="button"
                  onClick={() => formatSelectedText("italic")}
                  title="Italic"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <em className="text-xs">I</em>
                </button>

                {/* Heading dropdown */}
                <div className="relative">
                  <button
                    type="button"
                    onClick={() => setShowHeadingMenu(!showHeadingMenu)}
                    title="Headings"
                    className="p-1 rounded hover:bg-gray-200 flex items-center"
                  >
                    <HashtagIcon className="h-4 w-4" />
                  </button>

                  {showHeadingMenu && (
                    <div className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded shadow-lg z-10">
                      <button
                        type="button"
                        onClick={() => {
                          formatSelectedText("h1");
                          setShowHeadingMenu(false);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                      >
                        <span className="font-bold text-lg">Heading 1</span>
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          formatSelectedText("h2");
                          setShowHeadingMenu(false);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                      >
                        <span className="font-bold text-base">Heading 2</span>
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          formatSelectedText("h3");
                          setShowHeadingMenu(false);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                      >
                        <span className="font-bold text-sm">Heading 3</span>
                      </button>
                    </div>
                  )}
                </div>

                <button
                  type="button"
                  onClick={() => formatSelectedText("link")}
                  title="Link"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <LinkIcon className="h-4 w-4" />
                </button>

                <button
                  type="button"
                  onClick={() => formatSelectedText("list")}
                  title="List"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <ListBulletIcon className="h-4 w-4" />
                </button>

                <button
                  type="button"
                  onClick={() => formatSelectedText("codeblock")}
                  title="Code Block"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <CodeBracketIcon className="h-4 w-4" />
                </button>

                {/* Add Image button */}
                <button
                  type="button"
                  onClick={handleImageUploadClick}
                  title="Insert Image"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <PhotoIcon className="h-4 w-4" />
                </button>
              </div>
            </div>

            <div className="relative">
              {/* Editor */}
              {!showPreview && (
                <>
                  <textarea
                    ref={textareaRef}
                    id="content"
                    name="content"
                    value={formData.content}
                    onChange={handleChange}
                    onKeyDown={handleContentKeyDown}
                    onKeyUp={handleKeyUp}
                    onPaste={handlePaste}
                    rows={15}
                    className={`w-full px-4 py-2 border-0 focus:outline-none focus:ring-0 ${
                      errors.content ? "bg-red-50" : "bg-white"
                    }`}
                    placeholder="Write your blog post content here using Markdown... Drag and drop images to upload."
                  />
                  {isDraggingOver && (
                    <div className="absolute inset-0 bg-purple-100 bg-opacity-70 flex items-center justify-center">
                      <div className="p-4 bg-white rounded-lg shadow-md">
                        <p className="text-purple-700 font-semibold">
                          Drop images here to upload
                        </p>
                      </div>
                    </div>
                  )}
                  {isUploadingImage && (
                    <div className="absolute bottom-4 right-4 bg-white p-2 rounded-md shadow-md">
                      <div className="flex items-center">
                        <ArrowPathIcon className="h-4 w-4 text-purple-600 animate-spin mr-2" />
                        <span className="text-sm text-gray-700">
                          Uploading image: {uploadProgress}%
                        </span>
                      </div>
                      <div className="mt-1 w-full bg-gray-200 rounded-full h-1.5">
                        <div
                          className="bg-purple-600 h-1.5 rounded-full"
                          style={{ width: `${uploadProgress}%` }}
                        ></div>
                      </div>
                    </div>
                  )}
                </>
              )}
              {/* Preview */}
              {showPreview && (
                <div className="prose max-w-none p-4 min-h-[300px] bg-white overflow-y-auto markdown-preview">
                  <ReactMarkdown>
                    {formData.content || "Nothing to preview yet"}
                  </ReactMarkdown>
                </div>
              )}
            </div>
          </div>

          {errors.content && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.content}
            </p>
          )}

          <div className="mt-2 flex items-center justify-between">
            <p className="text-xs text-gray-500">
              Supports Markdown: **bold**, *italic*, headings, lists, code
              blocks, and drag & drop images
            </p>
            <div className="flex items-center space-x-2">
              <p className="text-xs text-gray-500">
                {formData.content.length} characters
              </p>
              <button
                type="button"
                onClick={() => setShowPreview(!showPreview)}
                className="text-xs px-2 py-1 rounded bg-purple-100 text-purple-700 hover:bg-purple-200"
              >
                {showPreview ? "Edit" : "Preview"}
              </button>
            </div>
          </div>
        </div>

        {/* Featured Image */}
        <div className="mb-6">
          <label
            htmlFor="featuredImage"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Featured Image
          </label>
          <div className="mt-1 flex items-center">
            <input
              type="file"
              id="featuredImage"
              accept="image/*"
              onChange={(e) => handleFileChange(e, "featuredImage")}
              className="sr-only"
            />
            <label
              htmlFor="featuredImage"
              className="relative cursor-pointer bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
            >
              <span>Choose file</span>
            </label>
            <p className="ml-3 text-sm text-gray-500">
              {featuredImage ? featuredImage.name : "No file chosen"}
            </p>
          </div>
          {currentFeaturedImage && !featuredImage && (
            <div className="mt-2">
              <p className="text-sm text-gray-500 mb-2">Current image:</p>
              <div className="w-40 h-auto overflow-hidden rounded-md">
                <img
                  src={currentFeaturedImage}
                  alt="Current featured image"
                  className="w-full h-auto"
                />
              </div>
            </div>
          )}
          <p className="mt-1 text-xs text-gray-500">
            Recommended size: 1200x630 pixels.
          </p>
        </div>

        {/* Additional Blog Details Section */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Additional Details
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Author */}
            <div>
              <label
                htmlFor="author"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Author
              </label>
              <input
                type="text"
                id="author"
                name="author"
                value={formData.author}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Author name"
              />
            </div>

            {/* Read Time */}
            <div>
              <label
                htmlFor="readTime"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Read Time (minutes)
              </label>
              <input
                type="number"
                id="readTime"
                name="readTime"
                value={formData.readTime}
                onChange={handleChange}
                min="0"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>

            {/* Hidden Tag */}
            <div>
              <label
                htmlFor="hiddenTag"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Hidden Tag
              </label>
              <input
                type="text"
                id="hiddenTag"
                name="hiddenTag"
                value={formData.hiddenTag}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Internal tag (not visible to readers)"
              />
            </div>
          </div>

          {/* Featured post */}
          <div className="mt-4 flex items-center">
            <input
              type="checkbox"
              id="isFeatured"
              name="isFeatured"
              checked={formData.isFeatured}
              onChange={handleCheckboxChange}
              className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
            />
            <label
              htmlFor="isFeatured"
              className="ml-2 block text-sm text-gray-700"
            >
              Feature this post (display prominently on the blog homepage)
            </label>
          </div>
        </div>

        {/* SEO Section - Toggle */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <button
            type="button"
            onClick={() => setShowSeoFields(!showSeoFields)}
            className="text-lg font-medium text-gray-900 mb-4 flex items-center"
          >
            SEO Settings
            <svg
              className={`ml-2 h-5 w-5 transition-transform ${
                showSeoFields ? "transform rotate-180" : ""
              }`}
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                clipRule="evenodd"
              />
            </svg>
          </button>

          {showSeoFields && (
            <div className="bg-gray-50 p-4 rounded-md">
              {/* Meta Title */}
              <div className="mb-4">
                <label
                  htmlFor="metaTitle"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Meta Title
                </label>
                <input
                  type="text"
                  id="metaTitle"
                  name="metaTitle"
                  value={formData.metaTitle}
                  onChange={handleChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="SEO title (defaults to post title if empty)"
                />
                <p className="mt-1 text-xs text-gray-500">
                  Recommended length: 50-60 characters
                </p>
              </div>

              {/* Meta Description */}
              <div className="mb-4">
                <label
                  htmlFor="metaDescription"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Meta Description
                </label>
                <textarea
                  id="metaDescription"
                  name="metaDescription"
                  value={formData.metaDescription}
                  onChange={handleChange}
                  rows={2}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="Brief description for search engines"
                />
                <p className="mt-1 text-xs text-gray-500">
                  Recommended length: 150-160 characters
                </p>
              </div>

              {/* Keywords */}
              <div className="mb-4">
                <label
                  htmlFor="keywords"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Keywords
                </label>
                <input
                  type="text"
                  id="keywords"
                  name="keywords"
                  value={formData.keywords}
                  onChange={handleChange}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="keyword1, keyword2, keyword3"
                />
              </div>

              {/* Canonical URL */}
              <div className="mb-4">
                <label
                  htmlFor="canonicalUrl"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Canonical URL
                </label>
                <input
                  type="text"
                  id="canonicalUrl"
                  name="canonicalUrl"
                  value={formData.canonicalUrl}
                  onChange={handleChange}
                  className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                    urlError || errors.canonicalUrl
                      ? "border-red-500 focus:ring-red-500"
                      : "border-gray-300 focus:ring-purple-500"
                  }`}
                  placeholder="https://example.com/canonical-path"
                />
                {(urlError || errors.canonicalUrl) && (
                  <p className="mt-1 text-sm text-red-600 flex items-center">
                    <ExclamationCircleIcon className="h-4 w-4 mr-1" />
                    {urlError || errors.canonicalUrl}
                  </p>
                )}
                <p className="mt-1 text-xs text-gray-500">
                  Use this when content appears on multiple URLs to specify the
                  preferred version
                </p>
              </div>

              {/* Meta Image */}
              <div className="mb-4">
                <label
                  htmlFor="metaImage"
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Social Media Image
                </label>
                <div className="mt-1 flex items-center">
                  <input
                    type="file"
                    id="metaImage"
                    accept="image/*"
                    onChange={(e) => handleFileChange(e, "metaImage")}
                    className="sr-only"
                  />
                  <label
                    htmlFor="metaImage"
                    className="relative cursor-pointer bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
                  >
                    <span>Choose file</span>
                  </label>
                  <p className="ml-3 text-sm text-gray-500">
                    {metaImage ? metaImage.name : "No file chosen"}
                  </p>
                </div>
                {currentMetaImage && !metaImage && (
                  <div className="mt-2">
                    <p className="text-sm text-gray-500 mb-2">Current image:</p>
                    <div className="w-40 h-auto overflow-hidden rounded-md">
                      <img
                        src={currentMetaImage}
                        alt="Current meta image"
                        className="w-full h-auto"
                      />
                    </div>
                  </div>
                )}
                <p className="mt-1 text-xs text-gray-500">
                  Image that appears when shared on social media. Recommended
                  size: 1200x630 pixels.
                </p>
              </div>
            </div>
          )}
        </div>

        {/* Publish immediately checkbox */}
        <div className="mb-6 flex items-center">
          <input
            type="checkbox"
            id="publishImmediately"
            name="publishImmediately"
            checked={formData.publishImmediately}
            onChange={handleCheckboxChange}
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <label
            htmlFor="publishImmediately"
            className="ml-2 block text-sm text-gray-700"
          >
            {isEditMode
              ? formData.publishImmediately
                ? "Published"
                : "Save as draft"
              : "Publish immediately"}
          </label>
        </div>

        {/* Submit buttons */}
        <div className="flex justify-end space-x-3">
          <Link
            href="/dashboard/admin/blog"
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            Cancel
          </Link>
          <button
            type="submit"
            disabled={isSaving}
            className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-purple-400 disabled:cursor-not-allowed"
          >
            {isSaving ? (
              <>
                <ArrowPathIcon className="inline h-4 w-4 mr-2 animate-spin" />
                {isEditMode ? "Updating..." : "Creating..."}
              </>
            ) : (
              <>{isEditMode ? "Update Post" : "Create Post"}</>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default BlogPostForm;

// === ./src/components/dashboard/course/admin/CourseForm.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import ReactMarkdown from "react-markdown";
import {
  HashtagIcon,
  CodeBracketIcon,
  ListBulletIcon,
  LinkIcon,
  UserIcon,
  PlusIcon,
  MinusIcon,
  TrashIcon,
} from "@heroicons/react/24/outline";
import { useRouter } from "next/navigation";
import {
  ArrowLeftIcon,
  ExclamationCircleIcon,
  ArrowPathIcon,
  PhotoIcon,
} from "@heroicons/react/24/outline";
import Link from "next/link";
import { courseApi } from "@/lib/courseApi";

interface Instructor {
  id: number;
  attributes: {
    name: string;
    title?: string;
    bio?: string;
  };
}

interface LearningPoint {
  title: string;
  description: string;
}

interface CourseFeatures {
  videoClasses: string;
  guidedMeditations: string;
  studyMaterials: string;
  supportInfo: string;
  curriculumAids: string;
}

interface FeaturedQuote {
  quoteText: string;
  authorName: string;
}

interface CourseFormProps {
  courseId?: string; // Optional for editing existing courses
}

const CourseForm = ({ courseId }: CourseFormProps) => {
  const router = useRouter();
  const isEditMode = !!courseId;
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Form state
  const [formData, setFormData] = useState({
    title: "",
    slug: "",
    subtitle: "", // New subtitle field
    description: "",
    isFree: false,
    price: 0,
    startDate: "",
    endDate: "",
    instructorIds: [] as number[],
    publishImmediately: false,
    whatYouWillLearn: { learningPoints: [] as LearningPoint[] },
    courseFeatures: {
      videoClasses: "",
      guidedMeditations: "",
      studyMaterials: "",
      supportInfo: "",
      curriculumAids: "",
    },
    featuredQuote: { quoteText: "", authorName: "" },
    introduction: "",
    addendum: "",
  });

  // UI states
  const [showPreview, setShowPreview] = useState(false);
  const [showHeadingMenu, setShowHeadingMenu] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [instructors, setInstructors] = useState<Instructor[]>([]);
  const [successMessage, setSuccessMessage] = useState("");
  const [featuredImage, setFeaturedImage] = useState<File | null>(null);
  const [previewMedia, setPreviewMedia] = useState<File[]>([]);
  const [quoteAuthorImage, setQuoteAuthorImage] = useState<File | null>(null);
  const [currentFeaturedImage, setCurrentFeaturedImage] = useState<
    string | null
  >(null);
  const [currentPreviewMedia, setCurrentPreviewMedia] = useState<
    { id: number; url: string; name: string }[]
  >([]);
  const [currentQuoteAuthorImage, setCurrentQuoteAuthorImage] = useState<
    string | null
  >(null);

  // Fetch instructors
  useEffect(() => {
    const fetchInstructors = async () => {
      try {
        // Use courseApi utility function
        const response = await courseApi.getInstructors();
        setInstructors(response.data || []);
      } catch (error) {
        console.error("Error fetching instructors:", error);
        setInstructors([]);
      }
    };

    fetchInstructors();
  }, []);

  // If in edit mode, fetch the existing course
  useEffect(() => {
    if (isEditMode) {
      const fetchCourse = async () => {
        setIsLoading(true);
        try {
          // Use courseApi utility function
          const response = await courseApi.getCourse(courseId!);
          const data = response.data;

          // Get the featured image URL if it exists
          let featuredImageUrl = null;
          if (data.attributes.featuredImage?.data) {
            featuredImageUrl = `${process.env.NEXT_PUBLIC_STRAPI_URL || ""}${
              data.attributes.featuredImage.data.attributes.url
            }`;
            setCurrentFeaturedImage(featuredImageUrl);
          }

          // Get preview media if it exists
          if (data.attributes.previewMedia?.data) {
            const mediaItems = data.attributes.previewMedia.data.map(
              (item: any) => ({
                id: item.id,
                url: `${process.env.NEXT_PUBLIC_STRAPI_URL || ""}${
                  item.attributes.url
                }`,
                name: item.attributes.name,
              })
            );
            setCurrentPreviewMedia(mediaItems);
          }

          // Get quote author image if it exists
          if (data.attributes.featuredQuote?.authorImage?.data) {
            const authorImageUrl = `${
              process.env.NEXT_PUBLIC_STRAPI_URL || ""
            }${data.attributes.featuredQuote.authorImage.data.attributes.url}`;
            setCurrentQuoteAuthorImage(authorImageUrl);
          }

          // Get instructor IDs
          const instructorIds = data.attributes.instructors?.data
            ? data.attributes.instructors.data.map(
                (instructor) => instructor.id
              )
            : [];

          // Get learning points
          const learningPoints =
            data.attributes.whatYouWillLearn?.learningPoints || [];

          // Get course features
          const courseFeatures = data.attributes.courseFeatures || {
            videoClasses: "",
            guidedMeditations: "",
            studyMaterials: "",
            supportInfo: "",
            curriculumAids: "",
          };

          // Get featured quote
          const featuredQuote = data.attributes.featuredQuote || {
            quoteText: "",
            authorName: "",
          };

          setFormData({
            title: data.attributes.title || "",
            slug: data.attributes.slug || "",
            subtitle: data.attributes.subtitle || "",
            description: data.attributes.description || "",
            isFree: data.attributes.isFree || false,
            price: data.attributes.price || 0,
            startDate: data.attributes.startDate
              ? new Date(data.attributes.startDate).toISOString().split("T")[0]
              : "",
            endDate: data.attributes.endDate
              ? new Date(data.attributes.endDate).toISOString().split("T")[0]
              : "",
            instructorIds: instructorIds,
            publishImmediately: !!data.attributes.publishedAt,
            whatYouWillLearn: { learningPoints: learningPoints },
            courseFeatures: courseFeatures,
            featuredQuote: featuredQuote,
            introduction: data.attributes.introduction || "", // <-- New field
            addendum: data.attributes.addendum || "", // <-- New field
          });
        } catch (error) {
          console.error("Error fetching course:", error);
          setErrors({ form: "Failed to load course" });
        } finally {
          setIsLoading(false);
        }
      };

      fetchCourse();
    }
  }, [isEditMode, courseId]);

  // Generate slug from title
  const generateSlug = (title: string): string => {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, "-")
      .replace(/(^-|-$)/g, "");
  };

  // Handle input changes
  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;

    setFormData((prev) => ({ ...prev, [name]: value }));

    // Auto-generate slug when title changes
    if (
      name === "title" &&
      (!formData.slug || formData.slug === generateSlug(formData.title))
    ) {
      setFormData((prev) => ({ ...prev, slug: generateSlug(value) }));
    }

    // Clear error when field is edited
    if (errors[name]) {
      setErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // Handle nested object changes
  const handleNestedChange = (
    objectName: "whatYouWillLearn" | "courseFeatures" | "featuredQuote",
    field: string,
    value: string
  ) => {
    setFormData((prev) => ({
      ...prev,
      [objectName]: {
        ...prev[objectName],
        [field]: value,
      },
    }));
  };

  // Handle learning point changes
  const handleLearningPointChange = (
    index: number,
    field: "title" | "description",
    value: string
  ) => {
    setFormData((prev) => {
      const newLearningPoints = [...prev.whatYouWillLearn.learningPoints];
      newLearningPoints[index] = {
        ...newLearningPoints[index],
        [field]: value,
      };
      return {
        ...prev,
        whatYouWillLearn: {
          ...prev.whatYouWillLearn,
          learningPoints: newLearningPoints,
        },
      };
    });
  };

  // Add new learning point
  const addLearningPoint = () => {
    if (formData.whatYouWillLearn.learningPoints.length < 5) {
      setFormData((prev) => ({
        ...prev,
        whatYouWillLearn: {
          ...prev.whatYouWillLearn,
          learningPoints: [
            ...prev.whatYouWillLearn.learningPoints,
            { title: "", description: "" },
          ],
        },
      }));
    }
  };

  // Remove learning point
  const removeLearningPoint = (index: number) => {
    setFormData((prev) => {
      const newLearningPoints = [...prev.whatYouWillLearn.learningPoints];
      newLearningPoints.splice(index, 1);
      return {
        ...prev,
        whatYouWillLearn: {
          ...prev.whatYouWillLearn,
          learningPoints: newLearningPoints,
        },
      };
    });
  };

  // Handle checkbox changes
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setFormData((prev) => ({ ...prev, [name]: checked }));

    // If making course free, reset price to 0
    if (name === "isFree" && checked) {
      setFormData((prev) => ({ ...prev, price: 0 }));
    }
  };

  // Handle multi-select for instructors
  const handleInstructorChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedOptions = Array.from(e.target.selectedOptions, (option) =>
      parseInt(option.value)
    );
    setFormData((prev) => ({ ...prev, instructorIds: selectedOptions }));
  };

  // Handle file changes
  const handleFileChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: "featuredImage" | "quoteAuthorImage" | "previewMedia"
  ) => {
    if (type === "previewMedia") {
      const files = e.target.files ? Array.from(e.target.files) : [];
      setPreviewMedia([...previewMedia, ...files]);
    } else {
      const file = e.target.files?.[0] || null;
      if (type === "featuredImage") {
        setFeaturedImage(file);
      } else if (type === "quoteAuthorImage") {
        setQuoteAuthorImage(file);
      }
    }
  };

  // Remove preview media item
  const removePreviewMedia = (index: number) => {
    setPreviewMedia((prev) => {
      const newPreviewMedia = [...prev];
      newPreviewMedia.splice(index, 1);
      return newPreviewMedia;
    });
  };

  // Helper function to format selected text in markdown
  const formatSelectedText = (format: string) => {
    if (!textareaRef.current) return;

    const textarea = textareaRef.current;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    const text = textarea.value;
    let newText = text;
    let cursorOffset = 0;

    switch (format) {
      case "bold":
        newText =
          text.substring(0, start) +
          `**${selectedText}**` +
          text.substring(end);
        cursorOffset = 2;
        break;
      case "italic":
        newText =
          text.substring(0, start) + `*${selectedText}*` + text.substring(end);
        cursorOffset = 1;
        break;
      case "h1":
        if (start === 0 || text[start - 1] === "\n") {
          newText =
            text.substring(0, start) +
            `# ${selectedText}` +
            text.substring(end);
          cursorOffset = 2;
        } else {
          newText =
            text.substring(0, start) +
            `\n# ${selectedText}` +
            text.substring(end);
          cursorOffset = 3;
        }
        break;
      case "h2":
        if (start === 0 || text[start - 1] === "\n") {
          newText =
            text.substring(0, start) +
            `## ${selectedText}` +
            text.substring(end);
          cursorOffset = 3;
        } else {
          newText =
            text.substring(0, start) +
            `\n## ${selectedText}` +
            text.substring(end);
          cursorOffset = 4;
        }
        break;
      case "link":
        newText =
          text.substring(0, start) +
          `[${selectedText || "Link text"}](https://example.com)` +
          text.substring(end);
        cursorOffset = selectedText ? 1 : 10;
        break;
      case "list":
        if (selectedText.includes("\n")) {
          const lines = selectedText.split("\n");
          const formattedLines = lines.map((line) => `- ${line}`).join("\n");
          newText =
            text.substring(0, start) + formattedLines + text.substring(end);
        } else {
          newText =
            text.substring(0, start) +
            `- ${selectedText}` +
            text.substring(end);
        }
        cursorOffset = 2;
        break;
    }

    setFormData({ ...formData, description: newText });

    // Set cursor position after formatting
    setTimeout(() => {
      if (textareaRef.current) {
        if (start === end) {
          const cursorPos = start + cursorOffset;
          textareaRef.current.selectionStart = cursorPos;
          textareaRef.current.selectionEnd = cursorPos;
        } else {
          let cursorPos;
          if (
            format.startsWith("h") &&
            (start === 0 || text[start - 1] !== "\n")
          ) {
            cursorPos = end + cursorOffset + 1;
          } else {
            cursorPos = end + cursorOffset * 2;
          }
          textareaRef.current.selectionStart = cursorPos;
          textareaRef.current.selectionEnd = cursorPos;
        }
        textareaRef.current.focus();
      }
    }, 0);
  };

  // Validate form
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.title.trim()) {
      newErrors.title = "Title is required";
    }

    if (!formData.slug.trim()) {
      newErrors.slug = "Slug is required";
    } else if (!/^[a-z0-9-]+$/.test(formData.slug)) {
      newErrors.slug =
        "Slug can only contain lowercase letters, numbers, and hyphens";
    }

    if (!formData.description.trim()) {
      newErrors.description = "Description is required";
    }

    if (!formData.isFree && (!formData.price || formData.price <= 0)) {
      newErrors.price = "Price must be greater than 0 for paid courses";
    }

    // Validate learning points
    formData.whatYouWillLearn.learningPoints.forEach((point, index) => {
      if (point.title.length > 250) {
        newErrors[`learningPoint_${index}_title`] =
          "Title must be less than 250 characters";
      }
      if (point.description.length > 250) {
        newErrors[`learningPoint_${index}_description`] =
          "Description must be less than 250 characters";
      }
    });

    // Validate course features
    Object.entries(formData.courseFeatures).forEach(([key, value]) => {
      if (typeof value === "string" && value.length > 250) {
        newErrors[
          `courseFeature_${key}`
        ] = `This field must be less than 250 characters`;
      }
    });

    // Validate quote text
    if (
      formData.featuredQuote.quoteText &&
      formData.featuredQuote.quoteText.length > 300
    ) {
      newErrors.quoteText = "Quote must be less than 300 characters";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsSaving(true);
    setSuccessMessage("");

    try {
      // First upload any images
      let featuredImageId = null;
      let quoteAuthorImageId = null;
      let previewMediaIds: number[] = [];

      if (featuredImage) {
        try {
          console.log("Attempting to upload featured image...");
          const result = await courseApi.uploadFile(featuredImage);
          featuredImageId = result.id; // Get the ID from the result
          console.log(
            "Featured image uploaded successfully, ID:",
            featuredImageId
          );
        } catch (uploadError) {
          console.error("Featured image upload failed:", uploadError);
          setErrors({
            form: "Failed to upload featured image. Please try again or skip adding an image.",
          });
          setIsSaving(false);
          return;
        }
      }

      if (quoteAuthorImage) {
        try {
          const result = await courseApi.uploadFile(quoteAuthorImage);
          quoteAuthorImageId = result.id;
          console.log(
            "Quote author image uploaded successfully, ID:",
            quoteAuthorImageId
          );
        } catch (uploadError) {
          console.error("Quote author image upload failed:", uploadError);
          // Continue with form submission even if author image fails
        }
      }

      // Upload preview media files
      if (previewMedia.length > 0) {
        for (const media of previewMedia) {
          try {
            const result = await courseApi.uploadFile(media);
            previewMediaIds.push(result.id);
          } catch (uploadError) {
            console.error(
              `Preview media upload failed for ${media.name}:`,
              uploadError
            );
            // Continue with form submission even if some media fails
          }
        }
      }

      // Prepare request body with all the fields
      const courseData = {
        title: formData.title,
        slug: formData.slug,
        subtitle: formData.subtitle,
        description: formData.description,
        isFree: formData.isFree,
        price: formData.isFree ? 0 : formData.price,
        startDate: formData.startDate || null,
        endDate: formData.endDate || null,
        introduction: formData.introduction,
        addendum: formData.addendum,

        // Handle instructors correctly for Strapi v4
        instructors: {
          connect:
            formData.instructorIds.length > 0 ? formData.instructorIds : [],
        },

        // Format whatYouWillLearn as a direct array (as required by Strapi)
        whatYouWillLearn: formData.whatYouWillLearn.learningPoints,

        // Format courseFeatures as a single component with fields
        courseFeatures: {
          videoClasses: formData.courseFeatures.videoClasses,
          guidedMeditations: formData.courseFeatures.guidedMeditations,
          studyMaterials: formData.courseFeatures.studyMaterials,
          supportInfo: formData.courseFeatures.supportInfo,
          curriculumAids: formData.courseFeatures.curriculumAids,
        },

        featuredQuote: {
          quoteText: formData.featuredQuote.quoteText,
          authorName: formData.featuredQuote.authorName,
          ...(quoteAuthorImageId ? { authorImage: quoteAuthorImageId } : {}),
        },

        // Preview media
        ...(previewMediaIds.length > 0
          ? { previewMedia: previewMediaIds }
          : {}),

        // Featured image
        ...(featuredImageId ? { featuredImage: featuredImageId } : {}),

        // Handle published state
        publishedAt: formData.publishImmediately
          ? new Date().toISOString()
          : null,
      };

      console.log(
        "Submitting course data:",
        JSON.stringify(courseData, null, 2)
      );

      if (isEditMode) {
        await courseApi.updateCourse(courseId!, courseData);
      } else {
        await courseApi.createCourse(courseData);
      }

      setSuccessMessage(
        isEditMode
          ? "Course updated successfully!"
          : "Course created successfully!"
      );

      // If creating a new course, redirect after a brief delay
      if (!isEditMode) {
        setTimeout(() => {
          router.push("/dashboard/admin/course/${coureseId}");
        }, 1500);
      }
    } catch (error) {
      console.error("Error saving course:", error);
      setErrors({
        form:
          error instanceof Error ? error.message : "An unknown error occurred",
      });
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex items-center">
        <Link
          href="/dashboard/admin/course"
          className="mr-4 text-gray-600 hover:text-gray-900"
        >
          <ArrowLeftIcon className="h-5 w-5" />
        </Link>
        <h1 className="text-2xl font-bold text-gray-900">
          {isEditMode ? "Edit Course" : "Create New Course"}
        </h1>
      </div>

      {/* Success message */}
      {successMessage && (
        <div className="mb-6 p-4 bg-green-100 text-green-700 rounded-md">
          {successMessage}
        </div>
      )}

      {/* Error message */}
      {errors.form && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {errors.form}
        </div>
      )}

      <form
        onSubmit={handleSubmit}
        className="bg-white shadow-md rounded-lg p-6"
      >
        {/* Title */}
        <div className="mb-6">
          <label
            htmlFor="title"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.title
                ? "border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:ring-purple-500"
            }`}
            placeholder="Enter course title"
          />
          {errors.title && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.title}
            </p>
          )}
        </div>
        {/* Subtitle */}
        <div className="mb-6">
          <label
            htmlFor="subtitle"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Subtitle
          </label>
          <input
            type="text"
            id="subtitle"
            name="subtitle"
            value={formData.subtitle}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 border-gray-300 focus:ring-purple-500`}
            placeholder="Enter a short subtitle to display on the course page"
          />
          <p className="mt-1 text-xs text-gray-500">
            A brief subtitle to display on the course selling page (will be
            shown instead of the full description)
          </p>
        </div>
        {/* Slug */}
        <div className="mb-6">
          <label
            htmlFor="slug"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Slug <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="slug"
            name="slug"
            value={formData.slug}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.slug
                ? "border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:ring-purple-500"
            }`}
            placeholder="enter-course-slug"
          />
          {errors.slug && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.slug}
            </p>
          )}
          <p className="mt-1 text-xs text-gray-500">
            The URL-friendly version of the title. Will be automatically
            generated from the title.
          </p>
        </div>

        {/* Description - Enhanced Rich Text (Markdown) */}
        <div className="mb-6">
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Description <span className="text-red-500">*</span>
          </label>
          <div className="border border-gray-300 rounded-md overflow-hidden">
            <div className="bg-gray-50 px-3 py-2 border-b border-gray-300 flex justify-between items-center">
              <span className="text-xs text-gray-500">Markdown Editor</span>
              <div className="flex space-x-2">
                <button
                  type="button"
                  onClick={() => formatSelectedText("bold")}
                  title="Bold"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <strong className="text-xs">B</strong>
                </button>
                <button
                  type="button"
                  onClick={() => formatSelectedText("italic")}
                  title="Italic"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <em className="text-xs">I</em>
                </button>

                {/* Heading dropdown */}
                <div className="relative">
                  <button
                    type="button"
                    onClick={() => setShowHeadingMenu(!showHeadingMenu)}
                    title="Headings"
                    className="p-1 rounded hover:bg-gray-200 flex items-center"
                  >
                    <HashtagIcon className="h-4 w-4" />
                  </button>

                  {showHeadingMenu && (
                    <div className="absolute top-full left-0 mt-1 bg-white border border-gray-200 rounded shadow-lg z-10">
                      <button
                        type="button"
                        onClick={() => {
                          formatSelectedText("h1");
                          setShowHeadingMenu(false);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                      >
                        <span className="font-bold text-lg">Heading 1</span>
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          formatSelectedText("h2");
                          setShowHeadingMenu(false);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm hover:bg-gray-100"
                      >
                        <span className="font-bold text-base">Heading 2</span>
                      </button>
                    </div>
                  )}
                </div>

                <button
                  type="button"
                  onClick={() => formatSelectedText("link")}
                  title="Link"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <LinkIcon className="h-4 w-4" />
                </button>

                <button
                  type="button"
                  onClick={() => formatSelectedText("list")}
                  title="List"
                  className="p-1 rounded hover:bg-gray-200"
                >
                  <ListBulletIcon className="h-4 w-4" />
                </button>
              </div>
            </div>

            <div className="relative">
              {/* Editor */}
              {!showPreview && (
                <textarea
                  ref={textareaRef}
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleChange}
                  rows={10}
                  className={`w-full px-4 py-2 border-0 focus:outline-none focus:ring-0 ${
                    errors.description ? "bg-red-50" : "bg-white"
                  }`}
                  placeholder="Write your course description here using Markdown..."
                />
              )}
              {/* Preview */}
              {showPreview && (
                <div className="prose max-w-none p-4 min-h-[200px] bg-white overflow-y-auto markdown-preview">
                  <ReactMarkdown>
                    {formData.description || "Nothing to preview yet"}
                  </ReactMarkdown>
                </div>
              )}
            </div>
          </div>

          {errors.description && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.description}
            </p>
          )}

          <div className="mt-2 flex items-center justify-end">
            <button
              type="button"
              onClick={() => setShowPreview(!showPreview)}
              className="text-xs px-2 py-1 rounded bg-purple-100 text-purple-700 hover:bg-purple-200"
            >
              {showPreview ? "Edit" : "Preview"}
            </button>
          </div>
        </div>

        {/* What You Will Learn Section */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            What You Will Learn
          </h3>

          {/* Learning Points */}
          {formData.whatYouWillLearn.learningPoints.map((point, index) => (
            <div key={index} className="mb-6 p-4 bg-gray-50 rounded-md">
              <div className="flex justify-between items-center mb-3">
                <h4 className="font-medium">Learning Point {index + 1}</h4>
                <button
                  type="button"
                  onClick={() => removeLearningPoint(index)}
                  className="text-red-500 hover:text-red-700"
                >
                  <TrashIcon className="h-5 w-5" />
                </button>
              </div>

              <div className="mb-3">
                <label
                  htmlFor={`learningPointTitle${index}`}
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Title
                </label>
                <input
                  type="text"
                  id={`learningPointTitle${index}`}
                  value={point.title}
                  onChange={(e) =>
                    handleLearningPointChange(index, "title", e.target.value)
                  }
                  className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                    errors[`learningPoint_${index}_title`]
                      ? "border-red-500 focus:ring-red-500"
                      : "border-gray-300 focus:ring-purple-500"
                  }`}
                  placeholder="e.g., Discover A Unique Approach to Self-Realization"
                  maxLength={250}
                />
                {errors[`learningPoint_${index}_title`] && (
                  <p className="mt-1 text-sm text-red-600">
                    {errors[`learningPoint_${index}_title`]}
                  </p>
                )}
                <p className="mt-1 text-xs text-gray-500">
                  {point.title.length}/250 characters
                </p>
              </div>

              <div>
                <label
                  htmlFor={`learningPointDescription${index}`}
                  className="block text-sm font-medium text-gray-700 mb-1"
                >
                  Description
                </label>
                <textarea
                  id={`learningPointDescription${index}`}
                  value={point.description}
                  onChange={(e) =>
                    handleLearningPointChange(
                      index,
                      "description",
                      e.target.value
                    )
                  }
                  rows={3}
                  className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                    errors[`learningPoint_${index}_description`]
                      ? "border-red-500 focus:ring-red-500"
                      : "border-gray-300 focus:ring-purple-500"
                  }`}
                  placeholder="Our novel approach to empowerment and a life of joyous fulfillment..."
                  maxLength={250}
                />
                {errors[`learningPoint_${index}_description`] && (
                  <p className="mt-1 text-sm text-red-600">
                    {errors[`learningPoint_${index}_description`]}
                  </p>
                )}
                <p className="mt-1 text-xs text-gray-500">
                  {point.description.length}/250 characters
                </p>
              </div>
            </div>
          ))}

          {formData.whatYouWillLearn.learningPoints.length < 5 && (
            <button
              type="button"
              onClick={addLearningPoint}
              className="flex items-center text-purple-600 hover:text-purple-800"
            >
              <PlusIcon className="h-5 w-5 mr-1" />
              Add Learning Point (
              {formData.whatYouWillLearn.learningPoints.length}/5)
            </button>
          )}
        </div>

        {/* Course Features */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            This course includes:
          </h3>

          {/* Video Classes */}
          <div className="mb-4 p-4 bg-gray-50 rounded-md">
            <div className="mb-2">
              <label
                htmlFor="videoClasses"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Video Classes
              </label>
              <textarea
                id="videoClasses"
                value={formData.courseFeatures.videoClasses}
                onChange={(e) =>
                  handleNestedChange(
                    "courseFeatures",
                    "videoClasses",
                    e.target.value
                  )
                }
                rows={3}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  errors.courseFeature_videoClasses
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
                placeholder="e.g., 7 video classes - These in-depth presentations comprise over 3.5 hours of class time!"
                maxLength={250}
              />
              {errors.courseFeature_videoClasses && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.courseFeature_videoClasses}
                </p>
              )}
              <p className="mt-1 text-xs text-gray-500">
                {formData.courseFeatures.videoClasses.length}/250 characters
              </p>
            </div>
          </div>

          {/* Guided Meditations */}
          <div className="mb-4 p-4 bg-gray-50 rounded-md">
            <div className="mb-2">
              <label
                htmlFor="guidedMeditations"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Guided Meditations
              </label>
              <textarea
                id="guidedMeditations"
                value={formData.courseFeatures.guidedMeditations}
                onChange={(e) =>
                  handleNestedChange(
                    "courseFeatures",
                    "guidedMeditations",
                    e.target.value
                  )
                }
                rows={3}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  errors.courseFeature_guidedMeditations
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
                placeholder="e.g., 7 Guided meditations - Seven Specially selected meditations guided by Shunyamurti"
                maxLength={250}
              />
              {errors.courseFeature_guidedMeditations && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.courseFeature_guidedMeditations}
                </p>
              )}
              <p className="mt-1 text-xs text-gray-500">
                {formData.courseFeatures.guidedMeditations.length}/250
                characters
              </p>
            </div>
          </div>

          {/* Study Materials */}
          <div className="mb-4 p-4 bg-gray-50 rounded-md">
            <div className="mb-2">
              <label
                htmlFor="studyMaterials"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Study Materials
              </label>
              <textarea
                id="studyMaterials"
                value={formData.courseFeatures.studyMaterials}
                onChange={(e) =>
                  handleNestedChange(
                    "courseFeatures",
                    "studyMaterials",
                    e.target.value
                  )
                }
                rows={3}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  errors.courseFeature_studyMaterials
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
                placeholder="e.g., Additional study materials - Each lesson is supplemented with illuminating videos and essays"
                maxLength={250}
              />
              {errors.courseFeature_studyMaterials && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.courseFeature_studyMaterials}
                </p>
              )}
              <p className="mt-1 text-xs text-gray-500">
                {formData.courseFeatures.studyMaterials.length}/250 characters
              </p>
            </div>
          </div>

          {/* Support Info */}
          <div className="mb-4 p-4 bg-gray-50 rounded-md">
            <div className="mb-2">
              <label
                htmlFor="supportInfo"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Support Information
              </label>
              <textarea
                id="supportInfo"
                value={formData.courseFeatures.supportInfo}
                onChange={(e) =>
                  handleNestedChange(
                    "courseFeatures",
                    "supportInfo",
                    e.target.value
                  )
                }
                rows={3}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  errors.courseFeature_supportInfo
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
                placeholder="e.g., Comments and questions - Radha Ma and the Sat Yoga Teaching Team will be available to answer questions"
                maxLength={250}
              />
              {errors.courseFeature_supportInfo && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.courseFeature_supportInfo}
                </p>
              )}
              <p className="mt-1 text-xs text-gray-500">
                {formData.courseFeatures.supportInfo.length}/250 characters
              </p>
            </div>
          </div>

          {/* Curriculum Aids */}
          <div className="mb-4 p-4 bg-gray-50 rounded-md">
            <div className="mb-2">
              <label
                htmlFor="curriculumAids"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Curriculum Aids
              </label>
              <textarea
                id="curriculumAids"
                value={formData.courseFeatures.curriculumAids}
                onChange={(e) =>
                  handleNestedChange(
                    "courseFeatures",
                    "curriculumAids",
                    e.target.value
                  )
                }
                rows={3}
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  errors.courseFeature_curriculumAids
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
                placeholder="e.g., Curriculum study aids - Heart opening writing exercises and mind-expanding thoughts experiments"
                maxLength={250}
              />
              {errors.courseFeature_curriculumAids && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.courseFeature_curriculumAids}
                </p>
              )}
              <p className="mt-1 text-xs text-gray-500">
                {formData.courseFeatures.curriculumAids.length}/250 characters
              </p>
            </div>
          </div>
        </div>

        {/* Introduction Section */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Introduction
          </h3>
          <textarea
            id="introduction"
            name="introduction"
            value={formData.introduction}
            onChange={handleChange}
            rows={6}
            className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="Write an introductory text for the course..."
          />
        </div>

        {/* Addendum Section */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Addendum</h3>
          <textarea
            id="addendum"
            name="addendum"
            value={formData.addendum}
            onChange={handleChange}
            rows={6}
            className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="Write any additional notes or afterword for the course..."
          />
        </div>

        {/* Preview Media */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Preview Media (Optional)
          </h3>

          {/* Current preview media display */}
          {currentPreviewMedia.length > 0 && (
            <div className="mb-4">
              <p className="text-sm font-medium text-gray-700 mb-2">
                Current Preview Media:
              </p>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {currentPreviewMedia.map((media, index) => (
                  <div key={index} className="relative">
                    <div className="aspect-square bg-gray-100 rounded-lg overflow-hidden">
                      <img
                        src={media.url}
                        alt={`Preview media ${index + 1}`}
                        className="w-full h-full object-cover"
                      />
                    </div>
                    <span className="text-xs mt-1 block truncate">
                      {media.name}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* New preview media display */}
          {previewMedia.length > 0 && (
            <div className="mb-4">
              <p className="text-sm font-medium text-gray-700 mb-2">
                New Preview Media to Upload:
              </p>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {previewMedia.map((file, index) => (
                  <div key={index} className="relative">
                    <div className="aspect-square border rounded-lg flex items-center justify-center bg-gray-100 overflow-hidden">
                      {file.type.startsWith("image/") ? (
                        <img
                          src={URL.createObjectURL(file)}
                          alt={file.name}
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <span className="text-sm text-gray-500 p-2 text-center">
                          {file.name}
                        </span>
                      )}
                      <button
                        type="button"
                        onClick={() => removePreviewMedia(index)}
                        className="absolute top-1 right-1 bg-red-500 text-white rounded-full p-1 shadow-md"
                      >
                        <TrashIcon className="h-4 w-4" />
                      </button>
                    </div>
                    <span className="text-xs mt-1 block truncate">
                      {file.name}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="mt-4">
            <label
              htmlFor="previewMedia"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Add Preview Images/Videos
            </label>
            <input
              type="file"
              id="previewMedia"
              multiple
              accept="image/*,video/*"
              onChange={(e) => handleFileChange(e, "previewMedia")}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4
                        file:rounded-md file:border-0 file:text-sm file:font-semibold
                        file:bg-purple-50 file:text-purple-700 hover:file:bg-purple-100"
            />
            <p className="mt-1 text-xs text-gray-500">
              Upload images or videos to promote your course (optional)
            </p>
          </div>
        </div>

        {/* Featured Quote */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Featured Quote (Optional)
          </h3>

          <div className="mb-4">
            <label
              htmlFor="quoteText"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Quote Text
            </label>
            <textarea
              id="quoteText"
              value={formData.featuredQuote.quoteText}
              onChange={(e) =>
                handleNestedChange("featuredQuote", "quoteText", e.target.value)
              }
              rows={3}
              className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                errors.quoteText
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-purple-500"
              }`}
              placeholder='e.g., "Lorem ipsum dolor sit amet, consectetur adipiscing elit..."'
              maxLength={300}
            />
            {errors.quoteText && (
              <p className="mt-1 text-sm text-red-600">{errors.quoteText}</p>
            )}
            <p className="mt-1 text-xs text-gray-500">
              {formData.featuredQuote.quoteText.length}/300 characters
            </p>
          </div>

          <div className="mb-4">
            <label
              htmlFor="authorName"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Author Name
            </label>
            <input
              type="text"
              id="authorName"
              value={formData.featuredQuote.authorName}
              onChange={(e) =>
                handleNestedChange(
                  "featuredQuote",
                  "authorName",
                  e.target.value
                )
              }
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="e.g., Shunyamurti"
            />
          </div>

          <div className="mb-4">
            <label
              htmlFor="quoteAuthorImage"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Author Image
            </label>
            <div className="mt-1 flex items-center">
              <input
                type="file"
                id="quoteAuthorImage"
                accept="image/*"
                onChange={(e) => handleFileChange(e, "quoteAuthorImage")}
                className="sr-only"
              />
              <label
                htmlFor="quoteAuthorImage"
                className="relative cursor-pointer bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
              >
                <span>Choose file</span>
              </label>
              <p className="ml-3 text-sm text-gray-500">
                {quoteAuthorImage ? quoteAuthorImage.name : "No file chosen"}
              </p>
            </div>
            {currentQuoteAuthorImage && !quoteAuthorImage && (
              <div className="mt-2">
                <p className="text-sm text-gray-500 mb-2">Current image:</p>
                <div className="w-20 h-20 overflow-hidden rounded-full">
                  <img
                    src={currentQuoteAuthorImage}
                    alt="Current author image"
                    className="w-full h-full object-cover"
                  />
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Price Details */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Price Details
          </h3>

          <div className="mb-4">
            <label className="flex items-center">
              <input
                type="checkbox"
                name="isFree"
                checked={formData.isFree}
                onChange={handleCheckboxChange}
                className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
              />
              <span className="ml-2 text-sm text-gray-700">
                This is a free course
              </span>
            </label>
          </div>

          {!formData.isFree && (
            <div className="mb-4">
              <label
                htmlFor="price"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Price ($) <span className="text-red-500">*</span>
              </label>
              <input
                type="number"
                id="price"
                name="price"
                value={formData.price}
                onChange={handleChange}
                min="0"
                step="0.01"
                className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                  errors.price
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-purple-500"
                }`}
                placeholder="29.99"
              />
              {errors.price && (
                <p className="mt-1 text-sm text-red-600 flex items-center">
                  <ExclamationCircleIcon className="h-4 w-4 mr-1" />
                  {errors.price}
                </p>
              )}
            </div>
          )}
        </div>

        {/* Date Details */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="h-5 w-5 mr-2 text-gray-500"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5"
              />
            </svg>
            Course Dates
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label
                htmlFor="startDate"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Start Date
              </label>
              <input
                type="date"
                id="startDate"
                name="startDate"
                value={formData.startDate}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>

            <div>
              <label
                htmlFor="endDate"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                End Date
              </label>
              <input
                type="date"
                id="endDate"
                name="endDate"
                value={formData.endDate}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>
          </div>
        </div>

        {/* Instructors */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
            <UserIcon className="h-5 w-5 mr-2 text-gray-500" />
            Instructors
          </h3>

          <div className="mb-4">
            <label
              htmlFor="instructors"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Select Instructors
            </label>
            <select
              id="instructors"
              multiple
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              value={formData.instructorIds.map((id) => id.toString())}
              onChange={handleInstructorChange}
              size={Math.min(5, instructors.length)}
            >
              {instructors.map((instructor) => (
                <option key={instructor.id} value={instructor.id}>
                  {instructor.attributes.name}
                </option>
              ))}
            </select>
            <p className="mt-1 text-xs text-gray-500">
              Hold Ctrl/Cmd key to select multiple instructors
            </p>
          </div>
        </div>

        {/* Featured Image */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Course Image
          </h3>

          <div className="mb-4">
            <label
              htmlFor="featuredImage"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Featured Image
            </label>
            <div className="mt-1 flex items-center">
              <input
                type="file"
                id="featuredImage"
                accept="image/*"
                onChange={(e) => handleFileChange(e, "featuredImage")}
                className="sr-only"
              />
              <label
                htmlFor="featuredImage"
                className="relative cursor-pointer bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
              >
                <span>Choose file</span>
              </label>
              <p className="ml-3 text-sm text-gray-500">
                {featuredImage ? featuredImage.name : "No file chosen"}
              </p>
            </div>
            {currentFeaturedImage && !featuredImage && (
              <div className="mt-2">
                <p className="text-sm text-gray-500 mb-2">Current image:</p>
                <div className="w-40 h-auto overflow-hidden rounded-md">
                  <img
                    src={currentFeaturedImage}
                    alt="Current featured image"
                    className="w-full h-auto"
                  />
                </div>
              </div>
            )}
            <p className="mt-1 text-xs text-gray-500">
              Recommended size: 1200x630 pixels
            </p>
          </div>
        </div>

        {/* Publish immediately checkbox */}
        <div className="mb-6 flex items-center">
          <input
            type="checkbox"
            id="publishImmediately"
            name="publishImmediately"
            checked={formData.publishImmediately}
            onChange={handleCheckboxChange}
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <label
            htmlFor="publishImmediately"
            className="ml-2 block text-sm text-gray-700"
          >
            {isEditMode
              ? formData.publishImmediately
                ? "Published"
                : "Save as draft"
              : "Publish immediately"}
          </label>
        </div>

        {/* Submit buttons */}
        <div className="flex justify-end space-x-3">
          <Link
            href="/dashboard/admin/course"
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            Cancel
          </Link>
          <button
            type="submit"
            disabled={isSaving}
            className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-purple-400 disabled:cursor-not-allowed"
          >
            {isSaving ? (
              <>
                <ArrowPathIcon className="inline h-4 w-4 mr-2 animate-spin" />
                {isEditMode ? "Updating..." : "Creating..."}
              </>
            ) : (
              <>{isEditMode ? "Update Course" : "Create Course"}</>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CourseForm;

// === ./src/components/dashboard/course/admin/CourseIndex.tsx ===
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import {
  PencilIcon,
  TrashIcon,
  PlusIcon,
  ArrowPathIcon,
  EyeIcon,
  StarIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";

// Define a Course interface that mimics your Strapi structure
interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
    description: string;
    price: number;
    isFree: boolean;
    featuredImage?: {
      data?: {
        id: number;
        attributes: {
          url: string;
          formats: {
            thumbnail: {
              url: string;
            };
          };
        };
      };
    };
    instructors?: {
      data: Array<{
        id: number;
        attributes: {
          name: string;
        };
      }>;
    };
    startDate?: string;
    endDate?: string;
    isFeatured: boolean;
    createdAt: string;
    updatedAt: string;
    publishedAt: string | null;
  };
}

const CourseIndex = () => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [searchQuery, setSearchQuery] = useState("");
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [courseToDelete, setCourseToDelete] = useState<number | null>(null);

  const fetchCourses = async (page = 1, query = "") => {
    setIsLoading(true);
    setError(null);

    try {
      // Use the courseApi utility function instead of direct fetch
      const response = await courseApi.getCourses(page, 10, query);
      setCourses(response.data || []);

      // Set pagination info
      if (response.meta?.pagination) {
        setTotalPages(response.meta.pagination.pageCount);
        setCurrentPage(response.meta.pagination.page);
      }
    } catch (err) {
      console.error("Error fetching courses:", err);
      setError(
        err instanceof Error ? err.message : "An unknown error occurred"
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Initial fetch
  useEffect(() => {
    fetchCourses(currentPage, searchQuery);
  }, [currentPage, searchQuery]);

  // Handle search
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    setCurrentPage(1); // Reset to first page on new search
    fetchCourses(1, searchQuery);
  };

  // Delete course
  const deleteCourse = async (id: number) => {
    try {
      await courseApi.deleteCourse(id.toString());

      // Refresh the courses list
      fetchCourses(currentPage, searchQuery);
      setShowDeleteModal(false);
      setCourseToDelete(null);
    } catch (err) {
      console.error("Error deleting course:", err);
      setError(err instanceof Error ? err.message : "Failed to delete course");
    }
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Truncate description for display
  const truncateText = (text?: string, maxLength = 50) => {
    if (!text) return "-";
    return text.length > maxLength
      ? text.substring(0, maxLength) + "..."
      : text;
  };

  // Confirm delete modal
  const DeleteConfirmationModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          Confirm Delete
        </h3>
        <p className="mb-6 text-gray-600">
          Are you sure you want to delete this course? This action cannot be
          undone.
        </p>
        <div className="flex justify-end space-x-3">
          <button
            onClick={() => setShowDeleteModal(false)}
            className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
          >
            Cancel
          </button>
          <button
            onClick={() =>
              courseToDelete !== null && deleteCourse(courseToDelete)
            }
            className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <h1 className="text-2xl font-bold text-gray-900 mb-4 sm:mb-0">
          Courses
        </h1>
        <div className="flex space-x-2">
          <Link
            href="/dashboard/admin/course/create"
            className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
          >
            <PlusIcon className="h-5 w-5 mr-2" />
            New Course
          </Link>
          <button
            onClick={() => fetchCourses(currentPage, searchQuery)}
            className="inline-flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            <ArrowPathIcon className="h-5 w-5" />
          </button>
        </div>
      </div>

      {/* Search bar */}
      <div className="mb-6">
        <form onSubmit={handleSearch} className="flex">
          <input
            type="text"
            placeholder="Search courses..."
            className="px-4 py-2 border border-gray-300 rounded-l-md flex-grow focus:outline-none focus:ring-2 focus:ring-purple-500"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          <button
            type="submit"
            className="px-4 py-2 bg-purple-600 text-white rounded-r-md hover:bg-purple-700"
          >
            Search
          </button>
        </form>
      </div>

      {/* Error message */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      {/* Loading state */}
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
        </div>
      ) : (
        <>
          {/* Courses table */}
          <div className="overflow-x-auto bg-white rounded-lg shadow">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Title
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Description
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Instructors
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Dates
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Price
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Status
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {courses.length > 0 ? (
                  courses.map((course) => (
                    <tr key={course.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          {course.attributes.isFeatured && (
                            <StarIcon className="h-4 w-4 text-yellow-500 mr-1" />
                          )}
                          <div className="text-sm font-medium text-gray-900 truncate max-w-xs">
                            {course.attributes.title}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 truncate max-w-xs">
                          {truncateText(course.attributes.description)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {course.attributes.instructors?.data
                            .map((instructor) => instructor.attributes.name)
                            .join(", ") || "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {course.attributes.startDate &&
                          course.attributes.endDate
                            ? `${formatDate(
                                course.attributes.startDate
                              )} - ${formatDate(course.attributes.endDate)}`
                            : "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {course.attributes.isFree
                            ? "Free"
                            : `$${course.attributes.price}`}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            course.attributes.publishedAt
                              ? "bg-green-100 text-green-800"
                              : "bg-yellow-100 text-yellow-800"
                          }`}
                        >
                          {course.attributes.publishedAt
                            ? "Published"
                            : "Draft"}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          {course.attributes.publishedAt && (
                            <Link
                              href={`/dashboard/admin/course/${course.attributes.slug}`}
                              target="_blank"
                              className="text-indigo-600 hover:text-indigo-900"
                            >
                              <EyeIcon className="h-5 w-5" />
                            </Link>
                          )}
                          <Link
                            href={`/dashboard/admin/course/${course.attributes.slug}/edit`}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            <PencilIcon className="h-5 w-5" />
                          </Link>
                          <button
                            onClick={() => {
                              setCourseToDelete(course.id);
                              setShowDeleteModal(true);
                            }}
                            className="text-red-600 hover:text-red-900"
                          >
                            <TrashIcon className="h-5 w-5" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td
                      colSpan={7}
                      className="px-6 py-10 text-center text-gray-500"
                    >
                      No courses found.{" "}
                      {searchQuery && "Try a different search term or "}
                      <Link
                        href="/dashboard/admin/course/create"
                        className="text-purple-600 hover:underline"
                      >
                        create a new course
                      </Link>
                      .
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="mt-6 flex justify-center">
              <nav className="flex items-center" aria-label="Pagination">
                <button
                  onClick={() =>
                    setCurrentPage((prev) => Math.max(prev - 1, 1))
                  }
                  disabled={currentPage === 1}
                  className={`relative inline-flex items-center px-4 py-2 mr-2 text-sm font-medium rounded-md ${
                    currentPage === 1
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-white text-gray-700 hover:bg-gray-50"
                  } border border-gray-300`}
                >
                  Previous
                </button>
                <span className="text-sm text-gray-700">
                  Page {currentPage} of {totalPages}
                </span>
                <button
                  onClick={() =>
                    setCurrentPage((prev) => Math.min(prev + 1, totalPages))
                  }
                  disabled={currentPage === totalPages}
                  className={`relative inline-flex items-center px-4 py-2 ml-2 text-sm font-medium rounded-md ${
                    currentPage === totalPages
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-white text-gray-700 hover:bg-gray-50"
                  } border border-gray-300`}
                >
                  Next
                </button>
              </nav>
            </div>
          )}
        </>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && <DeleteConfirmationModal />}
    </div>
  );
};

export default CourseIndex;

// === ./src/components/dashboard/course/admin/EditClassForm.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import {
  ArrowLeftIcon,
  ArrowPathIcon,
  ExclamationCircleIcon,
  PlusIcon,
  TrashIcon,
  DocumentTextIcon,
  QuestionMarkCircleIcon,
  BookOpenIcon,
  PlayIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";

interface ContentSectionProps {
  type: "video" | "key-concepts" | "writing-prompts" | "additional-materials";
  index: number;
  onDelete: () => void;
  onChange: (data: any) => void;
  data: any;
}

interface EditClassFormProps {
  courseSlug: string;
  classId: string;
}

// Type definitions
interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
    description: string;
  };
}

interface ClassContent {
  video?: any;
  keyConcepts?: any;
  writingPrompts?: any;
  additionalMaterials?: any;
}

interface ClassData {
  id: number;
  attributes: {
    title: string;
    orderIndex: number;
    duration: number;
    content?: ClassContent;
  };
}

const EditClassForm = ({ courseSlug, classId }: EditClassFormProps) => {
  // Prevent default form submission which can cause page refresh and focus loss
  useEffect(() => {
    const handleSubmit = (e: any) => {
      if (e.target.tagName === "INPUT" || e.target.tagName === "TEXTAREA") {
        e.stopPropagation();
      }
    };

    document.addEventListener("submit", handleSubmit, true);

    return () => {
      document.removeEventListener("submit", handleSubmit, true);
    };
  }, []);

  const router = useRouter();
  const [course, setCourse] = useState<Course | null>(null);
  const [courseId, setCourseId] = useState<string | null>(null);
  const [classData, setClassData] = useState<ClassData | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState("");
  const [errorField, setErrorField] = useState<string | null>(null);

  // Refs for scrolling to elements
  const formRef = useRef<HTMLFormElement>(null);
  const successRef = useRef<HTMLDivElement>(null);
  const sectionRefs = useRef<Record<string, HTMLDivElement | null>>({});
  const inputRefs = useRef<
    Record<string, HTMLInputElement | HTMLTextAreaElement | null>
  >({});

  // Track which section types already exist
  const [existingSectionTypes, setExistingSectionTypes] = useState<Set<string>>(
    new Set()
  );
  const [existingAdditionalMaterialTypes, setExistingAdditionalMaterialTypes] =
    useState<Record<number, Set<string>>>({});

  // Form state
  const [formData, setFormData] = useState({
    title: "",
    orderIndex: 1,
    duration: 0,
    content: [] as Array<{
      type:
        | "video"
        | "key-concepts"
        | "writing-prompts"
        | "additional-materials";
      duration: number;
      // Additional fields for each type will be conditionally rendered
      videoDescription?: string;
      videoTranscript?: string;
      keyConceptsContent?: string;
      writingPromptsContent?: string;
      additionalMaterialsContent?: Array<{
        type: "video" | "essay" | "guided-meditation";
        title: string;
        content?: string;
      }>;
    }>,
  });

  // Files state
  const [videoFiles, setVideoFiles] = useState<Record<number, File | null>>({});
  const [audioFiles, setAudioFiles] = useState<Record<number, File | null>>({});
  const [additionalFiles, setAdditionalFiles] = useState<
    Record<string, File | null>
  >({});

  // Existing media URLs for preview
  const [existingVideoUrls, setExistingVideoUrls] = useState<
    Record<number, string>
  >({});
  const [existingAudioUrls, setExistingAudioUrls] = useState<
    Record<number, string>
  >({});
  const [existingAdditionalUrls, setExistingAdditionalUrls] = useState<
    Record<string, string>
  >({});

  // Fetch course and then class data
  useEffect(() => {
    const fetchCourse = async () => {
      setIsLoading(true);
      setError(null);

      try {
        console.log(`Fetching course with slug "${courseSlug}"`);
        const response = await courseApi.getCourseBySlug(courseSlug);

        if (response && response.id) {
          setCourse(response);
          setCourseId(response.id.toString());
          console.log(
            `Found course: "${response.attributes.title}" with ID: ${response.id}`
          );

          // Now fetch class data with the valid course ID
          await fetchClassData(response.id.toString(), classId);
        } else {
          throw new Error("Course not found");
        }
      } catch (err) {
        console.error("Error fetching course:", err);
        setError("Failed to load course. Please check the URL and try again.");
        setIsLoading(false);
      }
    };

    if (courseSlug && classId) {
      fetchCourse();
    }
  }, [courseSlug, classId]);

  // Helper function to get the base URL for media files
  const getBaseUrl = () => {
    return process.env.NEXT_PUBLIC_STRAPI_URL || "";
  };

  // Helper function to convert Strapi media object to URL
  const getMediaUrl = (mediaObject: any) => {
    if (!mediaObject || !mediaObject.data || !mediaObject.data.attributes) {
      return null;
    }

    const url = mediaObject.data.attributes.url;
    if (!url) return null;

    // If it's already an absolute URL, return it as is
    if (url.startsWith("http://") || url.startsWith("https://")) {
      return url;
    }

    // Otherwise, prepend the base URL
    return `${getBaseUrl()}${url}`;
  };

  // This function fetches the class data
  const fetchClassData = async (courseId: string, classId: string) => {
    try {
      console.log(`Fetching class data for class ID "${classId}"`);

      // Use a more complete populate parameter to get all content sections
      const response = await courseApi.getClass(classId);

      if (!response || !response.data) {
        throw new Error("Class not found");
      }

      console.log("Class data received:", response.data);
      setClassData(response.data);

      // Convert class data to form data format
      convertClassDataToFormData(response.data);
    } catch (err) {
      console.error("Error fetching class data:", err);
      setError("Failed to load class data. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const convertClassDataToFormData = (classData: ClassData) => {
    const { attributes } = classData;
    const content = attributes.content || {};

    console.log("Converting class data to form data:", content);

    // Initialize form data with basic class info
    const newFormData = {
      title: attributes.title || "",
      orderIndex: attributes.orderIndex || 1,
      duration: attributes.duration || 0,
      content: [] as any[],
    };

    // Clear existing section types
    setExistingSectionTypes(new Set());
    setExistingAdditionalMaterialTypes({});

    // Process video section if it exists
    if (content.video) {
      console.log("Processing video section:", content.video);

      const videoContent = {
        type: "video" as const,
        duration: content.video.duration || 0,
        videoDescription: content.video.videoDescription || "",
        videoTranscript: content.video.videoTranscript || "",
      };

      newFormData.content.push(videoContent);
      setExistingSectionTypes((prev) => new Set([...prev, "video"]));

      // Store video URL for preview if available
      if (content.video.videoFile) {
        const videoUrl = getMediaUrl(content.video.videoFile);
        if (videoUrl) {
          setExistingVideoUrls((prev) => ({ ...prev, [0]: videoUrl }));
        }
      }

      // Store audio URL for preview if available
      if (content.video.AudioFile) {
        const audioUrl = getMediaUrl(content.video.AudioFile);
        if (audioUrl) {
          setExistingAudioUrls((prev) => ({ ...prev, [0]: audioUrl }));
        }
      }
    }

    // Process key concepts section if it exists
    if (content.keyConcepts) {
      console.log("Processing key concepts section:", content.keyConcepts);

      const keyConceptsContent = {
        type: "key-concepts" as const,
        duration: content.keyConcepts.duration || 0,
        keyConceptsContent: content.keyConcepts.content || "",
      };

      newFormData.content.push(keyConceptsContent);
      setExistingSectionTypes((prev) => new Set([...prev, "key-concepts"]));
    }

    // Process writing prompts section if it exists
    if (content.writingPrompts) {
      console.log(
        "Processing writing prompts section:",
        content.writingPrompts
      );

      const writingPromptsContent = {
        type: "writing-prompts" as const,
        duration: content.writingPrompts.duration || 0,
        writingPromptsContent: content.writingPrompts.content || "",
      };

      newFormData.content.push(writingPromptsContent);
      setExistingSectionTypes((prev) => new Set([...prev, "writing-prompts"]));
    }

    // Process additional materials section if it exists
    if (content.additionalMaterials) {
      console.log(
        "Processing additional materials section:",
        content.additionalMaterials
      );

      const additionalIndex = newFormData.content.length;
      const additionalMaterialsContent = {
        type: "additional-materials" as const,
        duration: content.additionalMaterials.duration || 0,
        additionalMaterialsContent: [] as any[],
      };

      // Initialize tracking set for additional material types
      const materialTypes = new Set<string>();

      // Process video in additional materials
      if (content.additionalMaterials.video) {
        console.log(
          "Found video in additional materials",
          content.additionalMaterials.video
        );

        materialTypes.add("video");
        additionalMaterialsContent.additionalMaterialsContent.push({
          type: "video" as const,
          title: "Video", // Default title if none provided
        });

        // Store video URL
        const videoUrl = getMediaUrl(content.additionalMaterials.video);
        if (videoUrl) {
          setExistingAdditionalUrls((prev) => ({
            ...prev,
            [`${additionalIndex}-0`]: videoUrl,
          }));
        }
      }

      // Process essay in additional materials
      if (content.additionalMaterials.essay) {
        console.log(
          "Found essay in additional materials",
          content.additionalMaterials.essay
        );

        materialTypes.add("essay");
        additionalMaterialsContent.additionalMaterialsContent.push({
          type: "essay" as const,
          title: "Essay", // Default title if none provided
          content: content.additionalMaterials.essay || "",
        });
      }

      // Process guided meditation in additional materials
      if (content.additionalMaterials.guidedMeditation) {
        console.log(
          "Found guided meditation in additional materials",
          content.additionalMaterials.guidedMeditation
        );

        materialTypes.add("guided-meditation");

        // Position matters here - need to know the index after adding other materials
        const meditationIndex =
          additionalMaterialsContent.additionalMaterialsContent.length;

        additionalMaterialsContent.additionalMaterialsContent.push({
          type: "guided-meditation" as const,
          title: "Guided Meditation", // Default title if none provided
        });

        // Store audio URL
        const audioUrl = getMediaUrl(
          content.additionalMaterials.guidedMeditation
        );
        if (audioUrl) {
          setExistingAdditionalUrls((prev) => ({
            ...prev,
            [`${additionalIndex}-${meditationIndex}`]: audioUrl,
          }));
        }
      }

      // Add additional materials section if it has content
      if (additionalMaterialsContent.additionalMaterialsContent.length > 0) {
        newFormData.content.push(additionalMaterialsContent);
        setExistingSectionTypes(
          (prev) => new Set([...prev, "additional-materials"])
        );
        setExistingAdditionalMaterialTypes((prev) => ({
          ...prev,
          [additionalIndex]: materialTypes,
        }));
      }
    }

    // Log the final form data
    console.log("Final form data:", newFormData);

    // Set the form data
    setFormData(newFormData);
  };

  // Scroll to success message when it appears
  useEffect(() => {
    if (successMessage && successRef.current) {
      successRef.current.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [successMessage]);

  // Scroll to error field when validation fails
  useEffect(() => {
    if (errorField && sectionRefs.current[errorField]) {
      sectionRefs.current[errorField]?.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [errorField]);

  // Register refs for inputs to maintain focus
  const registerInputRef = (
    id: string,
    ref: HTMLInputElement | HTMLTextAreaElement | null
  ) => {
    inputRefs.current[id] = ref;
  };

  // Handle basic input changes with focus preservation
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    e.preventDefault();
    e.stopPropagation();

    const { name, value, selectionStart, selectionEnd } = e.target;
    const inputId = e.target.id;

    // Record current selection position
    const currentSelection = {
      start: selectionStart,
      end: selectionEnd,
    };

    // Ensure orderIndex stays at least 1
    if (name === "orderIndex") {
      const orderIndex = Math.max(parseInt(value) || 1, 1);
      setFormData((prev) => ({
        ...prev,
        orderIndex,
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: name === "duration" ? parseInt(value) || 0 : value,
      }));
    }

    // Schedule focus restoration after state update
    setTimeout(() => {
      const input = inputRefs.current[inputId];
      if (input) {
        input.focus();
        if (currentSelection.start !== null && currentSelection.end !== null) {
          input.selectionStart = currentSelection.start;
          input.selectionEnd = currentSelection.end;
        }
      }
    }, 0);
  };

  // Add content section - now checks if the section type already exists
  const addContentSection = (
    type: "video" | "key-concepts" | "writing-prompts" | "additional-materials"
  ) => {
    // Check if section type already exists (for all section types including additional-materials)
    if (existingSectionTypes.has(type)) {
      console.log(`Section type ${type} already exists, ignoring...`);
      // Section already exists, don't add another one
      return;
    }

    // First update the tracking state to prevent duplicate additions
    setExistingSectionTypes((prev) => new Set([...prev, type]));

    const newSection = {
      type,
      duration: 0,
    };

    // Add type-specific default fields
    if (type === "video") {
      Object.assign(newSection, {
        videoDescription: "",
        videoTranscript: "",
      });
    } else if (type === "key-concepts") {
      Object.assign(newSection, {
        keyConceptsContent: "",
      });
    } else if (type === "writing-prompts") {
      Object.assign(newSection, {
        writingPromptsContent: "",
      });
    } else if (type === "additional-materials") {
      Object.assign(newSection, {
        additionalMaterialsContent: [],
      });
    }

    setFormData((prev) => ({
      ...prev,
      content: [...prev.content, newSection],
    }));
  };

  // Remove content section
  const removeContentSection = (index: number) => {
    setFormData((prev) => {
      const section = prev.content[index];
      const newContent = [...prev.content];
      newContent.splice(index, 1);

      // Remove the section type from existingSectionTypes if it's the last of its kind
      const remainingSections = newContent.filter(
        (s) => s.type === section.type
      );
      if (remainingSections.length === 0) {
        setExistingSectionTypes((prev) => {
          const newSet = new Set(prev);
          newSet.delete(section.type);
          return newSet;
        });
      }

      // Remove any additional material types for this section
      if (section.type === "additional-materials") {
        const newExistingAdditionalMaterialTypes = {
          ...existingAdditionalMaterialTypes,
        };
        delete newExistingAdditionalMaterialTypes[index];
        setExistingAdditionalMaterialTypes(newExistingAdditionalMaterialTypes);
      }

      return {
        ...prev,
        content: newContent,
      };
    });

    // Also remove any associated files
    if (videoFiles[index]) {
      const newVideoFiles = { ...videoFiles };
      delete newVideoFiles[index];
      setVideoFiles(newVideoFiles);
    }

    if (audioFiles[index]) {
      const newAudioFiles = { ...audioFiles };
      delete newAudioFiles[index];
      setAudioFiles(newAudioFiles);
    }
  };

  // Update content section with focus preservation
  const updateContentSection = (index: number, data: any) => {
    // Store the focused element to restore focus after state update
    const focusedElement = document.activeElement;
    const selectionStart =
      focusedElement && "selectionStart" in focusedElement
        ? focusedElement.selectionStart
        : null;
    const selectionEnd =
      focusedElement && "selectionEnd" in focusedElement
        ? focusedElement.selectionEnd
        : null;

    setFormData((prev) => {
      const newContent = [...prev.content];
      newContent[index] = {
        ...newContent[index],
        ...data,
      };

      // Update the total class duration based on content sections
      const totalDuration = newContent.reduce(
        (sum, section) => sum + (section.duration || 0),
        0
      );

      return {
        ...prev,
        content: newContent,
        duration: totalDuration,
      };
    });

    // Restore focus after state update
    setTimeout(() => {
      if (focusedElement) {
        // Attempt to refocus the element
        (focusedElement as HTMLElement).focus();

        // Restore selection if applicable
        if (
          "selectionStart" in focusedElement &&
          selectionStart !== null &&
          selectionEnd !== null
        ) {
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionStart = selectionStart;
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionEnd = selectionEnd;
        }
      }
    }, 0);
  };

  // Improved file change handler to avoid UI inconsistencies
  const handleFileChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: "video" | "audio" | "additional",
    index: number,
    subIndex?: number
  ) => {
    e.preventDefault();
    e.stopPropagation();

    const file = e.target.files?.[0] || null;

    // If no file was selected, don't change the current selection
    if (!file) {
      console.log(`No file selected for ${type} upload`);
      return;
    }

    if (type === "video") {
      setVideoFiles((prev) => ({
        ...prev,
        [index]: file,
      }));

      // Also update the validation state to ensure form submission works
      const section = formData.content[index];
      if (section && section.type === "video") {
        console.log(`Updated video file for section ${index}: ${file.name}`);
      }
    } else if (type === "audio") {
      setAudioFiles((prev) => ({
        ...prev,
        [index]: file,
      }));
      console.log(`Updated audio file for section ${index}: ${file.name}`);
    } else if (type === "additional" && subIndex !== undefined) {
      const key = `${index}-${subIndex}`;
      setAdditionalFiles((prev) => ({
        ...prev,
        [key]: file,
      }));
      console.log(`Updated additional file ${key}: ${file.name}`);
    }
  };

  // Add additional material - now checks if material type already exists
  const addAdditionalMaterial = (
    sectionIndex: number,
    type: "video" | "essay" | "guided-meditation"
  ) => {
    // First, check if this material type already exists in this section
    // This check happens BEFORE we attempt to modify any state
    if (existingAdditionalMaterialTypes[sectionIndex]?.has(type)) {
      console.log(
        `Material type ${type} already exists in section ${sectionIndex}, ignoring...`
      );
      // Material type already exists in this section, don't add another one
      return;
    }

    // Update the tracking before adding the material to prevent race conditions
    setExistingAdditionalMaterialTypes((prev) => {
      const newState = { ...prev };
      if (!newState[sectionIndex]) {
        newState[sectionIndex] = new Set();
      }
      newState[sectionIndex].add(type);
      return newState;
    });

    // Now add the new material to the form data
    setFormData((prev) => {
      const newContent = [...prev.content];
      const section = newContent[sectionIndex];

      if (section && section.type === "additional-materials") {
        const newMaterial = {
          type,
          title: "",
          content: type === "essay" ? "" : undefined,
        };

        // Create a new array with the added material
        section.additionalMaterialsContent = [
          ...(section.additionalMaterialsContent || []),
          newMaterial,
        ];
      }

      return {
        ...prev,
        content: newContent,
      };
    });
  };

  // Remove additional material
  const removeAdditionalMaterial = (
    sectionIndex: number,
    materialIndex: number
  ) => {
    setFormData((prev) => {
      const newContent = [...prev.content];
      const section = newContent[sectionIndex];

      if (
        section &&
        section.type === "additional-materials" &&
        section.additionalMaterialsContent
      ) {
        // Get the material type before removing it
        const materialType =
          section.additionalMaterialsContent[materialIndex].type;

        // Remove the material
        section.additionalMaterialsContent.splice(materialIndex, 1);

        // Remove this material type from the existingAdditionalMaterialTypes if it's the last one
        const remainingMaterials = section.additionalMaterialsContent.filter(
          (m) => m.type === materialType
        );
        if (remainingMaterials.length === 0) {
          setExistingAdditionalMaterialTypes((prev) => {
            const newState = { ...prev };
            if (newState[sectionIndex]) {
              newState[sectionIndex].delete(materialType);
            }
            return newState;
          });
        }
      }

      return {
        ...prev,
        content: newContent,
      };
    });

    // Remove associated file if any
    const key = `${sectionIndex}-${materialIndex}`;
    if (additionalFiles[key]) {
      const newAdditionalFiles = { ...additionalFiles };
      delete newAdditionalFiles[key];
      setAdditionalFiles(newAdditionalFiles);
    }
  };

  // Update additional material with focus preservation
  const updateAdditionalMaterial = (
    sectionIndex: number,
    materialIndex: number,
    data: any
  ) => {
    // Store the focused element to restore focus after state update
    const focusedElement = document.activeElement;
    const selectionStart =
      focusedElement && "selectionStart" in focusedElement
        ? focusedElement.selectionStart
        : null;
    const selectionEnd =
      focusedElement && "selectionEnd" in focusedElement
        ? focusedElement.selectionEnd
        : null;

    setFormData((prev) => {
      const newContent = [...prev.content];
      const section = newContent[sectionIndex];

      if (
        section &&
        section.type === "additional-materials" &&
        section.additionalMaterialsContent
      ) {
        section.additionalMaterialsContent[materialIndex] = {
          ...section.additionalMaterialsContent[materialIndex],
          ...data,
        };
      }

      return {
        ...prev,
        content: newContent,
      };
    });

    // Restore focus after state update
    setTimeout(() => {
      if (focusedElement) {
        // Attempt to refocus the element
        (focusedElement as HTMLElement).focus();

        // Restore selection if applicable
        if (
          "selectionStart" in focusedElement &&
          selectionStart !== null &&
          selectionEnd !== null
        ) {
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionStart = selectionStart;
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionEnd = selectionEnd;
        }
      }
    }, 0);
  };

  // Process uploads and prepare data
  const prepareDataForSubmission = async () => {
    try {
      // Upload files and keep track of media IDs
      const mediaIds: Record<string, number> = {};

      // Get the original class data to preserve existing media IDs
      if (classData && classData.attributes && classData.attributes.content) {
        const content = classData.attributes.content;

        // Save video file ID if it exists
        if (content.video?.videoFile?.data?.id) {
          mediaIds[`video_0_original`] = content.video.videoFile.data.id;
        }

        // Save audio file ID if it exists
        if (content.video?.AudioFile?.data?.id) {
          mediaIds[`audio_0_original`] = content.video.AudioFile.data.id;
        }

        // Save additional materials file IDs if they exist
        if (content.additionalMaterials) {
          if (content.additionalMaterials.video?.data?.id) {
            mediaIds[`additional_0-0_original`] =
              content.additionalMaterials.video.data.id;
          }

          if (content.additionalMaterials.guidedMeditation?.data?.id) {
            // Find the index of guided meditation in additionalMaterialsContent
            let meditationIndex = -1;
            const additionalIndex = formData.content.findIndex(
              (section) => section.type === "additional-materials"
            );

            if (additionalIndex >= 0) {
              meditationIndex =
                formData.content[
                  additionalIndex
                ].additionalMaterialsContent?.findIndex(
                  (m) => m.type === "guided-meditation"
                ) || -1;

              if (meditationIndex >= 0) {
                mediaIds[
                  `additional_${additionalIndex}-${meditationIndex}_original`
                ] = content.additionalMaterials.guidedMeditation.data.id;
              }
            }
          }
        }
      }

      // Upload video files
      for (const [index, file] of Object.entries(videoFiles)) {
        if (file) {
          try {
            const result = await courseApi.uploadFile(file);
            mediaIds[`video_${index}`] = result.id;
          } catch (error) {
            console.error(
              `Error uploading video file for section ${index}:`,
              error
            );
            throw new Error(`Failed to upload video file for section ${index}`);
          }
        }
      }

      // Upload audio files
      for (const [index, file] of Object.entries(audioFiles)) {
        if (file) {
          try {
            const result = await courseApi.uploadFile(file);
            mediaIds[`audio_${index}`] = result.id;
          } catch (error) {
            console.error(
              `Error uploading audio file for section ${index}:`,
              error
            );
            throw new Error(`Failed to upload audio file for section ${index}`);
          }
        }
      }

      // Upload additional material files
      for (const [key, file] of Object.entries(additionalFiles)) {
        if (file) {
          try {
            const result = await courseApi.uploadFile(file);
            mediaIds[`additional_${key}`] = result.id;
          } catch (error) {
            console.error(`Error uploading additional file ${key}:`, error);
            throw new Error(`Failed to upload additional file ${key}`);
          }
        }
      }

      // Initialize empty content components
      let videoComponent = null;
      let keyConceptsComponent = null;
      let writingPromptsComponent = null;
      let additionalMaterialsComponent = null;

      // Process each content section and map to the correct component structure
      formData.content.forEach((section, sectionIndex) => {
        if (section.type === "video") {
          // Use new uploaded file or fall back to original ID
          const videoId =
            mediaIds[`video_${sectionIndex}`] ||
            mediaIds[`video_${sectionIndex}_original`] ||
            null;

          const audioId =
            mediaIds[`audio_${sectionIndex}`] ||
            mediaIds[`audio_${sectionIndex}_original`] ||
            null;

          videoComponent = {
            videoFile: videoId,
            videoDescription: section.videoDescription || "",
            videoTranscript: section.videoTranscript || "",
            AudioFile: audioId,
            duration: section.duration || 0,
          };
        } else if (section.type === "key-concepts") {
          keyConceptsComponent = {
            content: section.keyConceptsContent || "",
            duration: section.duration || 0,
          };
        } else if (section.type === "writing-prompts") {
          writingPromptsComponent = {
            content: section.writingPromptsContent || "",
            duration: section.duration || 0,
          };
        } else if (section.type === "additional-materials") {
          // Process additional materials
          const videoMaterial = section.additionalMaterialsContent?.find(
            (m) => m.type === "video"
          );
          const essayMaterial = section.additionalMaterialsContent?.find(
            (m) => m.type === "essay"
          );
          const meditationMaterial = section.additionalMaterialsContent?.find(
            (m) => m.type === "guided-meditation"
          );

          const videoIndex = section.additionalMaterialsContent?.findIndex(
            (m) => m.type === "video"
          );
          const meditationIndex = section.additionalMaterialsContent?.findIndex(
            (m) => m.type === "guided-meditation"
          );

          // Use new uploaded file or fall back to original ID
          const videoFileId =
            videoIndex !== undefined && videoIndex >= 0
              ? mediaIds[`additional_${sectionIndex}-${videoIndex}`] ||
                mediaIds[`additional_${sectionIndex}-${videoIndex}_original`] ||
                null
              : null;

          const meditationFileId =
            meditationIndex !== undefined && meditationIndex >= 0
              ? mediaIds[`additional_${sectionIndex}-${meditationIndex}`] ||
                mediaIds[
                  `additional_${sectionIndex}-${meditationIndex}_original`
                ] ||
                null
              : null;

          additionalMaterialsComponent = {
            video: videoFileId,
            essay: essayMaterial?.content || "",
            guidedMeditation: meditationFileId,
            duration: section.duration || 0,
          };
        }
      });

      // Create final structure for API
      const updatedClassData = {
        title: formData.title,
        orderIndex: Math.max(formData.orderIndex, 1),
        duration: formData.duration,
        course: parseInt(courseId!),
        content: {
          video: videoComponent,
          keyConcepts: keyConceptsComponent,
          writingPrompts: writingPromptsComponent,
          additionalMaterials: additionalMaterialsComponent,
        },
      };

      return updatedClassData;
    } catch (error) {
      console.error("Error preparing data:", error);
      throw error;
    }
  };

  // Updated validateForm function to properly handle file uploads and scrolling to error fields
  const validateForm = (): boolean => {
    setErrorField(null);

    if (!formData.title.trim()) {
      setError("Class title is required");
      setErrorField("title");
      return false;
    }

    if (formData.content.length === 0) {
      setError("At least one content section is required");
      return false;
    }

    // Validate each content section
    for (let i = 0; i < formData.content.length; i++) {
      const section = formData.content[i];

      if (section.type === "video") {
        // For editing, we don't require a new video file if there's an existing one
        const hasExistingVideo = existingVideoUrls[i];
        const hasNewVideo = videoFiles[i];

        if (!hasExistingVideo && !hasNewVideo) {
          setError(`Video file is required for video section ${i + 1}`);
          setErrorField(`section-${i}`);
          return false;
        }
      } else if (
        section.type === "key-concepts" &&
        !section.keyConceptsContent?.trim()
      ) {
        setError(`Content is required for key concepts section ${i + 1}`);
        setErrorField(`section-${i}`);
        return false;
      } else if (
        section.type === "writing-prompts" &&
        !section.writingPromptsContent?.trim()
      ) {
        setError(`Content is required for writing prompts section ${i + 1}`);
        setErrorField(`section-${i}`);
        return false;
      } else if (section.type === "additional-materials") {
        // Additional materials are optional, only validate if they exist
        if (
          section.additionalMaterialsContent &&
          section.additionalMaterialsContent.length > 0
        ) {
          for (let j = 0; j < section.additionalMaterialsContent.length; j++) {
            const material = section.additionalMaterialsContent[j];

            // Validate title for all material types
            if (!material.title?.trim()) {
              setError(
                `Title is required for additional material ${
                  j + 1
                } in section ${i + 1}`
              );
              setErrorField(`section-${i}-material-${j}`);
              return false;
            }

            // Only validate essay content if essay type was added
            if (material.type === "essay" && !material.content?.trim()) {
              setError(`Content is required for essay in section ${i + 1}`);
              setErrorField(`section-${i}-material-${j}`);
              return false;
            }
          }
        }
      }
    }

    return true;
  };

  // Handle form submission with validation
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    e.stopPropagation();

    // Basic validation checks
    if (!courseId) {
      setError("Cannot update class: course ID is missing");
      return;
    }

    if (!classId) {
      setError("Cannot update class: class ID is missing");
      return;
    }

    // IMPORTANT CHANGE: Check if classData has loaded
    if (!classData) {
      setError("Cannot update class: class data is still loading");
      return;
    }

    // Continue with form validation and submission
    if (!validateForm()) {
      return;
    }

    setIsSaving(true);
    setError(null);
    setSuccessMessage("");

    try {
      // Prepare data with file uploads
      const updatedClassData = await prepareDataForSubmission();

      console.log(
        "Submitting updated class data:",
        JSON.stringify(updatedClassData, null, 2)
      );

      // IMPORTANT CHANGE: Use classId prop directly instead of accessing it through classData
      await courseApi.updateClass(classId, updatedClassData);

      setSuccessMessage("Class updated successfully!");

      // Scroll to success message
      if (successRef.current) {
        successRef.current.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }

      // Redirect back to course page after a delay
      setTimeout(() => {
        router.push(`/dashboard/admin/course/${courseSlug}`);
      }, 1500);
    } catch (error) {
      console.error("Error updating class:", error);
      setError("Failed to update class. Please try again.");
    } finally {
      setIsSaving(false);
    }
  };

  // Disable HTML5 validation
  useEffect(() => {
    // Find the form element and disable native HTML5 validation
    const form = document.querySelector("form");
    if (form) {
      form.setAttribute("novalidate", "true");
      console.log(
        "Disabled native form validation, using custom validation instead"
      );
    }
  }, []);

  // Function to register refs for scrolling
  const registerSectionRef = (id: string, ref: HTMLDivElement | null) => {
    sectionRefs.current[id] = ref;
  };

  // Render content section based on type
  const ContentSection = ({
    type,
    index,
    onDelete,
    onChange,
    data,
  }: ContentSectionProps) => {
    const handleInputChange = (
      e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
      e.preventDefault();
      e.stopPropagation();

      const { name, value } = e.target;
      const { selectionStart, selectionEnd } = e.target;
      const inputId = e.target.id;

      // Store selection position for restoration
      const selection = {
        start: selectionStart,
        end: selectionEnd,
      };

      onChange({
        [name]: name === "duration" ? parseInt(value) || 0 : value,
      });

      // Re-focus the input after state update
      setTimeout(() => {
        const input = inputRefs.current[inputId];
        if (input) {
          input.focus();
          if (selection.start !== null && selection.end !== null) {
            input.selectionStart = selection.start;
            input.selectionEnd = selection.end;
          }
        }
      }, 0);
    };

    // Get section title and icon
    let sectionTitle = "";
    let SectionIcon = DocumentTextIcon;

    switch (type) {
      case "video":
        sectionTitle = "Video";
        SectionIcon = PlayIcon;
        break;
      case "key-concepts":
        sectionTitle = "Key Concepts";
        SectionIcon = DocumentTextIcon;
        break;
      case "writing-prompts":
        sectionTitle = "Writing Prompts";
        SectionIcon = BookOpenIcon;
        break;
      case "additional-materials":
        sectionTitle = "Additional Materials";
        SectionIcon = QuestionMarkCircleIcon;
        break;
    }

    return (
      <div
        className="mb-6 border border-gray-200 rounded-lg p-4"
        ref={(el) => registerSectionRef(`section-${index}`, el)}
      >
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center">
            <SectionIcon className="h-5 w-5 text-purple-600 mr-2" />
            <h3 className="text-lg font-medium">{sectionTitle} Section</h3>
          </div>
          <button
            type="button"
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              onDelete();
            }}
            className="text-red-500 hover:text-red-700"
          >
            <TrashIcon className="h-5 w-5" />
          </button>
        </div>
        {/* Common fields for all section types - only duration now */}
        <div className="mb-4">
          <label
            htmlFor={`section-${index}-duration`}
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Duration (minutes)
          </label>
          <input
            type="number"
            id={`section-${index}-duration`}
            name="duration"
            value={data.duration}
            onChange={handleInputChange}
            min="0"
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="0"
            onFocus={(e) => e.stopPropagation()}
            onBlur={(e) => e.stopPropagation()}
            ref={(el) => registerInputRef(`section-${index}-duration`, el)}
          />
        </div>

        {/* Type-specific fields */}
        {type === "video" && (
          <div className="space-y-4">
            <div>
              <label
                htmlFor={`section-${index}-video`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Video File{" "}
                {existingVideoUrls[index] ? (
                  ""
                ) : (
                  <span className="text-red-500">*</span>
                )}
              </label>

              {/* Show existing video if available */}
              {existingVideoUrls[index] && (
                <div className="mb-2">
                  <p className="text-sm text-gray-600 mb-1">
                    Current video file:
                  </p>
                  <div className="bg-gray-100 p-2 rounded text-sm text-gray-700 flex items-center">
                    <PlayIcon className="h-4 w-4 mr-2 text-purple-600" />
                    <span className="truncate">
                      {existingVideoUrls[index].split("/").pop() ||
                        "Video file"}
                    </span>
                  </div>
                </div>
              )}

              <div className="mt-1 flex items-center">
                <input
                  type="file"
                  id={`section-${index}-video`}
                  accept="video/*"
                  onChange={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    handleFileChange(e, "video", index);
                  }}
                  className="hidden" // Hide the default input
                />
                <label
                  htmlFor={`section-${index}-video`}
                  className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                >
                  {existingVideoUrls[index] ? "Replace video" : "Choose file"}
                </label>
                <span className="ml-3 text-sm text-gray-500">
                  {videoFiles[index]
                    ? videoFiles[index].name
                    : "No new file chosen"}
                </span>
              </div>
              {videoFiles[index] && (
                <p className="mt-1 text-sm text-green-600">
                  Selected new file: {videoFiles[index]?.name}
                </p>
              )}
            </div>

            <div>
              <label
                htmlFor={`section-${index}-video-description`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Video Description
              </label>
              <textarea
                id={`section-${index}-video-description`}
                name="videoDescription"
                value={data.videoDescription || ""}
                onChange={handleInputChange}
                rows={3}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Enter video description"
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) =>
                  registerInputRef(`section-${index}-video-description`, el)
                }
              />
            </div>

            <div>
              <label
                htmlFor={`section-${index}-video-transcript`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Video Transcript
              </label>
              <textarea
                id={`section-${index}-video-transcript`}
                name="videoTranscript"
                value={data.videoTranscript || ""}
                onChange={handleInputChange}
                rows={5}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Enter video transcript"
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) =>
                  registerInputRef(`section-${index}-video-transcript`, el)
                }
              />
            </div>

            <div>
              <label
                htmlFor={`section-${index}-audio`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Audio File (Optional)
              </label>

              {/* Show existing audio if available */}
              {existingAudioUrls[index] && (
                <div className="mb-2">
                  <p className="text-sm text-gray-600 mb-1">
                    Current audio file:
                  </p>
                  <div className="bg-gray-100 p-2 rounded text-sm text-gray-700 flex items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-4 w-4 mr-2 text-purple-600"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"
                      />
                    </svg>
                    <span className="truncate">
                      {existingAudioUrls[index].split("/").pop() ||
                        "Audio file"}
                    </span>
                  </div>
                </div>
              )}

              <div className="mt-1 flex items-center">
                <input
                  type="file"
                  id={`section-${index}-audio`}
                  accept="audio/*"
                  onChange={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    handleFileChange(e, "audio", index);
                  }}
                  className="hidden" // Hide the default input
                />
                <label
                  htmlFor={`section-${index}-audio`}
                  className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                >
                  {existingAudioUrls[index] ? "Replace audio" : "Choose file"}
                </label>
                <span className="ml-3 text-sm text-gray-500">
                  {audioFiles[index]
                    ? audioFiles[index].name
                    : "No new file chosen"}
                </span>
              </div>
              {audioFiles[index] && (
                <p className="mt-1 text-sm text-green-600">
                  Selected new file: {audioFiles[index]?.name}
                </p>
              )}
            </div>
          </div>
        )}
        {type === "key-concepts" && (
          <div>
            <label
              htmlFor={`section-${index}-key-concepts`}
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Key Concepts Content <span className="text-red-500">*</span>
            </label>
            <textarea
              id={`section-${index}-key-concepts`}
              name="keyConceptsContent"
              value={data.keyConceptsContent || ""}
              onChange={handleInputChange}
              rows={8}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Enter key concepts in Markdown format"
              required
              onFocus={(e) => e.stopPropagation()}
              onBlur={(e) => e.stopPropagation()}
              ref={(el) =>
                registerInputRef(`section-${index}-key-concepts`, el)
              }
            />
            <p className="mt-1 text-xs text-gray-500">
              You can use Markdown formatting for rich text
            </p>
          </div>
        )}
        {type === "writing-prompts" && (
          <div>
            <label
              htmlFor={`section-${index}-writing-prompts`}
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Writing Prompts Content <span className="text-red-500">*</span>
            </label>
            <textarea
              id={`section-${index}-writing-prompts`}
              name="writingPromptsContent"
              value={data.writingPromptsContent || ""}
              onChange={handleInputChange}
              rows={8}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Enter writing prompts in Markdown format"
              required
              onFocus={(e) => e.stopPropagation()}
              onBlur={(e) => e.stopPropagation()}
              ref={(el) =>
                registerInputRef(`section-${index}-writing-prompts`, el)
              }
            />
            <p className="mt-1 text-xs text-gray-500">
              You can use Markdown formatting for rich text
            </p>
          </div>
        )}
        {type === "additional-materials" && (
          <div>
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-md font-medium">Additional Materials</h4>
              <div className="flex space-x-2">
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    addAdditionalMaterial(index, "video");
                  }}
                  className={`inline-flex items-center px-2 py-1 text-sm rounded 
                    ${
                      existingAdditionalMaterialTypes[index]?.has("video")
                        ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                        : "bg-blue-50 text-blue-700 hover:bg-blue-100"
                    }`}
                  disabled={existingAdditionalMaterialTypes[index]?.has(
                    "video"
                  )}
                >
                  <PlayIcon className="h-4 w-4 mr-1" />
                  Add Video
                </button>
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    addAdditionalMaterial(index, "essay");
                  }}
                  className={`inline-flex items-center px-2 py-1 text-sm rounded 
                    ${
                      existingAdditionalMaterialTypes[index]?.has("essay")
                        ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                        : "bg-green-50 text-green-700 hover:bg-green-100"
                    }`}
                  disabled={existingAdditionalMaterialTypes[index]?.has(
                    "essay"
                  )}
                >
                  <DocumentTextIcon className="h-4 w-4 mr-1" />
                  Add Essay
                </button>
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    addAdditionalMaterial(index, "guided-meditation");
                  }}
                  className={`inline-flex items-center px-2 py-1 text-sm rounded 
                    ${
                      existingAdditionalMaterialTypes[index]?.has(
                        "guided-meditation"
                      )
                        ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                        : "bg-purple-50 text-purple-700 hover:bg-purple-100"
                    }`}
                  disabled={existingAdditionalMaterialTypes[index]?.has(
                    "guided-meditation"
                  )}
                >
                  <BookOpenIcon className="h-4 w-4 mr-1" />
                  Add Meditation
                </button>
              </div>
            </div>

            {!data.additionalMaterialsContent ||
            data.additionalMaterialsContent.length === 0 ? (
              <div className="text-center p-4 bg-gray-50 rounded">
                <p className="text-gray-500">
                  No additional materials added yet
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {data.additionalMaterialsContent.map(
                  (material, materialIndex) => (
                    <div
                      key={materialIndex}
                      className="border border-gray-200 rounded p-3"
                      ref={(el) =>
                        registerSectionRef(
                          `section-${index}-material-${materialIndex}`,
                          el
                        )
                      }
                    >
                      <div className="flex justify-between items-center mb-3">
                        <div className="flex items-center">
                          {material.type === "video" && (
                            <PlayIcon className="h-4 w-4 text-blue-600 mr-2" />
                          )}
                          {material.type === "essay" && (
                            <DocumentTextIcon className="h-4 w-4 text-green-600 mr-2" />
                          )}
                          {material.type === "guided-meditation" && (
                            <BookOpenIcon className="h-4 w-4 text-purple-600 mr-2" />
                          )}
                          <span className="text-sm font-medium capitalize">
                            {material.type.replace("-", " ")}
                          </span>
                        </div>
                        <button
                          type="button"
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            removeAdditionalMaterial(index, materialIndex);
                          }}
                          className="text-red-500 hover:text-red-700"
                        >
                          <TrashIcon className="h-4 w-4" />
                        </button>
                      </div>
                      <div className="mb-3">
                        <label
                          htmlFor={`material-${index}-${materialIndex}-title`}
                          className="block text-sm font-medium text-gray-700 mb-1"
                        >
                          Title
                        </label>
                        <input
                          type="text"
                          id={`material-${index}-${materialIndex}-title`}
                          value={material.title || ""}
                          onChange={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            updateAdditionalMaterial(index, materialIndex, {
                              title: e.target.value,
                            });
                          }}
                          className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                          placeholder="Enter title"
                          onFocus={(e) => e.stopPropagation()}
                          onBlur={(e) => e.stopPropagation()}
                          ref={(el) =>
                            registerInputRef(
                              `material-${index}-${materialIndex}-title`,
                              el
                            )
                          }
                        />
                      </div>

                      {material.type === "video" && (
                        <div>
                          <label
                            htmlFor={`material-${index}-${materialIndex}-file`}
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Video File
                          </label>

                          {/* Show existing video if available */}
                          {existingAdditionalUrls[
                            `${index}-${materialIndex}`
                          ] &&
                            material.type === "video" && (
                              <div className="mb-2">
                                <p className="text-sm text-gray-600 mb-1">
                                  Current video file:
                                </p>
                                <div className="bg-gray-100 p-2 rounded text-sm text-gray-700 flex items-center">
                                  <PlayIcon className="h-4 w-4 mr-2 text-purple-600" />
                                  <span className="truncate">
                                    {existingAdditionalUrls[
                                      `${index}-${materialIndex}`
                                    ]
                                      .split("/")
                                      .pop() || "Video file"}
                                  </span>
                                </div>
                              </div>
                            )}

                          <div className="mt-1 flex items-center">
                            <input
                              type="file"
                              id={`material-${index}-${materialIndex}-file`}
                              accept="video/*"
                              onChange={(e) => {
                                e.preventDefault();
                                e.stopPropagation();
                                handleFileChange(
                                  e,
                                  "additional",
                                  index,
                                  materialIndex
                                );
                              }}
                              className="hidden" // Hide the default input
                            />
                            <label
                              htmlFor={`material-${index}-${materialIndex}-file`}
                              className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                            >
                              {existingAdditionalUrls[
                                `${index}-${materialIndex}`
                              ]
                                ? "Replace video"
                                : "Choose file"}
                            </label>
                            <span className="ml-3 text-sm text-gray-500">
                              {additionalFiles[`${index}-${materialIndex}`]
                                ? additionalFiles[`${index}-${materialIndex}`]
                                    .name
                                : "No new file chosen"}
                            </span>
                          </div>
                          {additionalFiles[`${index}-${materialIndex}`] && (
                            <p className="mt-1 text-sm text-green-600">
                              Selected new file:{" "}
                              {
                                additionalFiles[`${index}-${materialIndex}`]
                                  ?.name
                              }
                            </p>
                          )}
                        </div>
                      )}

                      {material.type === "guided-meditation" && (
                        <div>
                          <label
                            htmlFor={`material-${index}-${materialIndex}-file`}
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Audio File
                          </label>

                          {/* Show existing audio if available */}
                          {existingAdditionalUrls[
                            `${index}-${materialIndex}`
                          ] &&
                            material.type === "guided-meditation" && (
                              <div className="mb-2">
                                <p className="text-sm text-gray-600 mb-1">
                                  Current audio file:
                                </p>
                                <div className="bg-gray-100 p-2 rounded text-sm text-gray-700 flex items-center">
                                  <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    className="h-4 w-4 mr-2 text-purple-600"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                  >
                                    <path
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth={2}
                                      d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"
                                    />
                                  </svg>
                                  <span className="truncate">
                                    {existingAdditionalUrls[
                                      `${index}-${materialIndex}`
                                    ]
                                      .split("/")
                                      .pop() || "Audio file"}
                                  </span>
                                </div>
                              </div>
                            )}

                          <div className="mt-1 flex items-center">
                            <input
                              type="file"
                              id={`material-${index}-${materialIndex}-file`}
                              accept="audio/*"
                              onChange={(e) => {
                                e.preventDefault();
                                e.stopPropagation();
                                handleFileChange(
                                  e,
                                  "additional",
                                  index,
                                  materialIndex
                                );
                              }}
                              className="hidden" // Hide the default input
                            />
                            <label
                              htmlFor={`material-${index}-${materialIndex}-file`}
                              className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                            >
                              {existingAdditionalUrls[
                                `${index}-${materialIndex}`
                              ]
                                ? "Replace audio"
                                : "Choose file"}
                            </label>
                            <span className="ml-3 text-sm text-gray-500">
                              {additionalFiles[`${index}-${materialIndex}`]
                                ? additionalFiles[`${index}-${materialIndex}`]
                                    .name
                                : "No new file chosen"}
                            </span>
                          </div>
                          {additionalFiles[`${index}-${materialIndex}`] && (
                            <p className="mt-1 text-sm text-green-600">
                              Selected new file:{" "}
                              {
                                additionalFiles[`${index}-${materialIndex}`]
                                  ?.name
                              }
                            </p>
                          )}
                        </div>
                      )}

                      {material.type === "essay" && (
                        <div>
                          <label
                            htmlFor={`material-${index}-${materialIndex}-content`}
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Essay Content
                          </label>
                          <textarea
                            id={`material-${index}-${materialIndex}-content`}
                            value={material.content || ""}
                            onChange={(e) => {
                              e.preventDefault();
                              e.stopPropagation();
                              updateAdditionalMaterial(index, materialIndex, {
                                content: e.target.value,
                              });
                            }}
                            rows={5}
                            className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                            placeholder="Enter essay content in Markdown format"
                            onFocus={(e) => e.stopPropagation()}
                            onBlur={(e) => e.stopPropagation()}
                            ref={(el) =>
                              registerInputRef(
                                `material-${index}-${materialIndex}-content`,
                                el
                              )
                            }
                          />
                        </div>
                      )}
                    </div>
                  )
                )}
              </div>
            )}
          </div>
        )}
      </div>
    );
  };

  // Loading state
  if (isLoading) {
    return (
      <div className="flex flex-col justify-center items-center h-64">
        <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin mb-4" />
        <p className="text-gray-600">Loading class content...</p>
      </div>
    );
  }
  // Loading state with improved message
  if (isLoading) {
    return (
      <div className="flex flex-col justify-center items-center h-64">
        <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin mb-4" />
        <p className="text-gray-600">Loading class content...</p>
      </div>
    );
  }

  // Error state with more details
  if (error || !classData) {
    return (
      <div className="flex flex-col items-center justify-center h-64">
        <div className="bg-red-100 p-4 rounded-md text-red-700 max-w-lg text-center">
          <p className="font-medium mb-2">
            {error || "Class data could not be loaded"}
          </p>
          <p className="text-sm">
            Please try again or{" "}
            <Link
              href={`/dashboard/admin/course/${courseSlug}`}
              className="text-purple-600 hover:underline"
            >
              return to the course
            </Link>
          </p>
        </div>
      </div>
    );
  }

  // Empty state for when no content is available despite loading properly
  if (formData.content.length === 0) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="mb-6 flex items-center">
          <Link
            href={`/dashboard/admin/course/${courseSlug}`}
            className="mr-4 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeftIcon className="h-5 w-5" />
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Edit Class</h1>
            {course && (
              <p className="text-sm text-gray-500 mt-1">
                Course: {course.attributes.title}
              </p>
            )}
          </div>
        </div>

        <div className="bg-yellow-50 p-6 rounded-lg border border-yellow-200 mb-6">
          <h3 className="text-lg font-medium text-yellow-800 mb-2 flex items-center">
            <ExclamationCircleIcon className="h-5 w-5 mr-2" />
            No Content Sections Found
          </h3>
          <p className="text-yellow-700 mb-4">
            This class exists but doesn't have any content sections defined yet.
            You can add content sections below.
          </p>
        </div>

        {/* Rest of your form will be here */}
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex items-center">
        <Link
          href={`/dashboard/admin/course/${courseSlug}`}
          className="mr-4 text-gray-600 hover:text-gray-900"
        >
          <ArrowLeftIcon className="h-5 w-5" />
        </Link>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Edit Class</h1>
          {course && (
            <p className="text-sm text-gray-500 mt-1">
              Course: {course.attributes.title}
            </p>
          )}
        </div>
      </div>

      {/* Success message */}
      {successMessage && (
        <div
          ref={successRef}
          className="mb-6 p-4 bg-green-100 text-green-700 rounded-md"
        >
          {successMessage}
        </div>
      )}

      {/* Error message */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md flex items-start">
          <ExclamationCircleIcon className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
          <span>{error}</span>
        </div>
      )}

      <form
        ref={formRef}
        onSubmit={handleSubmit}
        className="bg-white shadow-md rounded-lg p-6"
        noValidate
      >
        {/* Basic class info */}
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Basic Information
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div ref={(el) => registerSectionRef("title", el)}>
              <label
                htmlFor="title"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Class Title <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Enter class title"
                required
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) => registerInputRef("title", el)}
              />
            </div>

            <div>
              <label
                htmlFor="orderIndex"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Class Position
              </label>
              <input
                type="number"
                id="orderIndex"
                name="orderIndex"
                value={formData.orderIndex}
                onChange={handleChange}
                min="1" // Minimum value is 1
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="1"
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) => registerInputRef("orderIndex", el)}
              />
              <p className="mt-1 text-xs text-gray-500">
                Position in the course (1 = first regular class, 0 is reserved
                for intro)
              </p>
            </div>
          </div>

          <div className="mt-4">
            <label
              htmlFor="duration"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Total Duration (minutes)
            </label>
            <input
              type="number"
              id="duration"
              name="duration"
              value={formData.duration}
              onChange={handleChange}
              min="0"
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 bg-gray-100"
              placeholder="0"
              readOnly
              onFocus={(e) => e.stopPropagation()}
              onBlur={(e) => e.stopPropagation()}
              ref={(el) => registerInputRef("duration", el)}
            />
            <p className="mt-1 text-xs text-gray-500">
              This will be calculated automatically from content sections
            </p>
          </div>
        </div>

        {/* Content sections */}
        <div className="mb-6 border-t border-gray-200 pt-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-900">
              Content Sections
            </h2>
            <div className="flex space-x-2">
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("video");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("video")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-blue-50 text-blue-700 hover:bg-blue-100"
                  }`}
                disabled={existingSectionTypes.has("video")}
              >
                <PlayIcon className="h-5 w-5 mr-2" />
                Add Video
              </button>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("key-concepts");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("key-concepts")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-green-50 text-green-700 hover:bg-green-100"
                  }`}
                disabled={existingSectionTypes.has("key-concepts")}
              >
                <DocumentTextIcon className="h-5 w-5 mr-2" />
                Add Key Concepts
              </button>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("writing-prompts");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("writing-prompts")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-yellow-50 text-yellow-700 hover:bg-yellow-100"
                  }`}
                disabled={existingSectionTypes.has("writing-prompts")}
              >
                <BookOpenIcon className="h-5 w-5 mr-2" />
                Add Writing Prompts
              </button>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("additional-materials");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("additional-materials")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-purple-50 text-purple-700 hover:bg-purple-100"
                  }`}
                disabled={existingSectionTypes.has("additional-materials")}
              >
                <QuestionMarkCircleIcon className="h-5 w-5 mr-2" />
                Add Materials
              </button>
            </div>
          </div>

          {formData.content.length === 0 ? (
            <div className="text-center p-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
              <QuestionMarkCircleIcon className="h-10 w-10 mx-auto text-gray-400 mb-4" />
              <p className="text-gray-500 mb-4">
                No content sections added yet
              </p>
              <p className="text-sm text-gray-400 mb-6">
                Add videos, key concepts, writing prompts, or additional
                materials using the buttons above
              </p>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("video");
                }}
                className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
              >
                <PlusIcon className="h-5 w-5 mr-2" />
                Add First Section
              </button>
            </div>
          ) : (
            <div className="space-y-6">
              {formData.content.map((section, index) => (
                <ContentSection
                  key={index}
                  type={section.type}
                  index={index}
                  onDelete={() => removeContentSection(index)}
                  onChange={(data) => updateContentSection(index, data)}
                  data={section}
                />
              ))}
            </div>
          )}
        </div>

        {/* Submit buttons */}
        <div className="flex justify-end space-x-3 border-t border-gray-200 pt-6">
          <Link
            href={`/dashboard/admin/course/${courseSlug}`}
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            Cancel
          </Link>

          <button
            type="submit"
            disabled={isSaving || !courseId}
            className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-purple-400 disabled:cursor-not-allowed"
          >
            {isSaving ? (
              <>
                <ArrowPathIcon className="inline h-4 w-4 mr-2 animate-spin" />
                Updating...
              </>
            ) : (
              "Update Class"
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default EditClassForm;

// === ./src/components/dashboard/course/admin/InstructorForm.tsx ===
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import ReactMarkdown from "react-markdown";
import {
  ArrowLeftIcon,
  ArrowPathIcon,
  ExclamationCircleIcon,
  PhotoIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";

interface InstructorFormProps {
  instructorId?: string; // Optional for editing existing instructors
}

const InstructorForm = ({ instructorId }: InstructorFormProps) => {
  const router = useRouter();
  const isEditMode = !!instructorId;

  // Form state
  const [formData, setFormData] = useState({
    name: "",
    title: "",
    bio: "",
    email: "",
    website: "",
  });

  const [profileImage, setProfileImage] = useState<File | null>(null);
  const [currentProfileImage, setCurrentProfileImage] = useState<string | null>(
    null
  );

  // UI state
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [successMessage, setSuccessMessage] = useState("");
  const [showPreview, setShowPreview] = useState(false);

  // If in edit mode, fetch the existing instructor
  useEffect(() => {
    if (isEditMode) {
      const fetchInstructor = async () => {
        setIsLoading(true);
        try {
          const response = await fetch(
            `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/instructors/${instructorId}?populate=profileImage`,
            {
              headers: {
                Authorization: `Bearer ${localStorage.getItem("jwt")}`,
              },
            }
          );

          if (!response.ok) {
            throw new Error("Failed to fetch instructor data");
          }

          const data = await response.json();

          // Get profile image URL if it exists
          let profileImageUrl = null;
          if (data.data.attributes.profileImage?.data) {
            profileImageUrl = `${process.env.NEXT_PUBLIC_STRAPI_URL || ""}${
              data.data.attributes.profileImage.data.attributes.url
            }`;
            setCurrentProfileImage(profileImageUrl);
          }

          setFormData({
            name: data.data.attributes.name || "",
            title: data.data.attributes.title || "",
            bio: data.data.attributes.bio || "",
            email: data.data.attributes.email || "",
            website: data.data.attributes.website || "",
          });
        } catch (error) {
          console.error("Error fetching instructor:", error);
          setErrors({ form: "Failed to load instructor data" });
        } finally {
          setIsLoading(false);
        }
      };

      fetchInstructor();
    }
  }, [isEditMode, instructorId]);

  // Handle input changes
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));

    // Clear error when field is edited
    if (errors[name]) {
      setErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };

  // Handle file changes
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0] || null;
    setProfileImage(file);
  };

  // Validate form
  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = "Name is required";
    }

    if (!formData.bio.trim()) {
      newErrors.bio = "Bio is required";
    }

    if (formData.email && !/^\S+@\S+\.\S+$/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address";
    }

    if (formData.website && !isValidUrl(formData.website)) {
      newErrors.website = "Please enter a valid URL";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Check if URL is valid
  const isValidUrl = (url: string): boolean => {
    try {
      new URL(url);
      return true;
    } catch (error) {
      return false;
    }
  };

  // Upload a file to Strapi
  const uploadFile = async (file: File): Promise<number> => {
    const formData = new FormData();
    formData.append("files", file);

    const uploadResult = await fetch(
      `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/upload`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${localStorage.getItem("jwt")}`,
        },
        body: formData,
      }
    ).then((res) => res.json());

    return uploadResult[0].id;
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    setIsSaving(true);
    setSuccessMessage("");

    try {
      // Upload profile image if provided
      let profileImageId = null;
      if (profileImage) {
        profileImageId = await uploadFile(profileImage);
      }

      // Prepare instructor data
      const instructorData = {
        name: formData.name,
        title: formData.title,
        bio: formData.bio,
        email: formData.email || undefined,
        website: formData.website || undefined,

        // Handle profile image
        profileImage: profileImageId
          ? { connect: [profileImageId] }
          : undefined,
      };

      if (isEditMode) {
        // Update existing instructor
        await courseApi.updateInstructor(instructorId!, instructorData);
        setSuccessMessage("Instructor updated successfully!");
      } else {
        // Create new instructor
        await courseApi.createInstructor(instructorData);
        setSuccessMessage("Instructor created successfully!");

        // Redirect after a brief delay
        setTimeout(() => {
          router.push("/dashboard/admin/instructors");
        }, 1500);
      }
    } catch (error) {
      console.error("Error saving instructor:", error);
      setErrors({
        form:
          error instanceof Error ? error.message : "An unknown error occurred",
      });
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex items-center">
        <Link
          href="/dashboard/admin/instructors"
          className="mr-4 text-gray-600 hover:text-gray-900"
        >
          <ArrowLeftIcon className="h-5 w-5" />
        </Link>
        <h1 className="text-2xl font-bold text-gray-900">
          {isEditMode ? "Edit Instructor" : "Add New Instructor"}
        </h1>
      </div>

      {/* Success message */}
      {successMessage && (
        <div className="mb-6 p-4 bg-green-100 text-green-700 rounded-md">
          {successMessage}
        </div>
      )}

      {/* Error message */}
      {errors.form && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {errors.form}
        </div>
      )}

      <form
        onSubmit={handleSubmit}
        className="bg-white shadow-md rounded-lg p-6"
      >
        {/* Name */}
        <div className="mb-6">
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Name <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
              errors.name
                ? "border-red-500 focus:ring-red-500"
                : "border-gray-300 focus:ring-purple-500"
            }`}
            placeholder="Enter instructor name"
          />
          {errors.name && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.name}
            </p>
          )}
        </div>

        {/* Title */}
        <div className="mb-6">
          <label
            htmlFor="title"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Title
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={formData.title}
            onChange={handleChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="e.g., Yoga Instructor, Meditation Teacher"
          />
        </div>

        {/* Bio */}
        <div className="mb-6">
          <label
            htmlFor="bio"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Bio <span className="text-red-500">*</span>
          </label>
          <div className="border border-gray-300 rounded-md overflow-hidden">
            <div className="bg-gray-50 px-3 py-2 border-b border-gray-300 flex justify-between items-center">
              <span className="text-xs text-gray-500">Markdown Supported</span>
              <button
                type="button"
                onClick={() => setShowPreview(!showPreview)}
                className="text-xs px-2 py-1 rounded bg-purple-100 text-purple-700 hover:bg-purple-200"
              >
                {showPreview ? "Edit" : "Preview"}
              </button>
            </div>

            <div className="relative">
              {!showPreview ? (
                <textarea
                  id="bio"
                  name="bio"
                  value={formData.bio}
                  onChange={handleChange}
                  rows={8}
                  className={`w-full px-4 py-2 border-0 focus:outline-none focus:ring-0 ${
                    errors.bio ? "bg-red-50" : "bg-white"
                  }`}
                  placeholder="Enter instructor bio"
                />
              ) : (
                <div className="prose max-w-none p-4 min-h-[200px] bg-white overflow-y-auto">
                  <ReactMarkdown>
                    {formData.bio || "Nothing to preview yet"}
                  </ReactMarkdown>
                </div>
              )}
            </div>
          </div>
          {errors.bio && (
            <p className="mt-1 text-sm text-red-600 flex items-center">
              <ExclamationCircleIcon className="h-4 w-4 mr-1" />
              {errors.bio}
            </p>
          )}
        </div>

        {/* Contact Info Section */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Contact Information
          </h3>

          {/* Email */}
          <div className="mb-4">
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                errors.email
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-purple-500"
              }`}
              placeholder="instructor@example.com"
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600 flex items-center">
                <ExclamationCircleIcon className="h-4 w-4 mr-1" />
                {errors.email}
              </p>
            )}
          </div>

          {/* Website */}
          <div className="mb-4">
            <label
              htmlFor="website"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Website
            </label>
            <input
              type="url"
              id="website"
              name="website"
              value={formData.website}
              onChange={handleChange}
              className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${
                errors.website
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-purple-500"
              }`}
              placeholder="https://example.com"
            />
            {errors.website && (
              <p className="mt-1 text-sm text-red-600 flex items-center">
                <ExclamationCircleIcon className="h-4 w-4 mr-1" />
                {errors.website}
              </p>
            )}
          </div>
        </div>

        {/* Profile Image */}
        <div className="mb-6 border-t border-gray-200 pt-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Profile Image
          </h3>

          <div className="mb-4">
            <label
              htmlFor="profileImage"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Instructor Photo
            </label>
            <div className="mt-1 flex items-center">
              <input
                type="file"
                id="profileImage"
                accept="image/*"
                onChange={handleFileChange}
                className="sr-only"
              />
              <label
                htmlFor="profileImage"
                className="relative cursor-pointer bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500"
              >
                <span>Choose file</span>
              </label>
              <p className="ml-3 text-sm text-gray-500">
                {profileImage ? profileImage.name : "No file chosen"}
              </p>
            </div>
            {currentProfileImage && !profileImage && (
              <div className="mt-2">
                <p className="text-sm text-gray-500 mb-2">Current image:</p>
                <div className="w-40 h-40 overflow-hidden rounded-md">
                  <img
                    src={currentProfileImage}
                    alt="Current profile image"
                    className="w-full h-full object-cover"
                  />
                </div>
              </div>
            )}
            <p className="mt-1 text-xs text-gray-500">
              Recommended size: Square image, at least 400x400 pixels
            </p>
          </div>
        </div>

        {/* Submit buttons */}
        <div className="flex justify-end space-x-3">
          <Link
            href="/dashboard/admin/instructors"
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            Cancel
          </Link>
          <button
            type="submit"
            disabled={isSaving}
            className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-purple-400 disabled:cursor-not-allowed"
          >
            {isSaving ? (
              <>
                <ArrowPathIcon className="inline h-4 w-4 mr-2 animate-spin" />
                {isEditMode ? "Updating..." : "Creating..."}
              </>
            ) : (
              <>{isEditMode ? "Update Instructor" : "Add Instructor"}</>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default InstructorForm;

// === ./src/components/dashboard/course/admin/InstructorIndex.tsx ===
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import {
  PencilIcon,
  TrashIcon,
  PlusIcon,
  ArrowPathIcon,
  EyeIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";

// Define Instructor interface
interface Instructor {
  id: number;
  attributes: {
    name: string;
    title: string;
    bio: string;
    email: string;
    website: string;
    profileImage?: {
      data?: {
        id: number;
        attributes: {
          url: string;
          formats: {
            thumbnail: {
              url: string;
            };
          };
        };
      };
    };
    createdAt: string;
    updatedAt: string;
  };
}

const InstructorIndex = () => {
  const [instructors, setInstructors] = useState<Instructor[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [instructorToDelete, setInstructorToDelete] = useState<number | null>(
    null
  );

  // Fetch instructors
  const fetchInstructors = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/instructors?populate=profileImage&sort=name:asc`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("jwt")}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to fetch instructors");
      }

      const data = await response.json();
      setInstructors(data.data);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "An unknown error occurred"
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Initial fetch
  useEffect(() => {
    fetchInstructors();
  }, []);

  // Handle search
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();

    const filteredInstructors = instructors.filter(
      (instructor) =>
        instructor.attributes.name
          .toLowerCase()
          .includes(searchQuery.toLowerCase()) ||
        instructor.attributes.title
          ?.toLowerCase()
          .includes(searchQuery.toLowerCase())
    );

    setInstructors(filteredInstructors);

    if (searchQuery === "") {
      fetchInstructors();
    }
  };

  // Delete instructor
  const deleteInstructor = async (id: number) => {
    try {
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/instructors/${id}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("jwt")}`,
          },
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error?.message || "Failed to delete instructor"
        );
      }

      // Refresh the instructors list
      fetchInstructors();
      setShowDeleteModal(false);
      setInstructorToDelete(null);
    } catch (err) {
      setError(
        err instanceof Error ? err.message : "Failed to delete instructor"
      );
    }
  };

  // Format date for display
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  // Truncate bio for display
  const truncateBio = (text?: string, maxLength = 100) => {
    if (!text) return "-";
    return text.length > maxLength
      ? text.substring(0, maxLength) + "..."
      : text;
  };

  // Confirm delete modal
  const DeleteConfirmationModal = () => {
    const instructor = instructors.find((i) => i.id === instructorToDelete);

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Confirm Delete
          </h3>
          <p className="mb-6 text-gray-600">
            Are you sure you want to delete the instructor "
            {instructor?.attributes.name}"? This action cannot be undone.
          </p>
          <div className="flex justify-end space-x-3">
            <button
              onClick={() => setShowDeleteModal(false)}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
            >
              Cancel
            </button>
            <button
              onClick={() =>
                instructorToDelete !== null &&
                deleteInstructor(instructorToDelete)
              }
              className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
            >
              Delete
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <h1 className="text-2xl font-bold text-gray-900 mb-4 sm:mb-0">
          Instructors
        </h1>
        <div className="flex space-x-2">
          <Link
            href="/dashboard/admin/instructors/create"
            className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
          >
            <PlusIcon className="h-5 w-5 mr-2" />
            New Instructor
          </Link>
          <button
            onClick={fetchInstructors}
            className="inline-flex items-center px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            <ArrowPathIcon className="h-5 w-5" />
          </button>
        </div>
      </div>

      {/* Search bar */}
      <div className="mb-6">
        <form onSubmit={handleSearch} className="flex">
          <input
            type="text"
            placeholder="Search instructors..."
            className="px-4 py-2 border border-gray-300 rounded-l-md flex-grow focus:outline-none focus:ring-2 focus:ring-purple-500"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          <button
            type="submit"
            className="px-4 py-2 bg-purple-600 text-white rounded-r-md hover:bg-purple-700"
          >
            Search
          </button>
        </form>
      </div>

      {/* Error message */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      {/* Loading state */}
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
        </div>
      ) : (
        <>
          {/* Instructors table */}
          <div className="overflow-x-auto bg-white rounded-lg shadow">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Instructor
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Title
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Bio
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Contact
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Created
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {instructors.length > 0 ? (
                  instructors.map((instructor) => (
                    <tr key={instructor.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="h-10 w-10 flex-shrink-0">
                            {instructor.attributes.profileImage?.data ? (
                              <img
                                className="h-10 w-10 rounded-full object-cover"
                                src={`${
                                  process.env.NEXT_PUBLIC_STRAPI_URL || ""
                                }${
                                  instructor.attributes.profileImage.data
                                    .attributes.formats?.thumbnail?.url ||
                                  instructor.attributes.profileImage.data
                                    .attributes.url
                                }`}
                                alt={instructor.attributes.name}
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center">
                                <span className="text-purple-800 font-medium">
                                  {instructor.attributes.name.charAt(0)}
                                </span>
                              </div>
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {instructor.attributes.name}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {instructor.attributes.title || "-"}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 truncate max-w-xs">
                          {truncateBio(instructor.attributes.bio)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {instructor.attributes.email && (
                            <div>
                              <a
                                href={`mailto:${instructor.attributes.email}`}
                                className="text-purple-600 hover:underline"
                              >
                                {instructor.attributes.email}
                              </a>
                            </div>
                          )}
                          {instructor.attributes.website && (
                            <div className="mt-1">
                              <a
                                href={instructor.attributes.website}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-purple-600 hover:underline"
                              >
                                Website
                              </a>
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">
                          {formatDate(instructor.attributes.createdAt)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex justify-end space-x-2">
                          <Link
                            href={`/dashboard/admin/instructors/edit/${instructor.id}`}
                            className="text-blue-600 hover:text-blue-900"
                          >
                            <PencilIcon className="h-5 w-5" />
                          </Link>
                          <button
                            onClick={() => {
                              setInstructorToDelete(instructor.id);
                              setShowDeleteModal(true);
                            }}
                            className="text-red-600 hover:text-red-900"
                          >
                            <TrashIcon className="h-5 w-5" />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td
                      colSpan={6}
                      className="px-6 py-10 text-center text-gray-500"
                    >
                      No instructors found.{" "}
                      {searchQuery && "Try a different search term or "}
                      <Link
                        href="/dashboard/admin/instructors/create"
                        className="text-purple-600 hover:underline"
                      >
                        create a new instructor
                      </Link>
                      .
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && <DeleteConfirmationModal />}
    </div>
  );
};

export default InstructorIndex;

// === ./src/components/dashboard/course/admin/InstructorList.tsx ===
import Image from "next/image";
import Link from "next/link";
import { UserIcon } from "@heroicons/react/24/solid";

interface Instructor {
  id: number;
  attributes: {
    name: string;
    title?: string;
    bio?: string;
    avatar?: {
      data?: {
        attributes: {
          url: string;
        };
      };
    };
    slug?: string;
  };
}

interface InstructorListProps {
  instructors: Instructor[];
}

const InstructorList = ({ instructors }: InstructorListProps) => {
  return (
    <div className="space-y-8">
      {instructors.map((instructor) => {
        const { id, attributes } = instructor;

        // Get avatar URL if available
        const avatarUrl = attributes.avatar?.data
          ? `${process.env.NEXT_PUBLIC_STRAPI_URL}${attributes.avatar.data.attributes.url}`
          : null;

        return (
          <div
            key={id}
            className="flex flex-col md:flex-row items-start md:items-center gap-4 p-4 bg-gray-50 rounded-lg"
          >
            {/* Avatar */}
            <div className="flex-shrink-0">
              {avatarUrl ? (
                <div className="relative h-16 w-16 rounded-full overflow-hidden">
                  <Image
                    src={avatarUrl}
                    alt={attributes.name}
                    fill
                    sizes="64px"
                    className="object-cover"
                  />
                </div>
              ) : (
                <div className="h-16 w-16 rounded-full bg-purple-100 flex items-center justify-center">
                  <UserIcon className="h-8 w-8 text-purple-700" />
                </div>
              )}
            </div>

            {/* Instructor details */}
            <div className="flex-1">
              <h3 className="text-lg font-bold">
                {attributes.slug ? (
                  <Link
                    href={`/instructor/${attributes.slug}`}
                    className="text-purple-700 hover:text-purple-900"
                  >
                    {attributes.name}
                  </Link>
                ) : (
                  attributes.name
                )}
              </h3>

              {attributes.title && (
                <p className="text-gray-600 text-sm mb-2">{attributes.title}</p>
              )}

              {attributes.bio && (
                <p className="text-gray-800 line-clamp-3">{attributes.bio}</p>
              )}
            </div>
          </div>
        );
      })}
    </div>
  );
};

export default InstructorList;

// === ./src/components/dashboard/course/admin/NewClassForm.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import {
  ArrowLeftIcon,
  ArrowPathIcon,
  ExclamationCircleIcon,
  PlusIcon,
  TrashIcon,
  DocumentTextIcon,
  QuestionMarkCircleIcon,
  BookOpenIcon,
  PlayIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";

interface ContentSectionProps {
  type: "video" | "key-concepts" | "writing-prompts" | "additional-materials";
  index: number;
  onDelete: () => void;
  onChange: (data: any) => void;
  data: any;
}

interface NewClassFormProps {
  courseSlug: string;
}

// Type definitions
interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
    description: string;
  };
}

const NewClassForm = ({ courseSlug }: NewClassFormProps) => {
  // Prevent default form submission which can cause page refresh and focus loss
  useEffect(() => {
    const handleSubmit = (e: any) => {
      if (e.target.tagName === "INPUT" || e.target.tagName === "TEXTAREA") {
        e.stopPropagation();
      }
    };

    document.addEventListener("submit", handleSubmit, true);

    return () => {
      document.removeEventListener("submit", handleSubmit, true);
    };
  }, []);

  const router = useRouter();
  const [course, setCourse] = useState<Course | null>(null);
  const [courseId, setCourseId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState("");
  const [nextOrderIndex, setNextOrderIndex] = useState(1); // Minimum is now 1
  const [errorField, setErrorField] = useState<string | null>(null);

  // Refs for scrolling to elements
  const formRef = useRef<HTMLFormElement>(null);
  const successRef = useRef<HTMLDivElement>(null);
  const sectionRefs = useRef<Record<string, HTMLDivElement | null>>({});
  const inputRefs = useRef<
    Record<string, HTMLInputElement | HTMLTextAreaElement | null>
  >({});

  // Track which section types already exist
  const [existingSectionTypes, setExistingSectionTypes] = useState<Set<string>>(
    new Set()
  );
  const [existingAdditionalMaterialTypes, setExistingAdditionalMaterialTypes] =
    useState<Record<number, Set<string>>>({});

  // Form state
  const [formData, setFormData] = useState({
    title: "",
    orderIndex: 1, // Set minimum to 1
    duration: 0,
    content: [] as Array<{
      type:
        | "video"
        | "key-concepts"
        | "writing-prompts"
        | "additional-materials";
      duration: number;
      // Additional fields for each type will be conditionally rendered
      videoDescription?: string;
      videoTranscript?: string;
      keyConceptsContent?: string;
      writingPromptsContent?: string;
      additionalMaterialsContent?: Array<{
        type: "video" | "essay" | "guided-meditation";
        title: string;
        content?: string;
      }>;
    }>,
  });

  // Files state
  const [videoFiles, setVideoFiles] = useState<Record<number, File | null>>({});
  const [audioFiles, setAudioFiles] = useState<Record<number, File | null>>({});
  const [additionalFiles, setAdditionalFiles] = useState<
    Record<string, File | null>
  >({});

  // Step 1: Fetch course by slug
  useEffect(() => {
    const fetchCourse = async () => {
      setIsLoading(true);
      setError(null);

      try {
        console.log(`Fetching course with slug "${courseSlug}"`);
        const response = await courseApi.getCourseBySlug(courseSlug);

        if (response && response.id) {
          // Success: We have a course
          setCourse(response);
          setCourseId(response.id.toString());
          console.log(
            `Found course: "${response.attributes.title}" with ID: ${response.id}`
          );
        } else {
          throw new Error("Course not found");
        }
      } catch (err) {
        console.error("Error fetching course:", err);
        setError("Failed to load course. Please check the URL and try again.");
      } finally {
        setIsLoading(false);
      }
    };

    if (courseSlug) {
      fetchCourse();
    }
  }, [courseSlug]);

  // Step 2: After we have the course ID, fetch classes to determine order index
  useEffect(() => {
    if (!courseId) return;

    const fetchClasses = async () => {
      try {
        console.log(`Fetching classes for course ID "${courseId}"`);
        const classesResponse = await courseApi.getClasses(courseId);

        if (classesResponse && classesResponse.data) {
          const existingClasses = classesResponse.data;
          let nextIndex = 1; // Start with minimum 1

          if (existingClasses.length > 0) {
            // Find the highest order index
            const orderIndices = existingClasses.map(
              (c: any) =>
                c.attributes && typeof c.attributes.orderIndex === "number"
                  ? c.attributes.orderIndex
                  : 1 // Default to 1 if not found
            );

            nextIndex = Math.max(...orderIndices, 0) + 1;
          }

          console.log(`Setting next order index to ${nextIndex}`);
          setNextOrderIndex(nextIndex);

          setFormData((prev) => ({
            ...prev,
            orderIndex: nextIndex,
          }));
        }
      } catch (error) {
        console.warn("Error fetching classes:", error);
        // Default to 1 if we can't fetch classes
        setFormData((prev) => ({
          ...prev,
          orderIndex: 1,
        }));
      }
    };

    fetchClasses();
  }, [courseId]);

  // Scroll to success message when it appears
  useEffect(() => {
    if (successMessage && successRef.current) {
      successRef.current.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [successMessage]);

  // Scroll to error field when validation fails
  useEffect(() => {
    if (errorField && sectionRefs.current[errorField]) {
      sectionRefs.current[errorField]?.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [errorField]);

  // Register refs for inputs to maintain focus
  const registerInputRef = (
    id: string,
    ref: HTMLInputElement | HTMLTextAreaElement | null
  ) => {
    inputRefs.current[id] = ref;
  };

  // Handle basic input changes with focus preservation
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    e.preventDefault();
    e.stopPropagation();

    const { name, value, selectionStart, selectionEnd } = e.target;
    const inputId = e.target.id;

    // Record current selection position
    const currentSelection = {
      start: selectionStart,
      end: selectionEnd,
    };

    // Ensure orderIndex stays at least 1
    if (name === "orderIndex") {
      const orderIndex = Math.max(parseInt(value) || 1, 1);
      setFormData((prev) => ({
        ...prev,
        orderIndex,
      }));
    } else {
      setFormData((prev) => ({
        ...prev,
        [name]: name === "duration" ? parseInt(value) || 0 : value,
      }));
    }

    // Schedule focus restoration after state update
    setTimeout(() => {
      const input = inputRefs.current[inputId];
      if (input) {
        input.focus();
        if (currentSelection.start !== null && currentSelection.end !== null) {
          input.selectionStart = currentSelection.start;
          input.selectionEnd = currentSelection.end;
        }
      }
    }, 0);
  };

  // Add content section - now checks if the section type already exists
  const addContentSection = (
    type: "video" | "key-concepts" | "writing-prompts" | "additional-materials"
  ) => {
    // Check if section type already exists (for all section types including additional-materials)
    if (existingSectionTypes.has(type)) {
      console.log(`Section type ${type} already exists, ignoring...`);
      // Section already exists, don't add another one
      return;
    }

    // First update the tracking state to prevent duplicate additions
    setExistingSectionTypes((prev) => new Set([...prev, type]));

    const newSection = {
      type,
      duration: 0,
    };

    // Add type-specific default fields
    if (type === "video") {
      Object.assign(newSection, {
        videoDescription: "",
        videoTranscript: "",
      });
    } else if (type === "key-concepts") {
      Object.assign(newSection, {
        keyConceptsContent: "",
      });
    } else if (type === "writing-prompts") {
      Object.assign(newSection, {
        writingPromptsContent: "",
      });
    } else if (type === "additional-materials") {
      Object.assign(newSection, {
        additionalMaterialsContent: [],
      });
    }

    setFormData((prev) => ({
      ...prev,
      content: [...prev.content, newSection],
    }));
  };

  // Remove content section
  const removeContentSection = (index: number) => {
    setFormData((prev) => {
      const section = prev.content[index];
      const newContent = [...prev.content];
      newContent.splice(index, 1);

      // Remove the section type from existingSectionTypes if it's the last of its kind
      const remainingSections = newContent.filter(
        (s) => s.type === section.type
      );
      if (remainingSections.length === 0) {
        setExistingSectionTypes((prev) => {
          const newSet = new Set(prev);
          newSet.delete(section.type);
          return newSet;
        });
      }

      // Remove any additional material types for this section
      if (section.type === "additional-materials") {
        const newExistingAdditionalMaterialTypes = {
          ...existingAdditionalMaterialTypes,
        };
        delete newExistingAdditionalMaterialTypes[index];
        setExistingAdditionalMaterialTypes(newExistingAdditionalMaterialTypes);
      }

      return {
        ...prev,
        content: newContent,
      };
    });

    // Also remove any associated files
    if (videoFiles[index]) {
      const newVideoFiles = { ...videoFiles };
      delete newVideoFiles[index];
      setVideoFiles(newVideoFiles);
    }

    if (audioFiles[index]) {
      const newAudioFiles = { ...audioFiles };
      delete newAudioFiles[index];
      setAudioFiles(newAudioFiles);
    }
  };

  // Update content section with focus preservation
  const updateContentSection = (index: number, data: any) => {
    // Store the focused element to restore focus after state update
    const focusedElement = document.activeElement;
    const selectionStart =
      focusedElement && "selectionStart" in focusedElement
        ? focusedElement.selectionStart
        : null;
    const selectionEnd =
      focusedElement && "selectionEnd" in focusedElement
        ? focusedElement.selectionEnd
        : null;

    setFormData((prev) => {
      const newContent = [...prev.content];
      newContent[index] = {
        ...newContent[index],
        ...data,
      };

      // Update the total class duration based on content sections
      const totalDuration = newContent.reduce(
        (sum, section) => sum + (section.duration || 0),
        0
      );

      return {
        ...prev,
        content: newContent,
        duration: totalDuration,
      };
    });

    // Restore focus after state update
    setTimeout(() => {
      if (focusedElement) {
        // Attempt to refocus the element
        (focusedElement as HTMLElement).focus();

        // Restore selection if applicable
        if (
          "selectionStart" in focusedElement &&
          selectionStart !== null &&
          selectionEnd !== null
        ) {
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionStart = selectionStart;
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionEnd = selectionEnd;
        }
      }
    }, 0);
  };

  // Improved file change handler to avoid UI inconsistencies
  const handleFileChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    type: "video" | "audio" | "additional",
    index: number,
    subIndex?: number
  ) => {
    e.preventDefault();
    e.stopPropagation();

    const file = e.target.files?.[0] || null;

    // If no file was selected, don't change the current selection
    if (!file) {
      console.log(`No file selected for ${type} upload`);
      return;
    }

    if (type === "video") {
      setVideoFiles((prev) => ({
        ...prev,
        [index]: file,
      }));

      // Also update the validation state to ensure form submission works
      const section = formData.content[index];
      if (section && section.type === "video") {
        console.log(`Updated video file for section ${index}: ${file.name}`);
      }
    } else if (type === "audio") {
      setAudioFiles((prev) => ({
        ...prev,
        [index]: file,
      }));
      console.log(`Updated audio file for section ${index}: ${file.name}`);
    } else if (type === "additional" && subIndex !== undefined) {
      const key = `${index}-${subIndex}`;
      setAdditionalFiles((prev) => ({
        ...prev,
        [key]: file,
      }));
      console.log(`Updated additional file ${key}: ${file.name}`);
    }
  };

  // Add additional material - now checks if material type already exists
  const addAdditionalMaterial = (
    sectionIndex: number,
    type: "video" | "essay" | "guided-meditation"
  ) => {
    // First, check if this material type already exists in this section
    // This check happens BEFORE we attempt to modify any state
    if (existingAdditionalMaterialTypes[sectionIndex]?.has(type)) {
      console.log(
        `Material type ${type} already exists in section ${sectionIndex}, ignoring...`
      );
      // Material type already exists in this section, don't add another one
      return;
    }

    // Update the tracking before adding the material to prevent race conditions
    setExistingAdditionalMaterialTypes((prev) => {
      const newState = { ...prev };
      if (!newState[sectionIndex]) {
        newState[sectionIndex] = new Set();
      }
      newState[sectionIndex].add(type);
      return newState;
    });

    // Now add the new material to the form data
    setFormData((prev) => {
      const newContent = [...prev.content];
      const section = newContent[sectionIndex];

      if (section && section.type === "additional-materials") {
        const newMaterial = {
          type,
          title: "",
          content: type === "essay" ? "" : undefined,
        };

        // Create a new array with the added material
        section.additionalMaterialsContent = [
          ...(section.additionalMaterialsContent || []),
          newMaterial,
        ];
      }

      return {
        ...prev,
        content: newContent,
      };
    });
  };

  // Remove additional material
  const removeAdditionalMaterial = (
    sectionIndex: number,
    materialIndex: number
  ) => {
    setFormData((prev) => {
      const newContent = [...prev.content];
      const section = newContent[sectionIndex];

      if (
        section &&
        section.type === "additional-materials" &&
        section.additionalMaterialsContent
      ) {
        // Get the material type before removing it
        const materialType =
          section.additionalMaterialsContent[materialIndex].type;

        // Remove the material
        section.additionalMaterialsContent.splice(materialIndex, 1);

        // Remove this material type from the existingAdditionalMaterialTypes if it's the last one
        const remainingMaterials = section.additionalMaterialsContent.filter(
          (m) => m.type === materialType
        );
        if (remainingMaterials.length === 0) {
          setExistingAdditionalMaterialTypes((prev) => {
            const newState = { ...prev };
            if (newState[sectionIndex]) {
              newState[sectionIndex].delete(materialType);
            }
            return newState;
          });
        }
      }

      return {
        ...prev,
        content: newContent,
      };
    });

    // Remove associated file if any
    const key = `${sectionIndex}-${materialIndex}`;
    if (additionalFiles[key]) {
      const newAdditionalFiles = { ...additionalFiles };
      delete newAdditionalFiles[key];
      setAdditionalFiles(newAdditionalFiles);
    }
  };

  // Update additional material with focus preservation
  const updateAdditionalMaterial = (
    sectionIndex: number,
    materialIndex: number,
    data: any
  ) => {
    // Store the focused element to restore focus after state update
    const focusedElement = document.activeElement;
    const selectionStart =
      focusedElement && "selectionStart" in focusedElement
        ? focusedElement.selectionStart
        : null;
    const selectionEnd =
      focusedElement && "selectionEnd" in focusedElement
        ? focusedElement.selectionEnd
        : null;

    setFormData((prev) => {
      const newContent = [...prev.content];
      const section = newContent[sectionIndex];

      if (
        section &&
        section.type === "additional-materials" &&
        section.additionalMaterialsContent
      ) {
        section.additionalMaterialsContent[materialIndex] = {
          ...section.additionalMaterialsContent[materialIndex],
          ...data,
        };
      }

      return {
        ...prev,
        content: newContent,
      };
    });

    // Restore focus after state update
    setTimeout(() => {
      if (focusedElement) {
        // Attempt to refocus the element
        (focusedElement as HTMLElement).focus();

        // Restore selection if applicable
        if (
          "selectionStart" in focusedElement &&
          selectionStart !== null &&
          selectionEnd !== null
        ) {
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionStart = selectionStart;
          (
            focusedElement as HTMLInputElement | HTMLTextAreaElement
          ).selectionEnd = selectionEnd;
        }
      }
    }, 0);
  };

  // Process uploads and prepare data
  const prepareDataForSubmission = async () => {
    try {
      // Upload files and keep track of media IDs
      const mediaIds: Record<string, number> = {};

      // Upload video files
      for (const [index, file] of Object.entries(videoFiles)) {
        if (file) {
          try {
            const result = await courseApi.uploadFile(file);
            mediaIds[`video_${index}`] = result.id;
          } catch (error) {
            console.error(
              `Error uploading video file for section ${index}:`,
              error
            );
            throw new Error(`Failed to upload video file for section ${index}`);
          }
        }
      }

      // Upload audio files
      for (const [index, file] of Object.entries(audioFiles)) {
        if (file) {
          try {
            const result = await courseApi.uploadFile(file);
            mediaIds[`audio_${index}`] = result.id;
          } catch (error) {
            console.error(
              `Error uploading audio file for section ${index}:`,
              error
            );
            throw new Error(`Failed to upload audio file for section ${index}`);
          }
        }
      }

      // Upload additional material files
      for (const [key, file] of Object.entries(additionalFiles)) {
        if (file) {
          try {
            const result = await courseApi.uploadFile(file);
            mediaIds[`additional_${key}`] = result.id;
          } catch (error) {
            console.error(`Error uploading additional file ${key}:`, error);
            throw new Error(`Failed to upload additional file ${key}`);
          }
        }
      }

      // Initialize empty content components
      let videoComponent = null;
      let keyConceptsComponent = null;
      let writingPromptsComponent = null;
      let additionalMaterialsComponent = null;

      // Process each content section and map to the correct component structure
      formData.content.forEach((section, sectionIndex) => {
        if (section.type === "video") {
          const videoId = mediaIds[`video_${sectionIndex}`];
          const audioId = mediaIds[`audio_${sectionIndex}`];

          videoComponent = {
            videoFile: videoId ? videoId : null,
            videoDescription: section.videoDescription || "",
            videoTranscript: section.videoTranscript || "",
            AudioFile: audioId ? audioId : null,
            duration: section.duration || 0,
          };
        } else if (section.type === "key-concepts") {
          keyConceptsComponent = {
            content: section.keyConceptsContent || "",
            duration: section.duration || 0,
          };
        } else if (section.type === "writing-prompts") {
          writingPromptsComponent = {
            content: section.writingPromptsContent || "",
            duration: section.duration || 0,
          };
        } else if (section.type === "additional-materials") {
          // Process additional materials
          const videoMaterial = section.additionalMaterialsContent?.find(
            (m) => m.type === "video"
          );
          const essayMaterial = section.additionalMaterialsContent?.find(
            (m) => m.type === "essay"
          );
          const meditationMaterial = section.additionalMaterialsContent?.find(
            (m) => m.type === "guided-meditation"
          );

          const videoIndex = section.additionalMaterialsContent?.findIndex(
            (m) => m.type === "video"
          );
          const meditationIndex = section.additionalMaterialsContent?.findIndex(
            (m) => m.type === "guided-meditation"
          );

          const videoFileId =
            videoIndex !== undefined && videoIndex >= 0
              ? mediaIds[`additional_${sectionIndex}-${videoIndex}`]
              : null;

          const meditationFileId =
            meditationIndex !== undefined && meditationIndex >= 0
              ? mediaIds[`additional_${sectionIndex}-${meditationIndex}`]
              : null;

          additionalMaterialsComponent = {
            video: videoFileId,
            essay: essayMaterial?.content || "",
            guidedMeditation: meditationFileId,
            duration: section.duration || 0,
          };
        }
      });

      // Create final structure for API
      const classData = {
        title: formData.title,
        orderIndex: Math.max(formData.orderIndex, 1),
        duration: formData.duration,
        course: parseInt(courseId!),
        content: {
          video: videoComponent,
          keyConcepts: keyConceptsComponent,
          writingPrompts: writingPromptsComponent,
          additionalMaterials: additionalMaterialsComponent,
        },
      };

      return classData;
    } catch (error) {
      console.error("Error preparing data:", error);
      throw error;
    }
  };

  // Updated validateForm function to properly handle file uploads and scrolling to error fields
  const validateForm = (): boolean => {
    setErrorField(null);

    if (!formData.title.trim()) {
      setError("Class title is required");
      setErrorField("title");
      return false;
    }

    if (formData.content.length === 0) {
      setError("At least one content section is required");
      return false;
    }

    // Validate each content section
    for (let i = 0; i < formData.content.length; i++) {
      const section = formData.content[i];

      if (section.type === "video") {
        // Check if video file exists
        if (!videoFiles[i]) {
          setError(`Video file is required for video section ${i + 1}`);
          setErrorField(`section-${i}`);
          return false;
        }
        // Clear any possible mismatch between UI and actual file selection
        const videoInput = document.getElementById(
          `section-${i}-video`
        ) as HTMLInputElement;
        if (videoInput && !videoInput.files?.length && videoFiles[i]) {
          // There's a potential mismatch, force the section to use the stored file
          console.log(
            `Ensuring video file is properly recognized for section ${i + 1}`
          );
        }
      } else if (
        section.type === "key-concepts" &&
        !section.keyConceptsContent?.trim()
      ) {
        setError(`Content is required for key concepts section ${i + 1}`);
        setErrorField(`section-${i}`);
        return false;
      } else if (
        section.type === "writing-prompts" &&
        !section.writingPromptsContent?.trim()
      ) {
        setError(`Content is required for writing prompts section ${i + 1}`);
        setErrorField(`section-${i}`);
        return false;
      } // Update the additional materials validation part of the validateForm function
      else if (section.type === "additional-materials") {
        // Additional materials are optional, only validate if they exist
        if (
          section.additionalMaterialsContent &&
          section.additionalMaterialsContent.length > 0
        ) {
          for (let j = 0; j < section.additionalMaterialsContent.length; j++) {
            const material = section.additionalMaterialsContent[j];

            // Validate title for all material types
            if (!material.title?.trim()) {
              setError(
                `Title is required for additional material ${
                  j + 1
                } in section ${i + 1}`
              );
              setErrorField(`section-${i}-material-${j}`);
              return false;
            }

            // Only validate essay content if essay type was added
            if (material.type === "essay" && !material.content?.trim()) {
              setError(`Content is required for essay in section ${i + 1}`);
              setErrorField(`section-${i}-material-${j}`);
              return false;
            }
          }
        }
      }
    }

    return true;
  };

  // Handle form submission with validation
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    e.stopPropagation();

    if (!courseId) {
      setError("Cannot create class: course ID is missing");
      return;
    }

    // Use our custom validation function instead of relying on HTML form validation
    if (!validateForm()) {
      return;
    }

    setIsSaving(true);
    setError(null);
    setSuccessMessage("");

    try {
      // Prepare data with file uploads
      const classData = await prepareDataForSubmission();

      console.log("Submitting class data:", JSON.stringify(classData, null, 2));
      await courseApi.createClass(classData);

      setSuccessMessage("Class created successfully!");

      // Scroll to success message
      if (successRef.current) {
        successRef.current.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }

      // Redirect back to course classes page after a delay
      setTimeout(() => {
        router.push(`/dashboard/admin/course/${courseSlug}`);
      }, 1500);
    } catch (error) {
      console.error("Error creating class:", error);
      setError("Failed to create class. Please try again.");
    } finally {
      setIsSaving(false);
    }
  };

  // Disable HTML5 validation
  useEffect(() => {
    // Find the form element and disable native HTML5 validation
    const form = document.querySelector("form");
    if (form) {
      form.setAttribute("novalidate", "true");
      console.log(
        "Disabled native form validation, using custom validation instead"
      );
    }
  }, []);

  // Function to register refs for scrolling
  const registerSectionRef = (id: string, ref: HTMLDivElement | null) => {
    sectionRefs.current[id] = ref;
  };

  // Render content section based on type
  const ContentSection = ({
    type,
    index,
    onDelete,
    onChange,
    data,
  }: ContentSectionProps) => {
    const handleInputChange = (
      e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
      e.preventDefault();
      e.stopPropagation();

      const { name, value } = e.target;
      const { selectionStart, selectionEnd } = e.target;
      const inputId = e.target.id;

      // Store selection position for restoration
      const selection = {
        start: selectionStart,
        end: selectionEnd,
      };

      onChange({
        [name]: name === "duration" ? parseInt(value) || 0 : value,
      });

      // Re-focus the input after state update
      setTimeout(() => {
        const input = inputRefs.current[inputId];
        if (input) {
          input.focus();
          if (selection.start !== null && selection.end !== null) {
            input.selectionStart = selection.start;
            input.selectionEnd = selection.end;
          }
        }
      }, 0);
    };

    // Get section title and icon
    let sectionTitle = "";
    let SectionIcon = DocumentTextIcon;

    switch (type) {
      case "video":
        sectionTitle = "Video";
        SectionIcon = PlayIcon;
        break;
      case "key-concepts":
        sectionTitle = "Key Concepts";
        SectionIcon = DocumentTextIcon;
        break;
      case "writing-prompts":
        sectionTitle = "Writing Prompts";
        SectionIcon = BookOpenIcon;
        break;
      case "additional-materials":
        sectionTitle = "Additional Materials";
        SectionIcon = QuestionMarkCircleIcon;
        break;
    }

    return (
      <div
        className="mb-6 border border-gray-200 rounded-lg p-4"
        ref={(el) => registerSectionRef(`section-${index}`, el)}
      >
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center">
            <SectionIcon className="h-5 w-5 text-purple-600 mr-2" />
            <h3 className="text-lg font-medium">{sectionTitle} Section</h3>
          </div>
          <button
            type="button"
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              onDelete();
            }}
            className="text-red-500 hover:text-red-700"
          >
            <TrashIcon className="h-5 w-5" />
          </button>
        </div>
        {/* Common fields for all section types - only duration now */}
        <div className="mb-4">
          <label
            htmlFor={`section-${index}-duration`}
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Duration (minutes)
          </label>
          <input
            type="number"
            id={`section-${index}-duration`}
            name="duration"
            value={data.duration}
            onChange={handleInputChange}
            min="0"
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            placeholder="0"
            onFocus={(e) => e.stopPropagation()}
            onBlur={(e) => e.stopPropagation()}
            ref={(el) => registerInputRef(`section-${index}-duration`, el)}
          />
        </div>

        {/* Type-specific fields */}
        {type === "video" && (
          <div className="space-y-4">
            <div>
              <label
                htmlFor={`section-${index}-video`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Video File <span className="text-red-500">*</span>
              </label>
              <div className="mt-1 flex items-center">
                <input
                  type="file"
                  id={`section-${index}-video`}
                  accept="video/*"
                  onChange={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    handleFileChange(e, "video", index);
                  }}
                  className="hidden" // Hide the default input
                />
                <label
                  htmlFor={`section-${index}-video`}
                  className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                >
                  Choose file
                </label>
                <span className="ml-3 text-sm text-gray-500">
                  {videoFiles[index]
                    ? videoFiles[index].name
                    : "No file chosen"}
                </span>
              </div>
              {videoFiles[index] && (
                <p className="mt-1 text-sm text-green-600">
                  Selected: {videoFiles[index]?.name}
                </p>
              )}
            </div>

            <div>
              <label
                htmlFor={`section-${index}-video-description`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Video Description
              </label>
              <textarea
                id={`section-${index}-video-description`}
                name="videoDescription"
                value={data.videoDescription || ""}
                onChange={handleInputChange}
                rows={3}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Enter video description"
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) =>
                  registerInputRef(`section-${index}-video-description`, el)
                }
              />
            </div>

            <div>
              <label
                htmlFor={`section-${index}-video-transcript`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Video Transcript
              </label>
              <textarea
                id={`section-${index}-video-transcript`}
                name="videoTranscript"
                value={data.videoTranscript || ""}
                onChange={handleInputChange}
                rows={5}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Enter video transcript"
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) =>
                  registerInputRef(`section-${index}-video-transcript`, el)
                }
              />
            </div>

            <div>
              <label
                htmlFor={`section-${index}-audio`}
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Audio File (Optional)
              </label>
              <div className="mt-1 flex items-center">
                <input
                  type="file"
                  id={`section-${index}-audio`}
                  accept="audio/*"
                  onChange={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    handleFileChange(e, "audio", index);
                  }}
                  className="hidden" // Hide the default input
                />
                <label
                  htmlFor={`section-${index}-audio`}
                  className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                >
                  Choose file
                </label>
                <span className="ml-3 text-sm text-gray-500">
                  {audioFiles[index]
                    ? audioFiles[index].name
                    : "No file chosen"}
                </span>
              </div>
              {audioFiles[index] && (
                <p className="mt-1 text-sm text-green-600">
                  Selected: {audioFiles[index]?.name}
                </p>
              )}
            </div>
          </div>
        )}
        {type === "key-concepts" && (
          <div>
            <label
              htmlFor={`section-${index}-key-concepts`}
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Key Concepts Content <span className="text-red-500">*</span>
            </label>
            <textarea
              id={`section-${index}-key-concepts`}
              name="keyConceptsContent"
              value={data.keyConceptsContent || ""}
              onChange={handleInputChange}
              rows={8}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Enter key concepts in Markdown format"
              required
              onFocus={(e) => e.stopPropagation()}
              onBlur={(e) => e.stopPropagation()}
              ref={(el) =>
                registerInputRef(`section-${index}-key-concepts`, el)
              }
            />
            <p className="mt-1 text-xs text-gray-500">
              You can use Markdown formatting for rich text
            </p>
          </div>
        )}
        {type === "writing-prompts" && (
          <div>
            <label
              htmlFor={`section-${index}-writing-prompts`}
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Writing Prompts Content <span className="text-red-500">*</span>
            </label>
            <textarea
              id={`section-${index}-writing-prompts`}
              name="writingPromptsContent"
              value={data.writingPromptsContent || ""}
              onChange={handleInputChange}
              rows={8}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Enter writing prompts in Markdown format"
              required
              onFocus={(e) => e.stopPropagation()}
              onBlur={(e) => e.stopPropagation()}
              ref={(el) =>
                registerInputRef(`section-${index}-writing-prompts`, el)
              }
            />
            <p className="mt-1 text-xs text-gray-500">
              You can use Markdown formatting for rich text
            </p>
          </div>
        )}
        {type === "additional-materials" && (
          <div>
            <div className="flex justify-between items-center mb-4">
              <h4 className="text-md font-medium">Additional Materials</h4>
              <div className="flex space-x-2">
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    addAdditionalMaterial(index, "video");
                  }}
                  className={`inline-flex items-center px-2 py-1 text-sm rounded 
                    ${
                      existingAdditionalMaterialTypes[index]?.has("video")
                        ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                        : "bg-blue-50 text-blue-700 hover:bg-blue-100"
                    }`}
                  disabled={existingAdditionalMaterialTypes[index]?.has(
                    "video"
                  )}
                >
                  <PlayIcon className="h-4 w-4 mr-1" />
                  Add Video
                </button>
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    addAdditionalMaterial(index, "essay");
                  }}
                  className={`inline-flex items-center px-2 py-1 text-sm rounded 
                    ${
                      existingAdditionalMaterialTypes[index]?.has("essay")
                        ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                        : "bg-green-50 text-green-700 hover:bg-green-100"
                    }`}
                  disabled={existingAdditionalMaterialTypes[index]?.has(
                    "essay"
                  )}
                >
                  <DocumentTextIcon className="h-4 w-4 mr-1" />
                  Add Essay
                </button>
                <button
                  type="button"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    addAdditionalMaterial(index, "guided-meditation");
                  }}
                  className={`inline-flex items-center px-2 py-1 text-sm rounded 
                    ${
                      existingAdditionalMaterialTypes[index]?.has(
                        "guided-meditation"
                      )
                        ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                        : "bg-purple-50 text-purple-700 hover:bg-purple-100"
                    }`}
                  disabled={existingAdditionalMaterialTypes[index]?.has(
                    "guided-meditation"
                  )}
                >
                  <BookOpenIcon className="h-4 w-4 mr-1" />
                  Add Meditation
                </button>
              </div>
            </div>

            {!data.additionalMaterialsContent ||
            data.additionalMaterialsContent.length === 0 ? (
              <div className="text-center p-4 bg-gray-50 rounded">
                <p className="text-gray-500">
                  No additional materials added yet
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {data.additionalMaterialsContent.map(
                  (material, materialIndex) => (
                    <div
                      key={materialIndex}
                      className="border border-gray-200 rounded p-3"
                      ref={(el) =>
                        registerSectionRef(
                          `section-${index}-material-${materialIndex}`,
                          el
                        )
                      }
                    >
                      <div className="flex justify-between items-center mb-3">
                        <div className="flex items-center">
                          {material.type === "video" && (
                            <PlayIcon className="h-4 w-4 text-blue-600 mr-2" />
                          )}
                          {material.type === "essay" && (
                            <DocumentTextIcon className="h-4 w-4 text-green-600 mr-2" />
                          )}
                          {material.type === "guided-meditation" && (
                            <BookOpenIcon className="h-4 w-4 text-purple-600 mr-2" />
                          )}
                          <span className="text-sm font-medium capitalize">
                            {material.type.replace("-", " ")}
                          </span>
                        </div>
                        <button
                          type="button"
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            removeAdditionalMaterial(index, materialIndex);
                          }}
                          className="text-red-500 hover:text-red-700"
                        >
                          <TrashIcon className="h-4 w-4" />
                        </button>
                      </div>
                      <div className="mb-3">
                        <label
                          htmlFor={`material-${index}-${materialIndex}-title`}
                          className="block text-sm font-medium text-gray-700 mb-1"
                        >
                          Title
                        </label>
                        <input
                          type="text"
                          id={`material-${index}-${materialIndex}-title`}
                          value={material.title || ""}
                          onChange={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            updateAdditionalMaterial(index, materialIndex, {
                              title: e.target.value,
                            });
                          }}
                          className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                          placeholder="Enter title"
                          onFocus={(e) => e.stopPropagation()}
                          onBlur={(e) => e.stopPropagation()}
                          ref={(el) =>
                            registerInputRef(
                              `material-${index}-${materialIndex}-title`,
                              el
                            )
                          }
                        />
                      </div>

                      {material.type === "video" && (
                        <div>
                          <label
                            htmlFor={`material-${index}-${materialIndex}-file`}
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Video File
                          </label>
                          <div className="mt-1 flex items-center">
                            <input
                              type="file"
                              id={`material-${index}-${materialIndex}-file`}
                              accept="video/*"
                              onChange={(e) => {
                                e.preventDefault();
                                e.stopPropagation();
                                handleFileChange(
                                  e,
                                  "additional",
                                  index,
                                  materialIndex
                                );
                              }}
                              className="hidden" // Hide the default input
                            />
                            <label
                              htmlFor={`material-${index}-${materialIndex}-file`}
                              className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                            >
                              Choose file
                            </label>
                            <span className="ml-3 text-sm text-gray-500">
                              {additionalFiles[`${index}-${materialIndex}`]
                                ? additionalFiles[`${index}-${materialIndex}`]
                                    .name
                                : "No file chosen"}
                            </span>
                          </div>
                          {additionalFiles[`${index}-${materialIndex}`] && (
                            <p className="mt-1 text-sm text-green-600">
                              Selected:{" "}
                              {
                                additionalFiles[`${index}-${materialIndex}`]
                                  ?.name
                              }
                            </p>
                          )}
                        </div>
                      )}

                      {material.type === "guided-meditation" && (
                        <div>
                          <label
                            htmlFor={`material-${index}-${materialIndex}-file`}
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Audio File
                          </label>
                          <div className="mt-1 flex items-center">
                            <input
                              type="file"
                              id={`material-${index}-${materialIndex}-file`}
                              accept="audio/*"
                              onChange={(e) => {
                                e.preventDefault();
                                e.stopPropagation();
                                handleFileChange(
                                  e,
                                  "additional",
                                  index,
                                  materialIndex
                                );
                              }}
                              className="hidden" // Hide the default input
                            />
                            <label
                              htmlFor={`material-${index}-${materialIndex}-file`}
                              className="cursor-pointer px-4 py-2 bg-purple-50 text-purple-700 rounded-md hover:bg-purple-100 font-semibold text-sm"
                            >
                              Choose file
                            </label>
                            <span className="ml-3 text-sm text-gray-500">
                              {additionalFiles[`${index}-${materialIndex}`]
                                ? additionalFiles[`${index}-${materialIndex}`]
                                    .name
                                : "No file chosen"}
                            </span>
                          </div>
                          {additionalFiles[`${index}-${materialIndex}`] && (
                            <p className="mt-1 text-sm text-green-600">
                              Selected:{" "}
                              {
                                additionalFiles[`${index}-${materialIndex}`]
                                  ?.name
                              }
                            </p>
                          )}
                        </div>
                      )}

                      {material.type === "essay" && (
                        <div>
                          <label
                            htmlFor={`material-${index}-${materialIndex}-content`}
                            className="block text-sm font-medium text-gray-700 mb-1"
                          >
                            Essay Content
                          </label>
                          <textarea
                            id={`material-${index}-${materialIndex}-content`}
                            value={material.content || ""}
                            onChange={(e) => {
                              e.preventDefault();
                              e.stopPropagation();
                              updateAdditionalMaterial(index, materialIndex, {
                                content: e.target.value,
                              });
                            }}
                            rows={5}
                            className="w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                            placeholder="Enter essay content in Markdown format"
                            onFocus={(e) => e.stopPropagation()}
                            onBlur={(e) => e.stopPropagation()}
                            ref={(el) =>
                              registerInputRef(
                                `material-${index}-${materialIndex}-content`,
                                el
                              )
                            }
                          />
                        </div>
                      )}
                    </div>
                  )
                )}
              </div>
            )}
          </div>
        )}
      </div>
    );
  };

  // Loading state
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-6 flex items-center">
        <Link
          href={`/dashboard/admin/course/${courseSlug}`}
          className="mr-4 text-gray-600 hover:text-gray-900"
        >
          <ArrowLeftIcon className="h-5 w-5" />
        </Link>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Add New Class</h1>
          {course && (
            <p className="text-sm text-gray-500 mt-1">
              Course: {course.attributes.title}
            </p>
          )}
        </div>
      </div>

      {/* Success message */}
      {successMessage && (
        <div
          ref={successRef}
          className="mb-6 p-4 bg-green-100 text-green-700 rounded-md"
        >
          {successMessage}
        </div>
      )}

      {/* Error message */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md flex items-start">
          <ExclamationCircleIcon className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
          <span>{error}</span>
        </div>
      )}

      <form
        ref={formRef}
        onSubmit={handleSubmit}
        className="bg-white shadow-md rounded-lg p-6"
        noValidate
      >
        {/* Basic class info */}
        <div className="mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">
            Basic Information
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div ref={(el) => registerSectionRef("title", el)}>
              <label
                htmlFor="title"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Class Title <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="Enter class title"
                required
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) => registerInputRef("title", el)}
              />
            </div>

            <div>
              <label
                htmlFor="orderIndex"
                className="block text-sm font-medium text-gray-700 mb-1"
              >
                Class Position
              </label>
              <input
                type="number"
                id="orderIndex"
                name="orderIndex"
                value={formData.orderIndex}
                onChange={handleChange}
                min="1" // Minimum value is 1
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder="1"
                onFocus={(e) => e.stopPropagation()}
                onBlur={(e) => e.stopPropagation()}
                ref={(el) => registerInputRef("orderIndex", el)}
              />
              <p className="mt-1 text-xs text-gray-500">
                Position in the course (1 = first regular class, 0 is reserved
                for intro)
              </p>
            </div>
          </div>

          <div className="mt-4">
            <label
              htmlFor="duration"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Total Duration (minutes)
            </label>
            <input
              type="number"
              id="duration"
              name="duration"
              value={formData.duration}
              onChange={handleChange}
              min="0"
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 bg-gray-100"
              placeholder="0"
              readOnly
              onFocus={(e) => e.stopPropagation()}
              onBlur={(e) => e.stopPropagation()}
              ref={(el) => registerInputRef("duration", el)}
            />
            <p className="mt-1 text-xs text-gray-500">
              This will be calculated automatically from content sections
            </p>
          </div>
        </div>

        {/* Content sections */}
        <div className="mb-6 border-t border-gray-200 pt-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-gray-900">
              Content Sections
            </h2>
            <div className="flex space-x-2">
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("video");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("video")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-blue-50 text-blue-700 hover:bg-blue-100"
                  }`}
                disabled={existingSectionTypes.has("video")}
              >
                <PlayIcon className="h-5 w-5 mr-2" />
                Add Video
              </button>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("key-concepts");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("key-concepts")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-green-50 text-green-700 hover:bg-green-100"
                  }`}
                disabled={existingSectionTypes.has("key-concepts")}
              >
                <DocumentTextIcon className="h-5 w-5 mr-2" />
                Add Key Concepts
              </button>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("writing-prompts");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("writing-prompts")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-yellow-50 text-yellow-700 hover:bg-yellow-100"
                  }`}
                disabled={existingSectionTypes.has("writing-prompts")}
              >
                <BookOpenIcon className="h-5 w-5 mr-2" />
                Add Writing Prompts
              </button>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("additional-materials");
                }}
                className={`inline-flex items-center px-3 py-2 rounded 
                  ${
                    existingSectionTypes.has("additional-materials")
                      ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                      : "bg-purple-50 text-purple-700 hover:bg-purple-100"
                  }`}
                disabled={existingSectionTypes.has("additional-materials")}
              >
                <QuestionMarkCircleIcon className="h-5 w-5 mr-2" />
                Add Additional Materials
              </button>
            </div>
          </div>

          {formData.content.length === 0 ? (
            <div className="text-center p-10 bg-gray-50 rounded-lg border border-dashed border-gray-300">
              <QuestionMarkCircleIcon className="h-10 w-10 mx-auto text-gray-400 mb-4" />
              <p className="text-gray-500 mb-4">
                No content sections added yet
              </p>
              <p className="text-sm text-gray-400 mb-6">
                Add videos, key concepts, writing prompts, or additional
                materials using the buttons above
              </p>
              <button
                type="button"
                onClick={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  addContentSection("video");
                }}
                className="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
              >
                <PlusIcon className="h-5 w-5 mr-2" />
                Add First Section
              </button>
            </div>
          ) : (
            <div className="space-y-6">
              {formData.content.map((section, index) => (
                <ContentSection
                  key={index}
                  type={section.type}
                  index={index}
                  onDelete={() => removeContentSection(index)}
                  onChange={(data) => updateContentSection(index, data)}
                  data={section}
                />
              ))}
            </div>
          )}
        </div>

        {/* Submit buttons */}
        <div className="flex justify-end space-x-3 border-t border-gray-200 pt-6">
          <Link
            href={`/dashboard/admin/course/${courseSlug}`}
            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
          >
            Cancel
          </Link>

          <button
            type="submit"
            disabled={isSaving || !courseId}
            className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:bg-purple-400 disabled:cursor-not-allowed"
          >
            {isSaving ? (
              <>
                <ArrowPathIcon className="inline h-4 w-4 mr-2 animate-spin" />
                Creating...
              </>
            ) : (
              "Create Class"
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default NewClassForm;

// === ./src/components/dashboard/course/user/AddTestimonialComponent.tsx ===
"use client";

import { useState } from "react";
import { courseCommentApi } from "@/lib/courseCommentApi";

interface AddTestimonialProps {
  courseId: string;
  onTestimonialAdded?: () => void;
}

const AddTestimonialComponent = ({
  courseId,
  onTestimonialAdded,
}: AddTestimonialProps) => {
  const [testimonial, setTestimonial] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);

  const submitTestimonial = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validate the testimonial text
    if (!testimonial.trim()) {
      setError("Please write your testimonial first");
      return;
    }

    try {
      setIsSubmitting(true);
      setError(null);

      await courseCommentApi.addComment(courseId, "testimonial", testimonial);

      // Reset form and show success message
      setTestimonial("");
      setSuccess(true);
      setIsExpanded(false);

      // Call the callback if provided
      if (onTestimonialAdded) {
        onTestimonialAdded();
      }

      // Hide success message after 5 seconds
      setTimeout(() => {
        setSuccess(false);
      }, 5000);
    } catch (error) {
      console.error("Error submitting testimonial:", error);
      setError("Failed to submit your testimonial. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const toggleForm = () => {
    setIsExpanded(!isExpanded);
    // Reset error when toggling
    setError(null);
  };

  return (
    <div className="mt-8 mb-12">
      {!isExpanded ? (
        <button
          onClick={toggleForm}
          className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
        >
          Share Your Experience
        </button>
      ) : (
        <div className="bg-white rounded-lg shadow-md p-6">
          <h3 className="text-lg font-bold mb-4">Share Your Experience</h3>
          <form onSubmit={submitTestimonial}>
            <textarea
              value={testimonial}
              onChange={(e) => setTestimonial(e.target.value)}
              className={`w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 ${
                error ? "border-red-500" : "border-gray-300"
              }`}
              rows={5}
              placeholder="Share your thoughts about this course..."
              disabled={isSubmitting}
            ></textarea>

            {error && <p className="mt-2 text-sm text-red-600">{error}</p>}

            <div className="mt-4 flex space-x-3">
              <button
                type="button"
                onClick={toggleForm}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                disabled={isSubmitting}
              >
                Cancel
              </button>
              <button
                type="submit"
                className={`px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 ${
                  isSubmitting ? "opacity-70 cursor-not-allowed" : ""
                }`}
                disabled={isSubmitting}
              >
                {isSubmitting ? "Submitting..." : "Submit Testimonial"}
              </button>
            </div>
          </form>
        </div>
      )}

      {success && (
        <div className="mt-4 p-4 bg-green-100 text-green-700 rounded-md">
          Thank you for sharing your testimonial! It has been submitted
          successfully.
        </div>
      )}
    </div>
  );
};

export default AddTestimonialComponent;

// === ./src/components/dashboard/course/user/ClassAdditionalMaterialsComponent.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { courseApi } from "@/lib/courseApi";
import courseProgressApi from "@/lib/courseProgressApi";
import courseCommentApi from "@/lib/courseCommentApi";
import CourseCommentsComponent from "@/components/dashboard/course/user/CourseCommentsComponent";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";
import Link from "next/link";
import {
  PlayIcon,
  PauseIcon,
  ArrowDownTrayIcon,
  ArrowPathIcon,
  BackwardIcon,
  ForwardIcon,
  LinkIcon,
} from "@heroicons/react/24/outline";

interface ClassAdditionalMaterialsComponentProps {
  slug: string;
  classIndex: number;
}

const ClassAdditionalMaterialsComponent = ({
  slug,
  classIndex,
}: ClassAdditionalMaterialsComponentProps) => {
  const [courseClass, setCourseClass] = useState<any>(null);
  const [course, setCourse] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<
    "video" | "essay" | "guidedMeditation" | "comments"
  >("video");
  const [isCompleted, setIsCompleted] = useState(false);
  const [isVideoPlaying, setIsVideoPlaying] = useState(false);
  const [isAudioPlaying, setIsAudioPlaying] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const audioRef = useRef<HTMLAudioElement>(null);
  const [audioCurrentTime, setAudioCurrentTime] = useState(0);
  const [audioDuration, setAudioDuration] = useState(0);
  const [playbackRate, setPlaybackRate] = useState(1);
  const [showPlaybackOptions, setShowPlaybackOptions] = useState(false);
  const [isSeeking, setIsSeeking] = useState(false);
  const [showClipboardNotification, setShowClipboardNotification] =
    useState(false);

  // Video player state
  const [currentTime, setCurrentTime] = useState(0);
  const [videoDuration, setVideoDuration] = useState(0);

  // Additional content state
  const [guidedMeditationTitle, setGuidedMeditationTitle] = useState("");
  const [guidedMeditationDescription, setGuidedMeditationDescription] =
    useState("");
  const [audioMimeType, setAudioMimeType] = useState("");
  const [audioSize, setAudioSize] = useState<number | undefined>(undefined);
  const [audioFileExtension, setAudioFileExtension] = useState("MP3");

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);

        // Get course data
        const courseData = await courseApi.getCourseBySlug(slug);
        if (!courseData) {
          setError("Course not found");
          return;
        }
        setCourse(courseData);

        // Use the specialized function to get class data with additional materials
        const classData = await courseApi.getClassWithAdditionalMaterials(
          slug,
          classIndex
        );
        if (!classData) {
          setError("Class not found");
          return;
        }
        setCourseClass(classData);

        // Extract guided meditation title if it exists
        if (
          classData.attributes?.content?.additionalMaterials
            ?.guidedMeditationTitle
        ) {
          setGuidedMeditationTitle(
            classData.attributes.content.additionalMaterials
              .guidedMeditationTitle
          );
        }

        // Extract guided meditation description if it exists
        if (
          classData.attributes?.content?.additionalMaterials
            ?.guidedMeditationDescription
        ) {
          setGuidedMeditationDescription(
            classData.attributes.content.additionalMaterials
              .guidedMeditationDescription
          );
        }

        // Extract audio file information if it exists
        const meditationData =
          classData.attributes?.content?.additionalMaterials?.guidedMeditation
            ?.data?.attributes;
        if (meditationData) {
          setAudioMimeType(meditationData.mime || "audio/mp3");
          setAudioSize(meditationData.size);

          // Extract file extension from mime type or url
          const mimeToExt: Record<string, string> = {
            "audio/mpeg": "MP3",
            "audio/mp3": "MP3",
            "audio/mp4": "M4A",
            "audio/wav": "WAV",
            "audio/ogg": "OGG",
            "audio/flac": "FLAC",
          };

          // Try to get extension from mime type
          if (meditationData.mime && mimeToExt[meditationData.mime]) {
            setAudioFileExtension(mimeToExt[meditationData.mime]);
          }
          // Fallback to getting extension from URL
          else if (meditationData.url) {
            const urlParts = meditationData.url.split(".");
            if (urlParts.length > 1) {
              const ext = urlParts[urlParts.length - 1].toUpperCase();
              setAudioFileExtension(ext);
            }
          }
        }

        // Get the current progress for this class
        if (courseData.id && classData.id) {
          try {
            const progressData = await courseProgressApi.getUserCourseProgress(
              courseData.id.toString()
            );
            if (progressData && progressData.attributes?.tracking?.classes) {
              const classProgress =
                progressData.attributes.tracking.classes.find(
                  (c: any) => c.classId === classData.id
                );
              if (classProgress) {
                const additionalMaterials =
                  classProgress.additionalMaterials || 0;
                setIsCompleted(additionalMaterials >= 0.99);
              }
            }
          } catch (progressError) {
            console.error("Error fetching progress:", progressError);
          }
        }

        // Set default active tab based on available content
        determineDefaultActiveTab(classData);

        // Fetch comments and user data
      } catch (err) {
        console.error("Error fetching additional materials:", err);
        setError("Failed to load additional materials");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [slug, classIndex]);

  // Determine default active tab based on available content
  const determineDefaultActiveTab = (classData: any) => {
    const additionalMaterials =
      classData.attributes?.content?.additionalMaterials;
    if (!additionalMaterials) return;

    if (additionalMaterials.video?.data) {
      setActiveTab("video");
    } else if (additionalMaterials.essay) {
      setActiveTab("essay");
    } else if (additionalMaterials.guidedMeditation?.data) {
      setActiveTab("guidedMeditation");
    } else {
      setActiveTab("comments");
    }
  };

  // Refs for seeking
  const fastSeekingRef = useRef<{
    active: boolean;
    direction: "forward" | "backward" | null;
  }>({
    active: false,
    direction: null,
  });
  const seekingIntervalRef = useRef<number | null>(null);

  // Handle audio events
  useEffect(() => {
    if (!audioRef.current) return;

    const handleTimeUpdate = () => {
      if (audioRef.current && !isSeeking && !fastSeekingRef.current.active) {
        setAudioCurrentTime(audioRef.current.currentTime);
      }
    };

    const handleLoadedMetadata = () => {
      if (audioRef.current) {
        setAudioDuration(audioRef.current.duration);
      }
    };

    const handleAudioEnd = () => {
      setIsAudioPlaying(false);
    };

    const handleAudioPlay = () => {
      setIsAudioPlaying(true);
    };

    const handleAudioPause = () => {
      setIsAudioPlaying(false);
    };

    const audio = audioRef.current;
    audio.addEventListener("timeupdate", handleTimeUpdate);
    audio.addEventListener("loadedmetadata", handleLoadedMetadata);
    audio.addEventListener("ended", handleAudioEnd);
    audio.addEventListener("play", handleAudioPlay);
    audio.addEventListener("pause", handleAudioPause);

    return () => {
      if (audio) {
        audio.removeEventListener("timeupdate", handleTimeUpdate);
        audio.removeEventListener("loadedmetadata", handleLoadedMetadata);
        audio.removeEventListener("ended", handleAudioEnd);
        audio.removeEventListener("play", handleAudioPlay);
        audio.removeEventListener("pause", handleAudioPause);
      }
    };
  }, [audioRef.current, isSeeking]);

  // Update audio playback rate when it changes
  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.playbackRate = playbackRate;
    }
  }, [playbackRate]);

  const getMediaUrl = (url?: string) => {
    if (!url) return "";

    // Check if it's an absolute URL
    if (url.startsWith("http://") || url.startsWith("https://")) {
      return url;
    }

    // Otherwise, it's a relative URL, so prepend the base URL
    const baseUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
    return `${baseUrl}${url}`;
  };

  // Toggle audio playback
  const toggleAudioPlayback = () => {
    if (!audioRef.current) return;

    if (isAudioPlaying) {
      audioRef.current.pause();
    } else {
      audioRef.current.play().catch((error) => {
        console.error("Error playing audio:", error);
      });
    }
  };

  // Skip forward 30 seconds
  const skipForward = () => {
    if (!audioRef.current) return;

    const newTime = Math.min(
      audioRef.current.currentTime + 30,
      audioRef.current.duration || 0
    );
    audioRef.current.currentTime = newTime;
    setAudioCurrentTime(newTime);
  };

  // Skip backward 30 seconds
  const skipBackward = () => {
    if (!audioRef.current) return;

    const newTime = Math.max(audioRef.current.currentTime - 30, 0);
    audioRef.current.currentTime = newTime;
    setAudioCurrentTime(newTime);
  };

  // Start fast forward/rewind
  const startFastSeeking = (direction: "forward" | "backward") => {
    if (!audioRef.current) return;

    fastSeekingRef.current = { active: true, direction };

    // Clear any existing interval
    if (seekingIntervalRef.current !== null) {
      window.clearInterval(seekingIntervalRef.current);
    }

    // Start a new seeking interval
    seekingIntervalRef.current = window.setInterval(() => {
      if (!audioRef.current || !fastSeekingRef.current.active) return;

      const currentTime = audioRef.current.currentTime;
      const duration = audioRef.current.duration || 0;
      const seekAmount = 1; // Seek 1 second per interval

      if (direction === "forward") {
        const newTime = Math.min(currentTime + seekAmount, duration);
        audioRef.current.currentTime = newTime;
        setAudioCurrentTime(newTime);
      } else {
        const newTime = Math.max(currentTime - seekAmount, 0);
        audioRef.current.currentTime = newTime;
        setAudioCurrentTime(newTime);
      }
    }, 100); // Update every 100ms for smooth seeking
  };

  // Stop fast seeking
  const stopFastSeeking = () => {
    fastSeekingRef.current = { active: false, direction: null };

    if (seekingIntervalRef.current !== null) {
      window.clearInterval(seekingIntervalRef.current);
      seekingIntervalRef.current = null;
    }
  };

  // Clean up seeking interval on unmount
  useEffect(() => {
    return () => {
      if (seekingIntervalRef.current !== null) {
        window.clearInterval(seekingIntervalRef.current);
      }
    };
  }, []);

  // Change playback speed
  const changePlaybackSpeed = (speed: number) => {
    setPlaybackRate(speed);
    setShowPlaybackOptions(false);
  };

  // Toggle video playback
  const toggleVideoPlayback = () => {
    if (!videoRef.current) return;

    if (isVideoPlaying) {
      videoRef.current.pause();
    } else {
      videoRef.current.play().catch((error) => {
        console.error("Error playing video:", error);
      });
    }
  };

  // Handle video time updates
  const handleVideoTimeUpdate = () => {
    if (videoRef.current) {
      setCurrentTime(videoRef.current.currentTime);
    }
  };

  // Handle video metadata loaded
  const handleVideoMetadataLoaded = () => {
    if (videoRef.current) {
      setVideoDuration(videoRef.current.duration);
    }
  };

  // Handle seeking in the audio timeline
  const handleAudioSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!audioRef.current) return;

    const newTime = parseFloat(e.target.value);
    audioRef.current.currentTime = newTime;
    setAudioCurrentTime(newTime);
  };

  // Handle seeking start
  const handleSeekStart = () => {
    setIsSeeking(true);
  };

  // Handle seeking end
  const handleSeekEnd = () => {
    setIsSeeking(false);
  };

  // Handle manual completion
  const handleMarkComplete = async () => {
    if (isCompleted || !course || !courseClass) return;

    try {
      setIsCompleted(true);

      await courseProgressApi.markComponentComplete(
        course.id.toString(),
        courseClass.id.toString(),
        "additionalMaterials"
      );
    } catch (err) {
      console.error("Error marking additional materials as completed:", err);
      setIsCompleted(false);
    }
  };

  // Format time for display
  const formatTime = (seconds: number) => {
    if (isNaN(seconds)) return "0:00";
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds < 10 ? "0" : ""}${remainingSeconds}`;
  };

  // Get file size with proper formatting
  const getFileSize = (size?: number): string => {
    if (!size) return "0 MB"; // Default fallback

    const mbSize = Math.round(size / (1024 * 1024));
    return `${mbSize} MB`;
  };

  // Get title for header display (first part before colon)
  const getDisplayTitle = (fullTitle: string): string => {
    if (!fullTitle) return "";
    const parts = fullTitle.split(":");
    return parts[0].trim();
  };

  // Handle social sharing functionality
  const handleShareLink = () => {
    if (navigator.clipboard) {
      navigator.clipboard
        .writeText(window.location.href)
        .then(() => {
          // Show notification
          setShowClipboardNotification(true);
          // Hide notification after 2 seconds
          setTimeout(() => {
            setShowClipboardNotification(false);
          }, 2000);
        })
        .catch((err) => {
          console.error("Failed to copy link:", err);
        });
    } else {
      const textArea = document.createElement("textarea");
      textArea.value = window.location.href;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand("copy");
      document.body.removeChild(textArea);

      // Show notification
      setShowClipboardNotification(true);
      // Hide notification after 2 seconds
      setTimeout(() => {
        setShowClipboardNotification(false);
      }, 2000);
    }
  };

  const handleShareLinkedIn = () => {
    const url = encodeURIComponent(window.location.href);
    const title = encodeURIComponent(
      "7 Realms of Knowledge - Shunyamurti Teaching"
    );
    window.open(
      `https://www.linkedin.com/sharing/share-offsite/?url=${url}&title=${title}`,
      "_blank"
    );
  };

  const handleShareTwitter = () => {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent(
      "Learning about the 7 Realms of Knowledge from Shunyamurti"
    );
    window.open(
      `https://twitter.com/intent/tweet?url=${url}&text=${text}`,
      "_blank"
    );
  };

  const handleShareFacebook = () => {
    const url = encodeURIComponent(window.location.href);
    window.open(
      `https://www.facebook.com/sharer/sharer.php?u=${url}`,
      "_blank"
    );
  };

  const renderTabContent = () => {
    switch (activeTab) {
      case "video":
        return (
          <div>
            {/* Video player with centered play button */}
            <div className="bg-gray-700 aspect-video relative flex items-center justify-center rounded-md mb-4">
              {videoUrl ? (
                <>
                  <video
                    ref={videoRef}
                    className="w-full h-full"
                    src={videoUrl}
                    onClick={toggleVideoPlayback}
                    onPlay={() => setIsVideoPlaying(true)}
                    onPause={() => setIsVideoPlaying(false)}
                    onTimeUpdate={handleVideoTimeUpdate}
                    onLoadedMetadata={handleVideoMetadataLoaded}
                  >
                    Your browser does not support the video tag.
                  </video>
                  {!isVideoPlaying && (
                    <div
                      className="absolute inset-0 flex items-center justify-center cursor-pointer"
                      onClick={toggleVideoPlayback}
                    >
                      <div className="bg-white bg-opacity-20 rounded-full p-4">
                        <PlayIcon className="h-8 w-8 text-white" />
                      </div>
                    </div>
                  )}

                  {/* Video timeline display */}
                  <div className="absolute bottom-4 left-4 right-4 flex items-center text-xs text-white bg-black bg-opacity-60 px-3 py-1 rounded">
                    <span>{formatTime(currentTime)}</span>
                    <div className="mx-2 flex-grow h-1 bg-gray-600 rounded-full">
                      <div
                        className="h-1 bg-white rounded-full"
                        style={{
                          width: `${
                            videoDuration
                              ? (currentTime / videoDuration) * 100
                              : 0
                          }%`,
                        }}
                      ></div>
                    </div>
                    <span>{formatTime(videoDuration)}</span>
                  </div>
                </>
              ) : (
                <div className="text-white">
                  <button className="bg-white bg-opacity-20 rounded-full p-4">
                    <PlayIcon className="h-8 w-8 text-white" />
                  </button>
                </div>
              )}
            </div>

            {/* Video description */}
            <p className="text-gray-700">
              {videoDescription ||
                "Shunyamurti elaborates on the 7 Realms of Knowledge, expressing the capacities of each type of knowledge and their relationship to intelligence development, and reminding us that surrender to supreme knowledge, the equivalent of facing ego-death, is required for consciousness to expand into infinity."}
            </p>
          </div>
        );

      case "essay":
        return (
          <div>
            <h2 className="text-xl font-bold mb-4">
              The Marriage of Logic and Mysticism
            </h2>
            <div className="prose prose-headings:font-bold prose-headings:text-gray-900 prose-h1:text-xl prose-h2:text-lg prose-p:text-gray-700 prose-li:my-0 prose-ol:list-decimal prose-ul:list-disc max-w-none">
              <ReactMarkdown
                remarkPlugins={[remarkGfm]}
                rehypePlugins={[rehypeRaw]}
                components={{
                  h1: ({ node, ...props }) => (
                    <h1 className="text-xl font-bold mt-4 mb-2" {...props} />
                  ),
                  h2: ({ node, ...props }) => (
                    <h2 className="text-lg font-bold mt-4 mb-2" {...props} />
                  ),
                  h3: ({ node, ...props }) => (
                    <h3 className="text-md font-bold mt-3 mb-1" {...props} />
                  ),
                  p: ({ node, ...props }) => <p className="my-2" {...props} />,
                  ul: ({ node, ...props }) => (
                    <ul className="pl-6 list-disc my-2" {...props} />
                  ),
                  ol: ({ node, ...props }) => (
                    <ol className="pl-6 list-decimal my-2" {...props} />
                  ),
                  li: ({ node, ...props }) => (
                    <li className="ml-2 py-1" {...props} />
                  ),
                  blockquote: ({ node, ...props }) => (
                    <blockquote
                      className="pl-4 italic border-l-4 border-gray-300 my-3"
                      {...props}
                    />
                  ),
                }}
              >
                {essayContent}
              </ReactMarkdown>
            </div>
          </div>
        );

      case "guidedMeditation":
        return (
          <div>
            <h2 className="text-xl font-bold mb-4">
              {getDisplayTitle(guidedMeditationTitle) ||
                "Abide as the Shining Self"}
            </h2>

            <p className="text-gray-700 mb-4">
              {guidedMeditationDescription ||
                "Enter deeply into the stillness of thought-free presence, the silence of pure consciousness. Surrender and dissolve into the luminous Self that shines from the center of Being and transmits beyond infinity."}
              {audioDuration > 0 && ` (${formatTime(audioDuration)})`}
            </p>

            {/* Audio player */}
            <div className="bg-gray-700 rounded-md p-4 mb-4">
              <div className="text-white mb-3 text-center">
                {guidedMeditationTitle ||
                  "Abide as the Shining Self: Spiritual teachings with Shunyamurti"}
              </div>

              {/* Hidden audio element to control playback */}
              {audioUrl && (
                <audio
                  ref={audioRef}
                  src={audioUrl}
                  className="hidden"
                  preload="metadata"
                />
              )}

              <div className="flex justify-center items-center space-x-6 mb-4">
                {/* Playback speed button */}
                <div className="relative">
                  <button
                    className="text-white bg-transparent border border-white px-3 py-1 rounded text-xs"
                    onClick={() => setShowPlaybackOptions(!showPlaybackOptions)}
                  >
                    x{playbackRate}
                  </button>

                  {/* Playback speed options dropdown */}
                  {showPlaybackOptions && (
                    <div className="absolute -left-4 bottom-8 bg-gray-800 rounded p-1 z-10">
                      <div className="flex flex-col">
                        {[0.5, 0.75, 1, 1.25, 1.5, 2].map((speed) => (
                          <button
                            key={speed}
                            className={`px-4 py-1 text-xs ${
                              playbackRate === speed
                                ? "bg-purple-600 text-white"
                                : "text-white hover:bg-gray-700"
                            }`}
                            onClick={() => changePlaybackSpeed(speed)}
                          >
                            x{speed}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}
                </div>

                {/* Skip backward 30s */}
                <button
                  className="text-white p-1 hover:bg-gray-600"
                  onClick={skipBackward}
                  disabled={!audioUrl}
                  aria-label="Skip backward 30 seconds"
                >
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 5V1L7 6L12 11V7C15.31 7 18 9.69 18 13C18 16.31 15.31 19 12 19C8.69 19 6 16.31 6 13H4C4 17.42 7.58 21 12 21C16.42 21 20 17.42 20 13C20 8.58 16.42 5 12 5Z"
                      fill="white"
                    />
                    <text
                      x="8.5"
                      y="16"
                      fontSize="7"
                      fill="white"
                      fontWeight="bold"
                    >
                      30
                    </text>
                  </svg>
                </button>

                {/* Play/Pause */}
                <button
                  className="bg-white rounded-full w-12 h-12 flex items-center justify-center focus:outline-none"
                  onClick={toggleAudioPlayback}
                  disabled={!audioUrl}
                  aria-label={isAudioPlaying ? "Pause" : "Play"}
                >
                  {isAudioPlaying ? (
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M6 19H10V5H6V19ZM14 5V19H18V5H14Z"
                        fill="#374151"
                      />
                    </svg>
                  ) : (
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path d="M8 5V19L19 12L8 5Z" fill="#374151" />
                    </svg>
                  )}
                </button>

                {/* Skip forward 30s */}
                <button
                  className="text-white p-1 hover:bg-gray-600"
                  onClick={skipForward}
                  disabled={!audioUrl}
                  aria-label="Skip forward 30 seconds"
                >
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M4 13C4 17.42 7.58 21 12 21C16.42 21 20 17.42 20 13H18C18 16.31 15.31 19 12 19C8.69 19 6 16.31 6 13C6 9.69 8.69 7 12 7V11L17 6L12 1V5C7.58 5 4 8.58 4 13Z"
                      fill="white"
                    />
                    <text
                      x="8.5"
                      y="16"
                      fontSize="7"
                      fill="white"
                      fontWeight="bold"
                    >
                      30
                    </text>
                  </svg>
                </button>

                {/* Download button */}
                {audioUrl && (
                  <a
                    href={audioUrl}
                    download
                    className="text-white"
                    title="Download audio"
                    aria-label="Download audio"
                  >
                    <svg
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M19 9H15V3H9V9H5L12 16L19 9ZM5 18V20H19V18H5Z"
                        fill="white"
                      />
                    </svg>
                  </a>
                )}
              </div>

              {/* Audio timeline */}
              <div className="relative w-full h-2 bg-gray-600 rounded-full mb-1">
                <input
                  type="range"
                  min="0"
                  max={audioDuration || 100}
                  value={audioCurrentTime}
                  onChange={handleAudioSeek}
                  onMouseDown={handleSeekStart}
                  onMouseUp={handleSeekEnd}
                  onTouchStart={handleSeekStart}
                  onTouchEnd={handleSeekEnd}
                  className="absolute inset-0 w-full h-full cursor-pointer opacity-0 z-10"
                  disabled={!audioUrl}
                />
                <div
                  className="absolute h-2 rounded-full bg-white"
                  style={{
                    width: `${
                      audioDuration
                        ? (audioCurrentTime / audioDuration) * 100
                        : 0
                    }%`,
                  }}
                ></div>
              </div>

              <div className="flex justify-between text-white text-xs">
                <span>{formatTime(audioCurrentTime)}</span>
                <span>{formatTime(audioDuration)}</span>
              </div>
            </div>

            {/* Audio download info */}
            <div className="flex items-center justify-between bg-white p-3 border border-gray-200 rounded-md">
              <div className="flex items-center">
                <div className="w-10 h-10 bg-blue-600 text-white flex items-center justify-center rounded-md mr-3 text-xs font-bold">
                  {audioFileExtension}
                </div>
                <div>
                  <div className="font-medium">Audio</div>
                  <div className="text-sm text-gray-500">
                    {getFileSize(audioSize)}
                  </div>
                </div>
              </div>

              {audioUrl && (
                <a
                  href={audioUrl}
                  download
                  className="text-purple-600 hover:text-purple-800 flex items-center"
                >
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M5 20H19V18H5V20ZM19 9H15V3H9V9H5L12 16L19 9Z"
                      fill="#9333EA"
                    />
                  </svg>
                  <span className="ml-1">Download</span>
                </a>
              )}
            </div>
          </div>
        );

      case "comments":
        return (
          <div className="bg-gray-50 -mx-6 -mb-6 px-6 py-6">
            {course && courseClass && (
              <CourseCommentsComponent
                courseId={course.id.toString()}
                classIndex={classIndex}
                sectionType="additionalMaterials"
              />
            )}
          </div>
        );

      default:
        return <div>Select a tab to view content</div>;
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-24">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error || !courseClass) {
    return (
      <div className="p-4 bg-red-50 text-red-700 rounded-md">
        {error || "No additional materials found"}
      </div>
    );
  }

  // Get the actual data from the API response
  const additionalMaterials =
    courseClass.attributes?.content?.additionalMaterials || {};
  const videoData = additionalMaterials.video?.data?.attributes;
  const videoUrl = videoData ? getMediaUrl(videoData.url) : "";
  const videoDescription = additionalMaterials.videoDescription || "";
  const essayContent = additionalMaterials.essay || "";
  const meditationData = additionalMaterials.guidedMeditation?.data?.attributes;
  const audioUrl = meditationData ? getMediaUrl(meditationData.url) : "";

  return (
    <div className="relative">
      {/* Custom styles for animation */}
      <style jsx>{`
        @keyframes fadeInOut {
          0% {
            opacity: 0;
            transform: translateY(-10px);
          }
          10% {
            opacity: 1;
            transform: translateY(0);
          }
          90% {
            opacity: 1;
            transform: translateY(0);
          }
          100% {
            opacity: 0;
            transform: translateY(-10px);
          }
        }

        .animate-fade-in-out {
          animation: fadeInOut 2s ease-in-out;
        }
      `}</style>

      {/* Clipboard notification */}
      {showClipboardNotification && (
        <div className="fixed top-1/4 left-1/2 transform -translate-x-1/2 z-50 bg-gray-800 text-white px-4 py-2 rounded shadow-lg text-sm animate-fade-in-out flex items-center">
          <svg
            className="h-4 w-4 mr-2"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M5 13l4 4L19 7"
            />
          </svg>
          Link copied to clipboard
        </div>
      )}

      {/* Header with tabs navigation and social sharing buttons */}
      <div className="flex justify-between items-center mb-6">
        {/* Tabs navigation */}
        <div className="border-b border-gray-200 flex-grow">
          <nav className="flex -mb-px space-x-8">
            {videoUrl && (
              <button
                onClick={() => setActiveTab("video")}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === "video"
                    ? "border-purple-500 text-purple-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                Video
              </button>
            )}
            {essayContent && (
              <button
                onClick={() => setActiveTab("essay")}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === "essay"
                    ? "border-purple-500 text-purple-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                Essay
              </button>
            )}
            {audioUrl && (
              <button
                onClick={() => setActiveTab("guidedMeditation")}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === "guidedMeditation"
                    ? "border-purple-500 text-purple-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                Guided meditation
              </button>
            )}
            <button
              onClick={() => setActiveTab("comments")}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === "comments"
                  ? "border-purple-500 text-purple-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              Comments
            </button>
          </nav>
        </div>

        {/* Social sharing buttons - only show for video tab */}
        {activeTab === "video" && (
          <div className="flex space-x-2 ml-4">
            {/* Copy Link Button */}
            <button
              onClick={handleShareLink}
              className="p-2 rounded-full hover:bg-gray-100"
              title="Copy link"
            >
              <LinkIcon className="h-5 w-5 text-gray-600" />
            </button>

            {/* LinkedIn Button */}
            <button
              onClick={handleShareLinkedIn}
              className="p-2 rounded-full hover:bg-gray-100"
              title="Share on LinkedIn"
            >
              <svg
                className="h-5 w-5 text-gray-600"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
              </svg>
            </button>

            {/* Twitter/X Button */}
            <button
              onClick={handleShareTwitter}
              className="p-2 rounded-full hover:bg-gray-100"
              title="Share on X (Twitter)"
            >
              <svg
                className="h-5 w-5 text-gray-600"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
              </svg>
            </button>

            {/* Facebook Button */}
            <button
              onClick={handleShareFacebook}
              className="p-2 rounded-full hover:bg-gray-100"
              title="Share on Facebook"
            >
              <svg
                className="h-5 w-5 text-gray-600"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" />
              </svg>
            </button>
          </div>
        )}
      </div>

      {/* Content for the active tab */}
      {renderTabContent()}

      {/* Mark as completed button */}
      <div className="mt-8 flex justify-end">
        <button
          onClick={handleMarkComplete}
          disabled={isCompleted}
          className={`px-6 py-3 rounded-md flex items-center ${
            isCompleted
              ? "bg-gray-100 text-gray-500 cursor-not-allowed"
              : "bg-green-600 text-white hover:bg-green-700"
          }`}
        >
          {isCompleted ? (
            <>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5 mr-2"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              Completed
            </>
          ) : (
            "Mark as completed"
          )}
        </button>
      </div>
    </div>
  );
};

export default ClassAdditionalMaterialsComponent;

// === ./src/components/dashboard/course/user/ClassComponentLayout.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { ArrowLeftIcon } from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";
import { courseProgressApi } from "@/lib/courseProgressApi";

interface ClassComponentLayoutProps {
  slug: string;
  classIndex: number;
  componentIndex: number;
  children: React.ReactNode;
}

// Define types for classes and components
interface ClassContent {
  video?: any;
  videoDescription?: string;
  videoTranscript?: string;
  keyConcepts?: string;
  writingPrompts?: string;
  additionalMaterials?: string;
}

interface CourseClass {
  id: number;
  attributes: {
    title: string;
    orderIndex: number;
    description?: string;
    content?: ClassContent;
  };
}

interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
  };
}

const ClassComponentLayout = ({
  slug,
  classIndex,
  componentIndex,
  children,
}: ClassComponentLayoutProps) => {
  const [course, setCourse] = useState<Course | null>(null);
  const [courseClass, setCourseClass] = useState<CourseClass | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const progressDataRef = useRef<any>(null);

  // Component type labels
  const componentLabels = {
    1: "Video",
    2: "Key Concepts",
    3: "Writing Prompts & Further Reflection",
    4: "Additional Materials",
  };

  // Progress tracking
  const [progress, setProgress] = useState(0);
  const [isUpdatingProgress, setIsUpdatingProgress] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);

        // Fetch course by slug
        const courseData = await courseApi.getCourseBySlug(slug);
        if (!courseData) {
          setError("Course not found");
          return;
        }
        setCourse(courseData);

        // Get only the specific class we need using the new base function
        // This is the lightweight version that only gets minimal class data
        const classData = await courseApi.getClassBySlugAndIndex(
          slug,
          classIndex
        );
        if (!classData) {
          setError(`Class ${classIndex} not found`);
          return;
        }

        setCourseClass(classData);

        // After loading course and class data, fetch current progress
        if (courseData.id && classData.id) {
          try {
            const progressData = await courseProgressApi.getUserCourseProgress(
              courseData.id.toString()
            );
            progressDataRef.current = progressData;

            if (progressData) {
              // Find this class in the tracking data
              const classTracking =
                progressData.attributes.tracking.classes.find(
                  (c) => c.classId === classData.id
                );

              if (classTracking) {
                // Get progress for this specific component
                const componentType = getComponentType(componentIndex);
                const componentProgress =
                  (classTracking[
                    componentType as keyof typeof classTracking
                  ] as number) || 0;

                // Set progress as percentage
                setProgress(componentProgress * 100);

                // If we're just starting this component, update the progress to show it's been started
                if (componentProgress === 0) {
                  updateProgress(10); // Start with 10% progress
                }
              }
            }
          } catch (progressError) {
            console.error("Error fetching progress:", progressError);
            // Non-fatal error, we'll just start with 0 progress
          }
        }
      } catch (err) {
        console.error("Error fetching data:", err);
        setError("Failed to load content");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [slug, classIndex]);

  // Get component type from index
  const getComponentType = (index: number): string => {
    switch (index) {
      case 1:
        return "video";
      case 2:
        return "keyConcepts";
      case 3:
        return "writingPrompts";
      case 4:
        return "additionalMaterials";
      default:
        return "video";
    }
  };

  // Update progress
  const updateProgress = async (newProgress: number) => {
    if (!course || !courseClass || isUpdatingProgress) return;

    // Don't update if progress is going backward
    if (newProgress <= progress && progress > 0) return;

    setIsUpdatingProgress(true);

    try {
      // Convert progress to 0-1 range for API
      const normalizedProgress = Math.min(Math.max(newProgress, 0), 100) / 100;

      // Update progress in API
      await courseProgressApi.updateComponentProgress(
        course.id.toString(),
        courseClass.id.toString(),
        getComponentType(componentIndex),
        normalizedProgress
      );

      // Update local state
      setProgress(newProgress);
    } catch (error) {
      console.error("Error updating progress:", error);
    } finally {
      setIsUpdatingProgress(false);
    }
  };

  // Calculate component title
  const getComponentTitle = () => {
    if (!courseClass) return "";

    if (componentIndex === 1) {
      return `${classIndex}.${componentIndex} Video: ${courseClass.attributes.title}`;
    } else {
      return `${classIndex}.${componentIndex} ${
        componentLabels[componentIndex as keyof typeof componentLabels] || ""
      }`;
    }
  };

  // Navigation to previous/next component
  const navigateToPrevious = () => {
    if (componentIndex > 1) {
      router.push(
        `/dashboard/user/courses/${slug}/class/${classIndex}/component/${
          componentIndex - 1
        }`
      );
    } else if (classIndex > 1) {
      // Go to the last component of the previous class
      // For simplicity, we'll assume 4 components per class
      router.push(
        `/dashboard/user/courses/${slug}/class/${classIndex - 1}/component/4`
      );
    } else {
      // At first component of first class, go back to overview
      router.push(`/dashboard/user/courses/${slug}/overview`);
    }
  };

  const navigateToNext = () => {
    // For simplicity, we'll assume 4 components per class
    if (componentIndex < 4) {
      router.push(
        `/dashboard/user/courses/${slug}/class/${classIndex}/component/${
          componentIndex + 1
        }`
      );
    } else {
      // Go to the first component of the next class
      router.push(
        `/dashboard/user/courses/${slug}/class/${classIndex + 1}/component/1`
      );
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error || !course || !courseClass) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 p-4 rounded-md">
          <p className="text-red-700">{error || "Content not found"}</p>
        </div>
        <div className="mt-4">
          <Link
            href={`/dashboard/user/courses/${slug}/overview`}
            className="text-purple-600 hover:underline flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-1" />
            Back to course
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation header - redesigned based on Figma */}
      <div className="bg-gray-50">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link
              href={`/dashboard/user/courses/${slug}/overview`}
              className="text-purple-600 hover:text-purple-800 flex items-center"
            >
              <ArrowLeftIcon className="h-4 w-4 mr-1" />
              Back
            </Link>

            <div className="flex space-x-2">
              <button
                onClick={navigateToPrevious}
                className="px-4 py-2 bg-white text-gray-800 border border-gray-300 rounded hover:bg-gray-50 font-medium text-sm"
              >
                Previous
              </button>
              <button
                onClick={navigateToNext}
                className="px-4 py-2 bg-black text-white rounded hover:bg-gray-800 font-medium text-sm"
              >
                Next class
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Component title */}
      <div className="container mx-auto px-4 py-4">
        <h1 className="text-xl font-bold text-gray-900 mb-6">
          {getComponentTitle()}
        </h1>

        {/* Progress bar */}
        <div className="w-full h-2 bg-gray-200 rounded-full mb-8">
          <div
            className="h-2 bg-purple-600 rounded-full transition-all duration-300"
            style={{ width: `${progress}%` }}
          ></div>
        </div>

        {/* Main content - white container */}
        <div className="bg-white rounded-lg p-6 shadow-sm mb-12">
          {children}
        </div>
      </div>
    </div>
  );
};

export default ClassComponentLayout;

// === ./src/components/dashboard/course/user/ClassKeyConceptsComponent.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { courseApi } from "@/lib/courseApi";
import courseProgressApi from "@/lib/courseProgressApi";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";

interface ClassKeyConceptsComponentProps {
  slug: string;
  classIndex: number;
}

const ClassKeyConceptsComponent = ({
  slug,
  classIndex,
}: ClassKeyConceptsComponentProps) => {
  const [courseClass, setCourseClass] = useState<any>(null);
  const [course, setCourse] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [keyConceptsContent, setKeyConceptsContent] = useState<string>("");

  // Prevent infinite re-renders by using refs
  const hasFetchedData = useRef(false);
  const timerRef = useRef<any>(null);

  useEffect(() => {
    // Only fetch data once to prevent infinite loops
    if (hasFetchedData.current) return;

    const fetchData = async () => {
      try {
        setIsLoading(true);
        hasFetchedData.current = true;

        // Get course data
        const courseData = await courseApi.getCourseBySlug(slug);
        if (!courseData) {
          setError("Course not found");
          return;
        }
        setCourse(courseData);

        // Use the specialized function to get class data with key concepts
        const classData = await courseApi.getClassWithKeyConcepts(
          slug,
          classIndex
        );
        if (!classData) {
          setError("Class not found");
          return;
        }
        setCourseClass(classData);

        // Extract key concepts content
        let content = "";
        if (classData.attributes?.content?.keyConcepts) {
          if (typeof classData.attributes.content.keyConcepts === "string") {
            // Handle the case where keyConcepts is directly a string
            content = classData.attributes.content.keyConcepts;
          } else if (classData.attributes.content.keyConcepts.content) {
            // Handle the case where keyConcepts has a content property
            content = classData.attributes.content.keyConcepts.content;
          } else if (
            typeof classData.attributes.content.keyConcepts === "object"
          ) {
            // Try to convert object to readable text if it's an object
            try {
              content = JSON.stringify(
                classData.attributes.content.keyConcepts,
                null,
                2
              );
            } catch (err) {
              console.error("Error converting keyConcepts to string:", err);
            }
          }
        }

        // Add some sample content if empty (for testing purposes)
        if (!content) {
          content = `# Key Concepts for Class ${classIndex}

## The Seven Realms of Knowledge

1. **Material Realm**: Understanding the physical world and its properties
2. **Vital Realm**: The energetic dimension of reality
3. **Mental Realm**: Understanding concepts, ideas, and mental constructs
4. **Wisdom Realm**: Integration of knowledge into wisdom
5. **Mystery Realm**: The transcendent aspects beyond ordinary cognition
6. **Ego Realm**: Understanding of the self and identity
7. **Supreme Realm**: Ultimate reality and consciousness

These seven realms form the foundation of the wisdom school tradition.`;
        }

        setKeyConceptsContent(content);

        // Get the current progress for this class
        if (courseData.id) {
          try {
            const progressData = await courseProgressApi.getUserCourseProgress(
              courseData.id.toString()
            );
            if (progressData && progressData.attributes?.tracking?.classes) {
              const classProgress =
                progressData.attributes.tracking.classes.find(
                  (c: any) => c.classId === classData.id
                );
              if (classProgress) {
                const keyConcepts = classProgress.keyConcepts || 0;
                setIsCompleted(keyConcepts >= 0.99);
              }
            }
          } catch (progressError) {
            console.error("Error fetching progress:", progressError);
          }
        }

        // Auto-mark as complete after a delay (this will run silently in the background)
        setTimeout(() => {
          if (!isCompleted && course && courseClass) {
            handleMarkComplete();
          }
        }, 180000); // 3 minutes = 180,000 ms
      } catch (err) {
        console.error("Error fetching key concepts data:", err);
        setError("Failed to load key concepts data");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();

    return () => {
      // Clean up timer on unmount
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [slug, classIndex]); // Minimal dependency array to prevent loops

  // Handle completion
  const handleMarkComplete = async () => {
    if (isCompleted || !course || !courseClass) return;

    try {
      setIsCompleted(true);

      await courseProgressApi.markComponentComplete(
        course.id.toString(),
        courseClass.id.toString(),
        "keyConcepts"
      );
    } catch (err) {
      console.error("Error marking key concepts as completed:", err);
      setIsCompleted(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-24">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 p-4 rounded-md">
        <p className="text-red-700">{error}</p>
      </div>
    );
  }

  return (
    <div>
      {/* Key concepts content */}
      <div className="prose prose-headings:font-bold prose-headings:text-gray-900 prose-h1:text-xl prose-h2:text-lg prose-p:text-gray-700 prose-li:my-0 prose-ol:list-decimal prose-ul:list-disc max-w-none">
        {keyConceptsContent ? (
          <ReactMarkdown
            remarkPlugins={[remarkGfm]}
            rehypePlugins={[rehypeRaw]}
            components={{
              h1: ({ node, ...props }) => (
                <h1 className="text-xl font-bold mt-4 mb-2" {...props} />
              ),
              h2: ({ node, ...props }) => (
                <h2 className="text-lg font-bold mt-4 mb-2" {...props} />
              ),
              h3: ({ node, ...props }) => (
                <h3 className="text-md font-bold mt-3 mb-1" {...props} />
              ),
              p: ({ node, ...props }) => <p className="my-2" {...props} />,
              ul: ({ node, ...props }) => (
                <ul className="pl-6 list-disc my-2" {...props} />
              ),
              ol: ({ node, ...props }) => (
                <ol className="pl-6 list-decimal my-2" {...props} />
              ),
              li: ({ node, ...props }) => (
                <li className="ml-2 py-1" {...props} />
              ),
              blockquote: ({ node, ...props }) => (
                <blockquote
                  className="p-6 my-6 bg-gray-50 rounded-xl border border-gray-100"
                  {...props}
                />
              ),
            }}
          >
            {keyConceptsContent}
          </ReactMarkdown>
        ) : (
          <p className="text-gray-500 italic">
            No key concepts content available for this class.
          </p>
        )}
      </div>
    </div>
  );
};

export default ClassKeyConceptsComponent;

// === ./src/components/dashboard/course/user/ClassPage.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import {
  ArrowLeftIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  PlayIcon,
} from "@heroicons/react/24/outline";
import Link from "next/link";
import { courseApi } from "@/lib/courseApi";
import ReactMarkdown from "react-markdown";

interface ClassPageProps {
  courseSlug: string;
  classId: string;
}

// Define types based on Strapi structure
interface ClassContent {
  video?: {
    data?: {
      attributes: {
        url: string;
        name: string;
      };
    };
  };
  essay?: {
    data?: {
      attributes: {
        url: string;
        name: string;
      };
    };
  };
  guidedMeditation?: {
    data?: {
      attributes: {
        url: string;
        name: string;
      };
    };
  };
  videoDescription?: string;
  videoTranscript?: string;
  keyConcepts?: string;
  writingPrompts?: string;
}

interface CourseClass {
  id: number;
  attributes: {
    title: string;
    orderIndex: number;
    description?: string;
    duration?: string;
    content?: ClassContent;
  };
}

interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
  };
}

const ClassPage = ({ courseSlug, classId }: ClassPageProps) => {
  const [currentClass, setCurrentClass] = useState<CourseClass | null>(null);
  const [course, setCourse] = useState<Course | null>(null);
  const [classes, setClasses] = useState<CourseClass[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const videoRef = useRef<HTMLVideoElement>(null);

  // Helper function to get URL with proper base
  const getFileUrl = (url?: string) => {
    if (!url) return "";

    // Check if it's an absolute URL
    if (url.startsWith("http://") || url.startsWith("https://")) {
      return url;
    }

    // Otherwise, it's a relative URL, so prepend the base URL
    const baseUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
    return `${baseUrl}${url}`;
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);

        // First get the course details
        const courseResponse = await courseApi.getCourseBySlug(courseSlug);
        if (!courseResponse) {
          setError("Course not found");
          return;
        }
        setCourse(courseResponse);

        // Get all classes for this course
        const classesResponse = await courseApi.getClasses(
          courseResponse.id.toString()
        );
        if (!classesResponse.data || classesResponse.data.length === 0) {
          setError("No classes found for this course");
          return;
        }
        setClasses(classesResponse.data);

        // Find the current class by ID
        const classIdNumber = parseInt(classId);
        const currentClassData = classesResponse.data.find(
          (c) => c.id === classIdNumber
        );
        if (!currentClassData) {
          setError("Class not found");
          return;
        }

        // Get complete class data with content
        const fullClassData = await courseApi.getClass(classId);
        console.log("Full class data:", fullClassData);

        setCurrentClass(fullClassData.data);
      } catch (err) {
        console.error("Error fetching class data:", err);
        setError("Failed to load class content");
      } finally {
        setIsLoading(false);
      }
    };

    if (courseSlug && classId) {
      fetchData();
    }
  }, [courseSlug, classId]);

  // Navigate to previous class
  const goToPreviousClass = () => {
    if (!currentClass || !classes.length) return;

    const currentIndex = classes.findIndex((c) => c.id === currentClass.id);
    if (currentIndex > 0) {
      const previousClass = classes[currentIndex - 1];
      router.push(
        `/dashboard/user/courses/${courseSlug}/class/${previousClass.id}`
      );
    }
  };

  // Navigate to next class
  const goToNextClass = () => {
    if (!currentClass || !classes.length) return;

    const currentIndex = classes.findIndex((c) => c.id === currentClass.id);
    if (currentIndex < classes.length - 1) {
      const nextClass = classes[currentIndex + 1];
      router.push(
        `/dashboard/user/courses/${courseSlug}/class/${nextClass.id}`
      );
    }
  };

  // Count available content items
  const countContentItems = (content?: ClassContent): number => {
    if (!content) return 0;

    let count = 0;
    if (content.video?.data) count++;
    if (content.essay?.data) count++;
    if (content.guidedMeditation?.data) count++;
    if (content.videoDescription) count++;
    if (content.videoTranscript) count++;
    if (content.keyConcepts) count++;
    if (content.writingPrompts) count++;

    return count;
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error || !currentClass || !course) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 p-4 rounded-md">
          <p className="text-red-700">{error || "Class data not available"}</p>
        </div>
        <div className="mt-4">
          <Link
            href={`/dashboard/user/courses/${courseSlug}`}
            className="text-purple-600 hover:underline flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-1" />
            Back to course
          </Link>
        </div>
      </div>
    );
  }

  // Get class content
  const content = currentClass.attributes.content || {};
  const hasVideo = !!content.video?.data;
  const hasEssay = !!content.essay?.data;
  const hasGuidedMeditation = !!content.guidedMeditation?.data;
  const lectureCount = countContentItems(content);

  return (
    <div className="bg-white min-h-screen">
      {/* Navigation header */}
      <div className="bg-gray-100 border-b border-gray-200">
        <div className="container mx-auto px-4 py-4">
          <div className="flex justify-between items-center">
            <Link
              href={`/dashboard/user/courses/${courseSlug}`}
              className="text-gray-600 hover:text-gray-900 flex items-center"
            >
              <ArrowLeftIcon className="h-4 w-4 mr-1" />
              Back to course
            </Link>

            <div className="flex items-center space-x-4">
              <button
                onClick={goToPreviousClass}
                className="text-gray-600 hover:text-gray-900 flex items-center"
                disabled={
                  classes.findIndex((c) => c.id === currentClass.id) === 0
                }
              >
                <ChevronLeftIcon className="h-4 w-4 mr-1" />
                Previous
              </button>

              <button
                onClick={goToNextClass}
                className="text-gray-600 hover:text-gray-900 flex items-center"
                disabled={
                  classes.findIndex((c) => c.id === currentClass.id) ===
                  classes.length - 1
                }
              >
                Next
                <ChevronRightIcon className="h-4 w-4 ml-1" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {currentClass.attributes.title}
          </h1>
          <div className="text-gray-500">
            {currentClass.attributes.duration} minutes · {lectureCount}{" "}
            {lectureCount === 1 ? "lecture" : "lectures"}
          </div>
        </div>

        {/* Video section (if available) */}
        {hasVideo && (
          <div className="mb-8">
            <div className="aspect-video bg-black rounded-lg overflow-hidden relative">
              {content.video?.data?.attributes.url ? (
                <video
                  ref={videoRef}
                  controls
                  className="w-full h-full"
                  poster="/placeholder-video.jpg"
                >
                  <source
                    src={getFileUrl(content.video.data.attributes.url)}
                    type="video/mp4"
                  />
                  Your browser does not support the video tag.
                </video>
              ) : (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-white">Video not available</div>
                </div>
              )}
            </div>

            {content.videoDescription && (
              <div className="mt-4">
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Video Description
                </h3>
                <div className="prose max-w-none">
                  <ReactMarkdown>{content.videoDescription}</ReactMarkdown>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Description and content */}
        {currentClass.attributes.description && (
          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Overview</h2>
            <div className="prose max-w-none">
              <ReactMarkdown>
                {currentClass.attributes.description}
              </ReactMarkdown>
            </div>
          </div>
        )}

        {/* Key concepts */}
        {content.keyConcepts && (
          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Key Concepts
            </h2>
            <div className="prose max-w-none">
              <ReactMarkdown>{content.keyConcepts}</ReactMarkdown>
            </div>
          </div>
        )}

        {/* Additional materials section */}
        {(hasEssay ||
          hasGuidedMeditation ||
          content.videoTranscript ||
          content.writingPrompts) && (
          <div className="mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Additional Materials
            </h2>

            <div className="space-y-4">
              {/* Essay */}
              {hasEssay && (
                <div className="p-4 border border-gray-200 rounded-lg">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Essay:{" "}
                    {content.essay?.data?.attributes.name ||
                      "Supplementary reading"}
                  </h3>
                  <a
                    href={getFileUrl(content.essay?.data?.attributes.url)}
                    className="text-purple-600 hover:underline flex items-center"
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    Download Essay
                  </a>
                </div>
              )}

              {/* Guided meditation */}
              {hasGuidedMeditation && (
                <div className="p-4 border border-gray-200 rounded-lg">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Guided Meditation:{" "}
                    {content.guidedMeditation?.data?.attributes.name ||
                      "Meditation practice"}
                  </h3>
                  <audio
                    controls
                    className="w-full mt-2"
                    src={getFileUrl(
                      content.guidedMeditation?.data?.attributes.url
                    )}
                  >
                    Your browser does not support the audio element.
                  </audio>
                </div>
              )}

              {/* Video transcript */}
              {content.videoTranscript && (
                <div className="p-4 border border-gray-200 rounded-lg">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Video Transcript
                  </h3>
                  <div className="max-h-64 overflow-y-auto prose max-w-none">
                    <ReactMarkdown>{content.videoTranscript}</ReactMarkdown>
                  </div>
                </div>
              )}

              {/* Writing prompts */}
              {content.writingPrompts && (
                <div className="p-4 border border-gray-200 rounded-lg">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Writing Prompts
                  </h3>
                  <div className="prose max-w-none">
                    <ReactMarkdown>{content.writingPrompts}</ReactMarkdown>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Navigation buttons */}
        <div className="mt-8 flex justify-between">
          <button
            onClick={goToPreviousClass}
            className={`px-4 py-2 border rounded-md flex items-center ${
              classes.findIndex((c) => c.id === currentClass.id) === 0
                ? "border-gray-200 text-gray-400 cursor-not-allowed"
                : "border-gray-300 text-gray-700 hover:bg-gray-50"
            }`}
            disabled={classes.findIndex((c) => c.id === currentClass.id) === 0}
          >
            <ChevronLeftIcon className="h-4 w-4 mr-2" />
            Previous class
          </button>

          <button
            onClick={goToNextClass}
            className={`px-4 py-2 border rounded-md flex items-center ${
              classes.findIndex((c) => c.id === currentClass.id) ===
              classes.length - 1
                ? "border-gray-200 text-gray-400 cursor-not-allowed"
                : "border-gray-300 text-gray-700 hover:bg-gray-50"
            }`}
            disabled={
              classes.findIndex((c) => c.id === currentClass.id) ===
              classes.length - 1
            }
          >
            Next class
            <ChevronRightIcon className="h-4 w-4 ml-2" />
          </button>
        </div>
      </div>
    </div>
  );
};

export default ClassPage;

// === ./src/components/dashboard/course/user/ClassVideoComponent.tsx ===
"use client";
import { useState, useEffect, useRef } from "react";
import { courseApi } from "@/lib/courseApi";
import courseProgressApi from "@/lib/courseProgressApi"; // Import progress API with default export
import { PlayIcon, PauseIcon } from "@heroicons/react/24/solid";
import ReactMarkdown from "react-markdown";
import CourseCommentsComponent from "@/components/dashboard/course/user/CourseCommentsComponent";

interface ClassVideoComponentProps {
  slug: string;
  classIndex: number;
  onProgressUpdate?: (progress: number) => void; // Callback prop for progress updates
}

// Interface that matches the data structure we get from Strapi
interface CourseClass {
  id: number;
  attributes: {
    title: string;
    orderIndex: number;
    description?: string;
    duration?: string;
    content?: any; // Using any since the structure varies
  };
}

const ClassVideoComponent = ({
  slug,
  classIndex,
  onProgressUpdate,
}: ClassVideoComponentProps) => {
  const [courseClass, setCourseClass] = useState<CourseClass | null>(null);
  const [course, setCourse] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<
    "description" | "transcript" | "audio" | "comments"
  >("description");
  const [isPlaying, setIsPlaying] = useState(false);
  const [isAudioPlaying, setIsAudioPlaying] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const audioRef = useRef<HTMLAudioElement>(null);
  const [currentTime, setCurrentTime] = useState(0);
  const [videoDuration, setVideoDuration] = useState(0);
  const [audioDuration, setAudioDuration] = useState(0);
  const [audioCurrentTime, setAudioCurrentTime] = useState(0);
  const [debug, setDebug] = useState(false);

  // Progress tracking state
  const [videoProgress, setVideoProgress] = useState(0);
  const [lastProgressUpdate, setLastProgressUpdate] = useState(0);
  const [isUpdatingProgress, setIsUpdatingProgress] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const progressDataRef = useRef<any>(null);

  // Progress update thresholds
  const progressThresholds = [0.1, 0.25, 0.5, 0.75, 0.9, 1.0];

  // State to store content data
  const [videoUrl, setVideoUrl] = useState("");
  const [videoMimeType, setVideoMimeType] = useState("");
  const [audioUrl, setAudioUrl] = useState("");
  const [audioMimeType, setAudioMimeType] = useState("");
  const [audioSize, setAudioSize] = useState<number | undefined>(undefined);
  const [videoDescription, setVideoDescription] = useState("");
  const [videoTranscript, setVideoTranscript] = useState("");

  // Helper functions
  const formatTime = (seconds: number) => {
    if (isNaN(seconds)) return "0:00";
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  // Helper function to get URL with proper base
  const getMediaUrl = (url?: string) => {
    if (!url) return "";

    // Check if it's an absolute URL
    if (url.startsWith("http://") || url.startsWith("https://")) {
      return url;
    }

    // Otherwise, it's a relative URL, so prepend the base URL
    const baseUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
    return `${baseUrl}${url}`;
  };

  // Update progress in the API
  const updateProgress = async (progress: number) => {
    if (!course || !courseClass || isUpdatingProgress) return;

    // Don't update progress if it's only slightly different from the last update
    // This prevents too many API calls
    if (
      Math.abs(progress - lastProgressUpdate) < 0.05 &&
      lastProgressUpdate > 0 &&
      progress < 0.95
    ) {
      return;
    }

    setIsUpdatingProgress(true);

    try {
      // Normalize progress to 0-1 range
      const normalizedProgress = Math.min(Math.max(progress, 0), 1);

      // Update local state
      setVideoProgress(normalizedProgress);
      setLastProgressUpdate(normalizedProgress);

      // Mark as completed if progress is >= 95%
      if (normalizedProgress >= 0.95 && !isCompleted) {
        setIsCompleted(true);
      }

      // Call parent component's update function if provided
      if (onProgressUpdate) {
        onProgressUpdate(normalizedProgress * 100);
      }

      // Update progress in API
      await courseProgressApi.updateComponentProgress(
        course.id.toString(),
        courseClass.id.toString(),
        "video",
        normalizedProgress
      );
    } catch (error) {
      console.error("Error updating video progress:", error);
    } finally {
      setIsUpdatingProgress(false);
    }
  };

  useEffect(() => {
    const fetchClassData = async () => {
      try {
        setIsLoading(true);

        // First, get the course
        const courseData = await courseApi.getCourseBySlug(slug);
        if (!courseData) {
          setError(`Course ${slug} not found`);
          return;
        }
        setCourse(courseData);

        // Then get the specific class data
        const classData = await courseApi.getClassWithVideoContent(
          slug,
          classIndex
        );

        if (!classData) {
          setError(`Class ${classIndex} not found for course ${slug}`);
          return;
        }
        // Store the course class data
        setCourseClass(classData);

        // Extract video, audio and other content
        if (
          classData.attributes.content &&
          classData.attributes.content.video
        ) {
          // Extract video file if available
          if (
            classData.attributes.content.video.videoFile &&
            classData.attributes.content.video.videoFile.data
          ) {
            const fileData =
              classData.attributes.content.video.videoFile.data.attributes;
            setVideoUrl(getMediaUrl(fileData.url));
            setVideoMimeType(fileData.mime);
          }

          // Extract description if available
          if (classData.attributes.content.video.videoDescription) {
            setVideoDescription(
              classData.attributes.content.video.videoDescription
            );
          }

          // Extract transcript if available
          if (classData.attributes.content.video.videoTranscript) {
            setVideoTranscript(
              classData.attributes.content.video.videoTranscript
            );
          }

          // Extract audio file
          const audioField =
            classData.attributes.content.video.AudioFile ||
            classData.attributes.content.video.audioFile ||
            classData.attributes.content.video.audio;
          if (audioField?.data) {
            setAudioUrl(getMediaUrl(audioField.data.attributes.url));
            setAudioMimeType(audioField.data.attributes.mime || "audio/mp3");
            setAudioSize(audioField.data.attributes.size);
          }
        }

        // Fetch existing progress if course and class are available
        if (courseData.id && classData.id) {
          try {
            const progressData = await courseProgressApi.getUserCourseProgress(
              courseData.id.toString()
            );

            // Store the full progress data for reference
            progressDataRef.current = progressData;

            if (
              progressData &&
              progressData.attributes &&
              progressData.attributes.tracking
            ) {
              // Find this class in the tracking data
              const classTracking =
                progressData.attributes.tracking.classes.find(
                  (c) => c.classId === classData.id
                );

              if (classTracking) {
                // Get progress for the video component
                const componentProgress = classTracking.video || 0;

                // Set progress as percentage
                setVideoProgress(componentProgress);
                setLastProgressUpdate(componentProgress);

                // Set completion status based on progress
                setIsCompleted(componentProgress >= 0.95);

                // If progress is already 100%, we can consider updating the parent
                if (componentProgress === 1 && onProgressUpdate) {
                  onProgressUpdate(100);
                }

                // If we have saved progress and there's a video, try to resume from the saved position
                if (
                  componentProgress > 0 &&
                  componentProgress < 0.95 &&
                  videoRef.current
                ) {
                  const estimatedTime =
                    componentProgress * videoRef.current.duration;
                  if (!isNaN(estimatedTime) && estimatedTime > 0) {
                    // Set the current time slightly before the saved position (5 seconds)
                    videoRef.current.currentTime = Math.max(
                      0,
                      estimatedTime - 5
                    );
                  }
                }
              }
            }
          } catch (progressError) {
            console.error("Error fetching progress:", progressError);
            // Non-fatal error, we'll just start with 0 progress
          }
        }
      } catch (error) {
        console.error("Error fetching class data:", error);
        setError("Failed to load video content");
      } finally {
        setIsLoading(false);
      }
    };

    fetchClassData();
  }, [slug, classIndex, onProgressUpdate]);

  // Effect to handle video events for progress tracking
  useEffect(() => {
    if (!videoRef.current) return;

    // Event handlers for video
    const handleVideoPlay = () => {
      setIsPlaying(true);

      // If less than 10% progress, mark as started
      if (videoProgress < 0.1) {
        updateProgress(0.1);
      }
    };

    const handleVideoPause = () => {
      setIsPlaying(false);

      // Update progress when paused to capture current position
      if (videoRef.current && videoDuration) {
        const currentVideoTime = videoRef.current.currentTime;
        const percentage = currentVideoTime / videoDuration;
        updateProgress(percentage);
      }
    };

    const handleVideoEnded = () => {
      setIsPlaying(false);
      setIsCompleted(true);
      updateProgress(1.0); // Mark as 100% complete
    };

    const handleVideoTimeUpdate = () => {
      if (!videoRef.current || !videoDuration) return;

      const currentVideoTime = videoRef.current.currentTime;
      setCurrentTime(currentVideoTime);

      // Calculate percentage
      const percentage = currentVideoTime / videoRef.current.duration;

      // Update progress at thresholds (10%, 25%, 50%, 75%, 90%, 100%)
      for (const threshold of progressThresholds) {
        if (percentage >= threshold && videoProgress < threshold) {
          updateProgress(threshold);
          break;
        }
      }

      // Also update every 15 seconds to ensure we're tracking progress
      if (currentVideoTime % 15 < 1 && currentVideoTime > 0) {
        updateProgress(percentage);
      }
    };

    const handleVideoLoadedMetadata = () => {
      if (videoRef.current) {
        setVideoDuration(videoRef.current.duration);
      }
    };

    // Add event listeners
    const videoElement = videoRef.current;
    videoElement.addEventListener("play", handleVideoPlay);
    videoElement.addEventListener("pause", handleVideoPause);
    videoElement.addEventListener("ended", handleVideoEnded);
    videoElement.addEventListener("timeupdate", handleVideoTimeUpdate);
    videoElement.addEventListener("loadedmetadata", handleVideoLoadedMetadata);

    // Cleanup
    return () => {
      if (videoElement) {
        videoElement.removeEventListener("play", handleVideoPlay);
        videoElement.removeEventListener("pause", handleVideoPause);
        videoElement.removeEventListener("ended", handleVideoEnded);
        videoElement.removeEventListener("timeupdate", handleVideoTimeUpdate);
        videoElement.removeEventListener(
          "loadedmetadata",
          handleVideoLoadedMetadata
        );
      }
    };
  }, [videoRef.current, videoDuration, videoProgress, progressThresholds]);

  // Video player controls
  const togglePlay = () => {
    if (videoRef.current) {
      if (isPlaying) {
        videoRef.current.pause();
      } else {
        videoRef.current.play();
      }
      setIsPlaying(!isPlaying);
    }
  };

  // Audio player controls
  const toggleAudioPlay = () => {
    if (audioRef.current) {
      if (isAudioPlaying) {
        audioRef.current.pause();
      } else {
        audioRef.current.play();
      }
      setIsAudioPlaying(!isAudioPlaying);
    }
  };

  const handleAudioTimeUpdate = () => {
    if (audioRef.current) {
      setAudioCurrentTime(audioRef.current.currentTime);
      if (!audioDuration && audioRef.current.duration) {
        setAudioDuration(audioRef.current.duration);
      }
    }
  };

  const handleAudioSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const seekTime = parseFloat(e.target.value);
    if (audioRef.current) {
      audioRef.current.currentTime = seekTime;
      setAudioCurrentTime(seekTime);
    }
  };

  const handleTimeUpdate = () => {
    if (videoRef.current) {
      setCurrentTime(videoRef.current.currentTime);
    }
  };

  // Component rendering
  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error || !courseClass) {
    return (
      <div className="bg-red-100 p-4 rounded-md">
        <p className="text-red-700">{error || "Video content not found"}</p>
      </div>
    );
  }

  // Check if video and audio exist
  const hasVideo = !!videoUrl;
  const hasAudio = !!audioUrl;

  return (
    <div>
      {/* Video Player */}
      <div className="mb-8 bg-black rounded-lg overflow-hidden">
        <div className="aspect-video relative">
          {hasVideo ? (
            <video
              ref={videoRef}
              className="w-full h-full"
              controls
              onTimeUpdate={handleTimeUpdate}
              onPlay={() => setIsPlaying(true)}
              onPause={() => setIsPlaying(false)}
              poster="/video-placeholder.jpg"
            >
              <source src={videoUrl} type={videoMimeType} />
              Your browser does not support the video tag.
            </video>
          ) : (
            <div className="absolute inset-0 flex items-center justify-center bg-gray-800">
              <div className="text-white text-center">
                <PlayIcon className="h-16 w-16 mx-auto mb-4 text-white opacity-50" />
                <p>Video not available</p>
              </div>
            </div>
          )}

          {!isPlaying && hasVideo && (
            <div className="absolute inset-0 flex items-center justify-center">
              <button
                onClick={togglePlay}
                className="w-16 h-16 bg-white bg-opacity-75 rounded-full flex items-center justify-center cursor-pointer"
              >
                <PlayIcon className="h-8 w-8 text-gray-800" />
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Tabs for content sections */}
      <div className="mb-4 border-b border-gray-200">
        <div className="flex -mb-px">
          <button
            onClick={() => setActiveTab("description")}
            className={`py-2 px-4 font-medium text-sm border-b-2 ${
              activeTab === "description"
                ? "border-purple-500 text-purple-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            Description
          </button>
          <button
            onClick={() => setActiveTab("transcript")}
            className={`py-2 px-4 font-medium text-sm border-b-2 ${
              activeTab === "transcript"
                ? "border-purple-500 text-purple-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            Transcription
          </button>
          <button
            onClick={() => setActiveTab("audio")}
            className={`py-2 px-4 font-medium text-sm border-b-2 ${
              activeTab === "audio"
                ? "border-purple-500 text-purple-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            Audio
          </button>
          <button
            onClick={() => setActiveTab("comments")}
            className={`py-2 px-4 font-medium text-sm border-b-2 ${
              activeTab === "comments"
                ? "border-purple-500 text-purple-600"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            Comments
          </button>
        </div>
      </div>

      {/* Tab content */}
      <div className="prose max-w-none">
        {activeTab === "description" && (
          <div>
            {videoDescription ? (
              <ReactMarkdown>{videoDescription}</ReactMarkdown>
            ) : (
              <p className="text-gray-500 italic">No description available.</p>
            )}
          </div>
        )}

        {activeTab === "transcript" && (
          <div>
            {videoTranscript ? (
              <ReactMarkdown>{videoTranscript}</ReactMarkdown>
            ) : (
              <p className="text-gray-500 italic">No transcript available.</p>
            )}
          </div>
        )}

        {activeTab === "audio" && (
          <div className="mt-6">
            <div className="bg-gray-100 p-4 rounded-lg">
              <h3 className="text-center mb-4">
                The concepts of the wisdom and mystery school : Spiritual
                teachings with Shunyamurti
              </h3>

              {hasAudio ? (
                <>
                  <audio
                    ref={audioRef}
                    className="hidden"
                    onTimeUpdate={handleAudioTimeUpdate}
                    onPlay={() => setIsAudioPlaying(true)}
                    onPause={() => setIsAudioPlaying(false)}
                    onError={(e) => console.error("Audio playback error:", e)}
                    preload="metadata"
                  >
                    <source
                      src={audioUrl}
                      type={audioMimeType || "audio/mp3"}
                    />
                    Your browser does not support the audio element.
                  </audio>

                  <div className="flex justify-center space-x-4 mb-4">
                    <button className="p-2 rounded-full bg-gray-200 hover:bg-gray-300">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-700"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </button>

                    <button className="p-2 rounded-full bg-gray-200 hover:bg-gray-300">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-700"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M15 19l-7-7 7-7"
                        />
                      </svg>
                    </button>

                    <button
                      onClick={toggleAudioPlay}
                      className="p-2 rounded-full bg-gray-200 hover:bg-gray-300"
                    >
                      {isAudioPlaying ? (
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-5 w-5 text-gray-700"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"
                          />
                        </svg>
                      ) : (
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-5 w-5 text-gray-700"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                          />
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                          />
                        </svg>
                      )}
                    </button>

                    <button className="p-2 rounded-full bg-gray-200 hover:bg-gray-300">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-700"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>

                    <button className="p-2 rounded-full bg-gray-200 hover:bg-gray-300">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-700"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
                        />
                      </svg>
                    </button>
                  </div>

                  <div className="relative w-full bg-gray-300 h-1 rounded-full mb-2">
                    <input
                      type="range"
                      min="0"
                      max={audioDuration || 100}
                      value={audioCurrentTime}
                      onChange={handleAudioSeek}
                      className="absolute w-full h-1 opacity-0 cursor-pointer"
                    />
                    <div
                      className="absolute bg-purple-600 h-1 rounded-full"
                      style={{
                        width: `${
                          (audioCurrentTime / (audioDuration || 1)) * 100
                        }%`,
                      }}
                    ></div>
                  </div>

                  <div className="flex justify-between text-xs text-gray-600">
                    <span>{formatTime(audioCurrentTime)}</span>
                    <span>{formatTime(audioDuration)}</span>
                  </div>
                </>
              ) : (
                <>
                  {/* Display placeholders for audio player */}
                  <div className="flex justify-center space-x-4 mb-4">
                    <button
                      className="p-2 rounded-full bg-gray-200 hover:bg-gray-300"
                      disabled
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </button>

                    <button
                      className="p-2 rounded-full bg-gray-200 hover:bg-gray-300"
                      disabled
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M15 19l-7-7 7-7"
                        />
                      </svg>
                    </button>

                    <button
                      className="p-2 rounded-full bg-gray-200 hover:bg-gray-300"
                      disabled
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                        />
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </button>

                    <button
                      className="p-2 rounded-full bg-gray-200 hover:bg-gray-300"
                      disabled
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </button>

                    <button
                      className="p-2 rounded-full bg-gray-200 hover:bg-gray-300"
                      disabled
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-5 w-5 text-gray-400"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
                        />
                      </svg>
                    </button>
                  </div>

                  <div className="relative w-full bg-gray-300 h-1 rounded-full mb-2">
                    <div
                      className="absolute bg-gray-400 h-1 rounded-full"
                      style={{ width: "0%" }}
                    ></div>
                  </div>

                  <div className="flex justify-between text-xs text-gray-600">
                    <span>0:00</span>
                    <span>0:00</span>
                  </div>

                  <p className="text-center mt-4 text-gray-500 italic">
                    Audio not available for this class.
                  </p>
                </>
              )}
            </div>

            <div className="mt-4 flex items-center border border-gray-300 rounded-md p-3">
              <div className="flex-shrink-0 mr-3">
                <div className="w-10 h-10 bg-blue-500 flex items-center justify-center text-white rounded-md">
                  <span className="font-bold">MP3</span>
                </div>
              </div>
              <div className="flex-grow">
                <div className="font-medium">Audio</div>
                <div className="text-sm text-gray-500">
                  {audioSize
                    ? `${Math.round(audioSize / (1024 * 1024))} MB`
                    : "16 MB"}
                </div>
              </div>
              {hasAudio ? (
                <a
                  href={audioUrl}
                  download
                  className="text-purple-600 hover:text-purple-800 font-medium text-sm"
                >
                  Download
                </a>
              ) : (
                <button
                  className="text-gray-400 font-medium text-sm cursor-not-allowed"
                  disabled
                >
                  Download
                </button>
              )}
            </div>
          </div>
        )}

        {activeTab === "comments" && (
          <div>
            {course && courseClass && (
              <CourseCommentsComponent
                courseId={course.id.toString()}
                classIndex={classIndex}
                sectionType="video"
              />
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ClassVideoComponent;

// === ./src/components/dashboard/course/user/ClassWritingPromptsComponent.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { courseApi } from "@/lib/courseApi";
import courseProgressApi from "@/lib/courseProgressApi";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";

interface ClassWritingPromptsComponentProps {
  slug: string;
  classIndex: number;
}

const ClassWritingPromptsComponent = ({
  slug,
  classIndex,
}: ClassWritingPromptsComponentProps) => {
  const [courseClass, setCourseClass] = useState<any>(null);
  const [course, setCourse] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [writingPromptsContent, setWritingPromptsContent] =
    useState<string>("");

  // Prevent infinite re-renders by using refs
  const hasFetchedData = useRef(false);

  useEffect(() => {
    // Only fetch data once to prevent infinite loops
    if (hasFetchedData.current) return;

    const fetchData = async () => {
      try {
        setIsLoading(true);
        hasFetchedData.current = true;

        // Get course data
        const courseData = await courseApi.getCourseBySlug(slug);
        if (!courseData) {
          setError("Course not found");
          return;
        }
        setCourse(courseData);

        // Use the specialized function to get class data with writing prompts
        const classData = await courseApi.getClassWithWritingPrompts(
          slug,
          classIndex
        );
        if (!classData) {
          setError("Class not found");
          return;
        }
        setCourseClass(classData);

        // Extract writing prompts content
        let content = "";
        if (classData.attributes?.content?.writingPrompts) {
          if (typeof classData.attributes.content.writingPrompts === "string") {
            // Handle the case where writingPrompts is directly a string
            content = classData.attributes.content.writingPrompts;
          } else if (classData.attributes.content.writingPrompts.content) {
            // Handle the case where writingPrompts has a content property
            content = classData.attributes.content.writingPrompts.content;
          } else if (
            typeof classData.attributes.content.writingPrompts === "object"
          ) {
            // Try to convert object to readable text if it's an object
            try {
              content = JSON.stringify(
                classData.attributes.content.writingPrompts,
                null,
                2
              );
            } catch (err) {
              console.error("Error converting writingPrompts to string:", err);
            }
          }
        }

        setWritingPromptsContent(content);

        // Get the current progress for this class
        if (courseData.id) {
          try {
            const progressData = await courseProgressApi.getUserCourseProgress(
              courseData.id.toString()
            );
            if (progressData && progressData.attributes?.tracking?.classes) {
              const classProgress =
                progressData.attributes.tracking.classes.find(
                  (c: any) => c.classId === classData.id
                );
              if (classProgress) {
                const writingPrompts = classProgress.writingPrompts || 0;
                setIsCompleted(writingPrompts >= 0.99);
              }
            }
          } catch (progressError) {
            console.error("Error fetching progress:", progressError);
          }
        }

        // Auto-mark as complete after a delay (this will run silently in the background)
        setTimeout(() => {
          if (!isCompleted && course && courseClass) {
            handleMarkComplete();
          }
        }, 180000); // 3 minutes = 180,000 ms
      } catch (err) {
        console.error("Error fetching writing prompts data:", err);
        setError("Failed to load writing prompts data");
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [slug, classIndex]); // Minimal dependency array to prevent loops

  // Handle completion
  const handleMarkComplete = async () => {
    if (isCompleted || !course || !courseClass) return;

    try {
      setIsCompleted(true);

      await courseProgressApi.markComponentComplete(
        course.id.toString(),
        courseClass.id.toString(),
        "writingPrompts"
      );
    } catch (err) {
      console.error("Error marking writing prompts as completed:", err);
      setIsCompleted(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-24">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-100 p-4 rounded-md">
        <p className="text-red-700">{error}</p>
      </div>
    );
  }

  return (
    <div className="p-6 bg-white rounded-lg">
      {/* Writing prompts content */}
      <div className="prose prose-headings:font-bold prose-headings:text-gray-900 prose-h1:text-xl prose-h2:text-lg prose-p:text-gray-700 prose-li:my-3 prose-ol:list-decimal prose-ul:list-disc max-w-none">
        {writingPromptsContent ? (
          <ReactMarkdown
            remarkPlugins={[remarkGfm]}
            rehypePlugins={[rehypeRaw]}
            components={{
              h1: ({ node, ...props }) => (
                <h1 className="text-xl font-bold mb-6" {...props} />
              ),
              h2: ({ node, ...props }) => (
                <h2 className="text-lg font-bold mt-8 mb-4" {...props} />
              ),
              h3: ({ node, ...props }) => (
                <h3 className="text-md font-bold mt-6 mb-2" {...props} />
              ),
              p: ({ node, ...props }) => <p className="my-2" {...props} />,
              ul: ({ node, ...props }) => (
                <ul className="pl-6 list-disc my-4" {...props} />
              ),
              ol: ({ node, ...props }) => (
                <ol
                  className="pl-6 list-decimal space-y-4 mb-6 mt-4"
                  {...props}
                />
              ),
              li: ({ node, ...props }) => (
                <li className="mb-2 text-gray-700" {...props} />
              ),
              blockquote: ({ node, ...props }) => (
                <blockquote
                  className="p-6 my-6 bg-gray-50 rounded-xl border border-gray-100"
                  {...props}
                />
              ),
            }}
          >
            {writingPromptsContent}
          </ReactMarkdown>
        ) : (
          <p className="text-gray-500 italic">
            No writing prompts available for this class.
          </p>
        )}
      </div>
    </div>
  );
};

export default ClassWritingPromptsComponent;

// === ./src/components/dashboard/course/user/CourseCommentsComponent.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import { courseCommentApi } from "@/lib/courseCommentApi";
import {
  PencilIcon,
  TrashIcon,
  XMarkIcon,
  CheckIcon,
  PaperClipIcon,
  FaceSmileIcon,
  EllipsisHorizontalIcon,
} from "@heroicons/react/24/outline";

interface CourseCommentsProps {
  courseId: string;
  classIndex?: number; // Optional for testimonials
  sectionType: "video" | "additionalMaterials" | "testimonial";
}

interface Comment {
  id: number;
  attributes: {
    comment: string;
    createdAt: string;
    user: {
      data: {
        id: number;
        attributes: {
          username: string;
          email?: string;
          firstName?: string;
          lastName?: string;
          picture?: {
            data?: {
              attributes: {
                url: string;
              };
            };
          };
        };
      };
    };
  };
}

const CourseCommentsComponent = ({
  courseId,
  classIndex,
  sectionType,
}: CourseCommentsProps) => {
  const [comments, setComments] = useState<Comment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [newComment, setNewComment] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [editingCommentId, setEditingCommentId] = useState<number | null>(null);
  const [editCommentText, setEditCommentText] = useState("");
  const [isDeleting, setIsDeleting] = useState(false);
  const router = useRouter();

  // Reference for the textarea for focusing
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Fetch comments when component mounts
  useEffect(() => {
    fetchComments();
    getCurrentUser();
  }, [courseId, classIndex, sectionType]);

  // Get current user information
  const getCurrentUser = async () => {
    try {
      const userData = await courseCommentApi.getCurrentUser();
      setCurrentUser(userData);
    } catch (error) {
      console.error("Error fetching current user:", error);
    }
  };

  // Fetch comments based on filters
  const fetchComments = async () => {
    try {
      setIsLoading(true);
      const response = await courseCommentApi.getComments(
        courseId,
        sectionType,
        classIndex
      );

      setComments(response.data || []);
    } catch (error) {
      console.error("Error fetching comments:", error);
      setError("Failed to load comments. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  // Submit a new comment
  const submitComment = async (e: React.FormEvent) => {
    e.preventDefault();

    // Check if user is logged in
    if (!currentUser) {
      // Redirect to login page with a return URL
      const currentPath = window.location.pathname;
      router.push(`/login?returnUrl=${encodeURIComponent(currentPath)}`);
      return;
    }

    // Validate comment text
    if (!newComment.trim()) {
      return;
    }

    try {
      setIsSubmitting(true);
      setError(null);

      await courseCommentApi.addComment(
        courseId,
        sectionType,
        newComment,
        classIndex
      );

      // Reset the comment input and refresh comments
      setNewComment("");
      fetchComments();
    } catch (error) {
      console.error("Error submitting comment:", error);
      setError("Failed to submit your comment. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Start editing a comment
  const startEditComment = (comment: Comment) => {
    setEditingCommentId(comment.id);
    setEditCommentText(comment.attributes.comment);

    // Focus the editing textarea after state update
    setTimeout(() => {
      if (textareaRef.current) {
        textareaRef.current.focus();
      }
    }, 0);
  };

  // Cancel editing a comment
  const cancelEditComment = () => {
    setEditingCommentId(null);
    setEditCommentText("");
  };

  // Save edited comment
  const saveEditedComment = async (commentId: number) => {
    if (!editCommentText.trim()) return;

    try {
      setIsSubmitting(true);
      setError(null);

      await courseCommentApi.updateComment(
        commentId.toString(),
        editCommentText
      );

      // Exit edit mode and refresh comments
      setEditingCommentId(null);
      setEditCommentText("");
      fetchComments();
    } catch (error) {
      console.error("Error updating comment:", error);
      setError("Failed to update your comment. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  // Delete a comment
  const deleteComment = async (commentId: number) => {
    try {
      setIsDeleting(true);
      setError(null);

      await courseCommentApi.deleteComment(commentId.toString());

      // Remove the comment from local state for immediate UI update
      setComments(comments.filter((comment) => comment.id !== commentId));
    } catch (error) {
      console.error("Error deleting comment:", error);
      setError("Failed to delete your comment. Please try again.");

      // Refresh comments if delete failed
      fetchComments();
    } finally {
      setIsDeleting(false);
    }
  };

  // Check if comment belongs to current user
  const isOwnComment = (comment: Comment): boolean => {
    if (!currentUser || !comment.attributes.user.data) return false;
    return currentUser.id === comment.attributes.user.data.id;
  };

  // Format the time elapsed since the comment was posted
  const formatTimeElapsed = (dateString: string): string => {
    const commentDate = new Date(dateString);
    const now = new Date();

    const diffInSeconds = Math.floor(
      (now.getTime() - commentDate.getTime()) / 1000
    );

    if (diffInSeconds < 60) {
      return `${diffInSeconds} sec ago`;
    }

    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) {
      return `${diffInMinutes} min ago`;
    }

    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) {
      return `${diffInHours} hours ago`;
    }

    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 30) {
      return `${diffInDays} days ago`;
    }

    // For older comments, just show the date
    return commentDate.toLocaleDateString();
  };

  // Get the display name for a user
  const getUserDisplayName = (user: any): string => {
    if (user?.attributes) {
      // Try to use firstName and lastName if available
      if (user.attributes.firstName && user.attributes.lastName) {
        return `${user.attributes.firstName} ${user.attributes.lastName}`;
      }

      // Fall back to username
      if (user.attributes.username) {
        return user.attributes.username;
      }

      // Last resort, use email (but hide part of it for privacy)
      if (user.attributes.email) {
        const emailParts = user.attributes.email.split("@");
        return `${emailParts[0]}@...`;
      }
    }

    // If all else fails
    return "User";
  };

  // Get user profile picture URL
  const getUserPictureUrl = (user: any): string | null => {
    if (user?.attributes?.picture?.data?.attributes?.url) {
      const url = user.attributes.picture.data.attributes.url;
      // Check if it's an absolute URL
      if (url.startsWith("http://") || url.startsWith("https://")) {
        return url;
      }
      // Otherwise, it's a relative URL, so prepend the base URL
      const baseUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
      return `${baseUrl}${url}`;
    }
    return null;
  };

  // Get the initial for the user avatar when no picture is available
  const getUserInitial = (user: any): string => {
    if (user?.attributes) {
      if (user.attributes.firstName) {
        return user.attributes.firstName.charAt(0).toUpperCase();
      }
      if (user.attributes.username) {
        return user.attributes.username.charAt(0).toUpperCase();
      }
      if (user.attributes.email) {
        return user.attributes.email.charAt(0).toUpperCase();
      }
    }
    return "U";
  };

  // Handle attachments
  const handleAttachment = () => {
    // This would open a file picker in a real implementation
    alert("Attachment functionality would go here");
  };

  // Handle emoji picker
  const handleEmojiPicker = () => {
    // This would open an emoji picker in a real implementation
    alert("Emoji picker would go here");
  };

  // Handle more options
  const handleMoreOptions = () => {
    // This would show additional options in a real implementation
    alert("Additional options would go here");
  };

  return (
    <div className="bg-gray-50">
      {/* Loading state */}
      {isLoading && comments.length === 0 ? (
        <div className="flex justify-center items-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
        </div>
      ) : (
        <>
          {/* Comments list */}
          <div className="space-y-4 mb-6">
            {comments.length === 0 ? (
              <div className="text-center text-gray-500 py-4 bg-white rounded-lg">
                No comments yet. Be the first to comment!
              </div>
            ) : (
              comments.map((comment) => (
                <div
                  key={comment.id}
                  className="bg-white rounded-lg p-4 shadow-sm"
                >
                  <div className="flex items-start">
                    {/* User avatar - either picture or initial */}
                    <div className="flex-shrink-0 mr-3">
                      {getUserPictureUrl(comment.attributes.user.data) ? (
                        <img
                          src={getUserPictureUrl(comment.attributes.user.data)!}
                          alt={getUserDisplayName(comment.attributes.user.data)}
                          className="h-10 w-10 rounded-full object-cover"
                        />
                      ) : (
                        <div className="h-10 w-10 bg-gray-200 rounded-full flex items-center justify-center text-gray-500 font-medium">
                          {getUserInitial(comment.attributes.user.data)}
                        </div>
                      )}
                    </div>

                    <div className="flex-grow">
                      <div className="flex justify-between items-center">
                        <span className="font-medium">
                          {comment.attributes.user &&
                          comment.attributes.user.data
                            ? getUserDisplayName(comment.attributes.user.data)
                            : "Unknown User"}
                        </span>
                        <div className="flex items-center">
                          <span className="text-xs text-gray-500 mr-2">
                            {formatTimeElapsed(comment.attributes.createdAt)}
                          </span>

                          {/* Edit/Delete buttons (only for user's own comments) */}
                          {isOwnComment(comment) && (
                            <div className="flex space-x-2">
                              {editingCommentId !== comment.id && (
                                <>
                                  <button
                                    onClick={() => startEditComment(comment)}
                                    className="text-gray-500 hover:text-blue-600"
                                    title="Edit"
                                  >
                                    <PencilIcon className="h-4 w-4" />
                                  </button>
                                  <button
                                    onClick={() => deleteComment(comment.id)}
                                    className="text-gray-500 hover:text-red-600"
                                    title="Delete"
                                    disabled={isDeleting}
                                  >
                                    <TrashIcon className="h-4 w-4" />
                                  </button>
                                </>
                              )}
                            </div>
                          )}
                        </div>
                      </div>

                      {/* Edit mode or display mode based on state */}
                      {editingCommentId === comment.id ? (
                        <div className="mt-2">
                          <textarea
                            ref={textareaRef}
                            value={editCommentText}
                            onChange={(e) => setEditCommentText(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                            rows={3}
                          />
                          <div className="flex justify-end mt-2 space-x-2">
                            <button
                              onClick={cancelEditComment}
                              className="flex items-center px-2 py-1 text-xs bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300"
                            >
                              <XMarkIcon className="h-3 w-3 mr-1" />
                              Cancel
                            </button>
                            <button
                              onClick={() => saveEditedComment(comment.id)}
                              className="flex items-center px-2 py-1 text-xs bg-blue-600 text-white rounded-md hover:bg-blue-700"
                              disabled={!editCommentText.trim() || isSubmitting}
                            >
                              <CheckIcon className="h-3 w-3 mr-1" />
                              Save
                            </button>
                          </div>
                        </div>
                      ) : (
                        <p className="text-gray-600 text-sm mt-1">
                          {comment.attributes.comment}
                        </p>
                      )}
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* Comment input form - updated to match Figma design */}
          <div className="bg-white rounded-lg shadow-sm">
            <form onSubmit={submitComment} className="p-4">
              <textarea
                placeholder={currentUser ? "Write a post" : "Login to comment"}
                className="w-full border-none resize-none focus:outline-none text-sm"
                rows={3}
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
                disabled={!currentUser || isSubmitting}
              />

              <div className="flex justify-between items-center mt-2 pt-2 border-t border-gray-100">
                <div className="flex space-x-2">
                  <button
                    type="button"
                    onClick={handleAttachment}
                    className="text-gray-400 hover:text-gray-600 p-1 rounded-md hover:bg-gray-100"
                    title="Add attachment"
                  >
                    <PaperClipIcon className="h-5 w-5" />
                  </button>
                  <button
                    type="button"
                    onClick={handleEmojiPicker}
                    className="text-gray-400 hover:text-gray-600 p-1 rounded-md hover:bg-gray-100"
                    title="Add emoji"
                  >
                    <FaceSmileIcon className="h-5 w-5" />
                  </button>
                  <button
                    type="button"
                    onClick={handleMoreOptions}
                    className="text-gray-400 hover:text-gray-600 p-1 rounded-md hover:bg-gray-100"
                    title="More options"
                  >
                    <EllipsisHorizontalIcon className="h-5 w-5" />
                  </button>
                </div>
                <button
                  type="submit"
                  className={`px-4 py-2 rounded-md text-sm font-medium ${
                    !currentUser || isSubmitting || !newComment.trim()
                      ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                      : "bg-purple-600 text-white hover:bg-purple-700"
                  }`}
                  disabled={!currentUser || isSubmitting || !newComment.trim()}
                >
                  {isSubmitting ? "Sending..." : "Send"}
                </button>
              </div>
            </form>
          </div>

          {/* Error message */}
          {error && (
            <div className="mt-4 p-3 bg-red-100 text-red-700 rounded-md text-sm">
              {error}
            </div>
          )}

          {/* Login prompt for non-authenticated users */}
          {!currentUser && (
            <div className="mt-2 text-xs text-gray-500 text-center">
              <a href="/login" className="text-purple-600 hover:underline">
                Login to join the conversation
              </a>
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default CourseCommentsComponent;

// === ./src/components/dashboard/course/user/CourseCompletedComponent.tsx ===
"use client";

import { useState, useEffect } from "react";
import {
  CheckCircleIcon,
  AcademicCapIcon,
  UserGroupIcon,
  ArrowRightIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";
import Link from "next/link";

interface CourseCompletedComponentProps {
  slug: string;
  completionPercentage: number;
}

interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
  };
}

const CourseCompletedComponent = ({
  slug,
  completionPercentage,
}: CourseCompletedComponentProps) => {
  const [course, setCourse] = useState<Course | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isGeneratingCertificate, setIsGeneratingCertificate] = useState(false);

  // Mock data for recommended courses
  const recommendedCourses = [
    {
      id: 1,
      title: "Advanced Meditation Techniques",
      slug: "advanced-meditation-techniques",
    },
    {
      id: 2,
      title: "Mindfulness for Daily Life",
      slug: "mindfulness-daily-life",
    },
  ];

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        setIsLoading(true);
        const response = await courseApi.getCourseBySlug(slug);

        if (response) {
          setCourse(response);
        }
      } catch (error) {
        console.error("Error fetching course:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCourse();
  }, [slug]);

  const handleGenerateCertificate = () => {
    if (completionPercentage < 100) return;

    setIsGeneratingCertificate(true);

    // Mock certificate generation
    setTimeout(() => {
      setIsGeneratingCertificate(false);
      // In a real application, this would redirect to a certificate page or download a PDF
      alert("Certificate generated successfully!");
    }, 2000);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="py-8 text-center">
        <p className="text-gray-500">Course information not available.</p>
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto px-4 py-12">
      <div className="text-center mb-12">
        <div className="inline-flex items-center justify-center h-24 w-24 rounded-full bg-green-100 text-green-600 mb-6">
          <CheckCircleIcon className="h-12 w-12" />
        </div>
        <h2 className="text-3xl font-bold mb-4">
          Course completion: {completionPercentage}%
        </h2>
        <p className="text-gray-600 mb-8">
          {completionPercentage === 100
            ? `Congratulations! You've completed "${course.attributes.title}".`
            : `You're making great progress in "${course.attributes.title}". Keep going!`}
        </p>

        {/* Progress bar */}
        <div className="w-full h-3 bg-gray-200 rounded-full mb-8">
          <div
            className="h-3 bg-green-500 rounded-full transition-all duration-500"
            style={{ width: `${completionPercentage}%` }}
          ></div>
        </div>

        {/* Certificate section */}
        <div className="bg-gray-50 border border-gray-200 rounded-lg p-8 text-left mb-12">
          <div className="flex items-start">
            <div className="flex-shrink-0 mr-4">
              <AcademicCapIcon className="h-8 w-8 text-purple-600" />
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">
                Certificate of Completion
              </h3>
              <p className="text-gray-600 mb-6">
                {completionPercentage === 100
                  ? "Your certificate is ready! Generate your personalized certificate to celebrate your achievement."
                  : `Complete the remaining ${
                      100 - completionPercentage
                    }% of the course to unlock your certificate.`}
              </p>
              <button
                onClick={handleGenerateCertificate}
                className={`px-6 py-3 rounded-md bg-purple-600 text-white font-medium flex items-center
                  ${
                    completionPercentage === 100
                      ? "hover:bg-purple-700"
                      : "opacity-50 cursor-not-allowed"
                  }`}
                disabled={
                  completionPercentage !== 100 || isGeneratingCertificate
                }
              >
                {isGeneratingCertificate ? (
                  <>
                    <span className="animate-spin h-4 w-4 mr-2 border-t-2 border-b-2 border-white rounded-full"></span>
                    Generating...
                  </>
                ) : (
                  "View Certificate"
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Recommendations section */}
      <div className="mt-12">
        <h3 className="text-xl font-bold mb-6">Recommended next steps</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
            <div className="flex items-start">
              <div className="flex-shrink-0 mr-3">
                <UserGroupIcon className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <h4 className="font-bold text-lg mb-2">Join the Community</h4>
                <p className="text-gray-600 mb-4">
                  Connect with fellow students and continue discussions about
                  meditation practices.
                </p>
                <a
                  href="#"
                  className="text-purple-600 font-medium hover:text-purple-800 flex items-center"
                >
                  Explore Community
                  <ArrowRightIcon className="h-4 w-4 ml-1" />
                </a>
              </div>
            </div>
          </div>

          <div className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow">
            <div className="flex items-start">
              <div className="flex-shrink-0 mr-3">
                <AcademicCapIcon className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <h4 className="font-bold text-lg mb-2">Deepen Your Practice</h4>
                <p className="text-gray-600 mb-4">
                  Join one of our live online retreats to experience guided
                  meditation with our teachers.
                </p>
                <a
                  href="#"
                  className="text-purple-600 font-medium hover:text-purple-800 flex items-center"
                >
                  View Upcoming Retreats
                  <ArrowRightIcon className="h-4 w-4 ml-1" />
                </a>
              </div>
            </div>
          </div>
        </div>

        {/* Recommended courses */}
        <h3 className="text-xl font-bold mb-4">
          Continue your learning journey
        </h3>
        <div className="border border-gray-200 rounded-lg divide-y">
          {recommendedCourses.map((course) => (
            <div key={course.id} className="p-4 hover:bg-gray-50">
              <Link
                href={`/dashboard/user/courses/${course.slug}`}
                className="flex justify-between items-center"
              >
                <span className="font-medium">{course.title}</span>
                <ArrowRightIcon className="h-5 w-5 text-gray-400" />
              </Link>
            </div>
          ))}
        </div>
      </div>

      {/* Return to course button */}
      <div className="text-center mt-12">
        <Link
          href={`/dashboard/user/courses/${slug}/overview`}
          className="inline-flex items-center px-6 py-3 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
        >
          Return to course
        </Link>
      </div>
    </div>
  );
};

export default CourseCompletedComponent;

// === ./src/components/dashboard/course/user/CourseDetailPage.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import {
  ArrowLeftIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  ChevronDownIcon,
  PlayIcon,
  MagnifyingGlassIcon,
  XMarkIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";
import ReactMarkdown from "react-markdown";
import SuccessNotification from "@/components/dashboard/course/user/SuccessNotificationPage";
import CourseTestimonialsComponent from "@/components/dashboard/course/user/CourseTestimonialsComponent";

interface CourseDetailPageProps {
  slug: string;
}

// Define types based on Strapi structure
interface Instructor {
  id: number;
  attributes: {
    name: string;
    title?: string;
    bio?: string;
    website?: string;
    picture?: {
      data?: {
        attributes: {
          url: string;
        };
      };
    };
  };
}

interface FeaturedQuote {
  quoteText: string;
  authorName: string;
  authorImage?: {
    data?: {
      attributes: {
        url: string;
      };
    };
  };
}

interface LearningPoint {
  title: string;
  description: string;
}

interface CourseFeatures {
  videoClasses: string;
  guidedMeditations: string;
  studyMaterials: string;
  supportInfo: string;
  curriculumAids: string;
}

interface ClassContent {
  video?: any;
  essay?: any;
  guidedMeditation?: any;
  videoDescription?: string;
  videoTranscript?: string;
  keyConcepts?: string;
  writingPrompts?: string;
}

interface CourseClass {
  id: number;
  attributes: {
    title: string;
    orderIndex: number;
    description?: string;
    duration?: string;
    content?: ClassContent;
  };
}

interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
    description: string;
    price: number;
    isFree: boolean;
    startDate?: string;
    endDate?: string;
    introduction?: string;
    addendum?: string;
    featuredImage?: {
      data?: {
        attributes: {
          url: string;
        };
      };
    };
    previewMedia?: {
      data: Array<{
        id: number;
        attributes: {
          url: string;
          mime: string;
          name: string;
        };
      }>;
    };
    instructors?: {
      data: Instructor[];
    };
    whatYouWillLearn?: any[];
    courseFeatures?: CourseFeatures;
    featuredQuote?: FeaturedQuote;
    introVideo?: {
      title?: string;
      video?: {
        data?: {
          attributes: {
            url: string;
            mime: string;
            name: string;
          };
        };
      };
    };
  };
}

const CourseDetailPage = ({ slug }: CourseDetailPageProps) => {
  const [course, setCourse] = useState<Course | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const [classes, setClasses] = useState<CourseClass[]>([]);
  const [expandedClassIds, setExpandedClassIds] = useState<number[]>([]);
  const [currentTestimonialPage, setCurrentTestimonialPage] = useState(0);
  const [showSuccessNotification, setShowSuccessNotification] = useState(false);
  const [isEnrolling, setIsEnrolling] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [activeSection, setActiveSection] = useState<string | null>(null);
  const [activeMediaIndex, setActiveMediaIndex] = useState(0);
  const [showMediaModal, setShowMediaModal] = useState(false);
  const [modalMedia, setModalMedia] = useState<{
    type: string;
    url: string;
    title: string;
  } | null>(null);

  // Refs for media slider
  const sliderRef = useRef<HTMLDivElement>(null);
  const sectionsRef = useRef<Record<string, HTMLDivElement | null>>({});

  // Register section refs for scrolling
  const registerSectionRef = (id: string, ref: HTMLDivElement | null) => {
    if (ref && !sectionsRef.current[id]) {
      sectionsRef.current[id] = ref;
    }
  };

  // Helper function to get image URL with proper base
  const getImageUrl = (url?: string) => {
    if (!url) return "";

    // Check if it's an absolute URL
    if (url.startsWith("http://") || url.startsWith("https://")) {
      return url;
    }

    // Otherwise, it's a relative URL, so prepend the base URL
    const baseUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
    return `${baseUrl}${url}`;
  };

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        setIsLoading(true);
        const response = await courseApi.getCourseBySlug(slug);

        if (!response) {
          setError("Course not found");
          return;
        }

        setCourse(response);

        // After setting the course, fetch the classes
        if (response.id) {
          fetchClasses(response.id.toString());
        }
      } catch (err) {
        console.error("Error fetching course:", err);
        setError("Failed to load course details");
      } finally {
        setIsLoading(false);
      }
    };

    const fetchClasses = async (courseId: string) => {
      try {
        const response = await courseApi.getClasses(courseId);

        if (response.data && response.data.length > 0) {
          setClasses(response.data);
          // Expand the first class by default
          setExpandedClassIds([response.data[0].id]);
        } else {
          console.log("No classes found for this course");
          setClasses([]);
        }
      } catch (err) {
        console.error("Error fetching classes:", err);
      }
    };

    if (slug) {
      fetchCourse();
    }
  }, [slug]);

  useEffect(() => {
    // Check if we're returning from a successful enrollment
    const checkEnrollmentSuccess = () => {
      if (typeof window !== "undefined") {
        const urlParams = new URLSearchParams(window.location.search);
        const enrolled = urlParams.get("enrolled");

        if (enrolled === "true") {
          // Show success notification
          setShowSuccessNotification(true);

          // Remove the query parameter using history API
          const newUrl = window.location.pathname;
          window.history.replaceState({}, document.title, newUrl);
        }
      }
    };

    checkEnrollmentSuccess();
  }, []);

  // Function to handle search highlighting and scrolling
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (!searchQuery.trim()) return;

    // Simple search implementation - could be enhanced with a proper search library
    const searchText = searchQuery.toLowerCase();

    // Find the first section containing the search text
    for (const [id, sectionRef] of Object.entries(sectionsRef.current)) {
      if (sectionRef) {
        const sectionText = sectionRef.innerText.toLowerCase();
        if (sectionText.includes(searchText)) {
          sectionRef.scrollIntoView({ behavior: "smooth", block: "center" });
          setActiveSection(id);

          // Highlight could be implemented with CSS classes or with a more sophisticated approach
          // For now we'll just focus on finding the section
          break;
        }
      }
    }
  };

  // Function to handle playing a preview video
  const handlePlayMedia = (index: number) => {
    setActiveMediaIndex(index);

    // Get the media item
    const media = course?.attributes.previewMedia?.data[index];
    if (!media) return;

    // For videos or images, open in modal
    if (
      media.attributes.mime.startsWith("video/") ||
      media.attributes.mime.startsWith("image/")
    ) {
      setModalMedia({
        type: media.attributes.mime,
        url: getImageUrl(media.attributes.url),
        title: media.attributes.name || "Media Preview",
      });
      setShowMediaModal(true);
    }
  };

  // Updated handlePurchase function with redirection
  const handlePurchase = async () => {
    if (!course) return;

    try {
      // Check if the course is free or paid
      if (course.attributes.isFree || course.attributes.price === 0) {
        setIsEnrolling(true);
        setErrorMessage(null);

        try {
          // Enroll in the free course
          await courseApi.enrollInCourse(course.id.toString());

          // Show success notification
          setShowSuccessNotification(true);

          // Redirect after a short delay
          setTimeout(() => {
            // Redirect to the courses page with the "my-courses" tab active
            localStorage.setItem("coursesActiveTab", "my-courses");
            router.push("/dashboard/user/courses");
          }, 3000);
        } catch (enrollError: any) {
          console.error("Error enrolling in course:", enrollError);
          setErrorMessage(
            enrollError.message ||
              "Failed to enroll in course. Please try again."
          );
        } finally {
          setIsEnrolling(false);
        }
      } else {
        // For paid courses, redirect to payment page
        router.push(`/dashboard/user/courses/${slug}/payment`);
      }
    } catch (err) {
      console.error("Error in purchase flow:", err);
      setIsEnrolling(false);
      setErrorMessage("An unexpected error occurred. Please try again.");
    }
  };

  // Helper function to format date
  const formatDate = (dateString?: string) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  // Slider navigation with dot update
  const scrollLeft = () => {
    if (sliderRef.current) {
      sliderRef.current.scrollBy({ left: -300, behavior: "smooth" });
      // Move to previous media item (with circular loop)
      setActiveMediaIndex((prev) => {
        const mediaCount = course?.attributes.previewMedia?.data.length || 0;
        return (prev - 1 + mediaCount) % mediaCount;
      });
    }
  };

  const scrollRight = () => {
    if (sliderRef.current) {
      sliderRef.current.scrollBy({ left: 300, behavior: "smooth" });
      // Move to next media item (with circular loop)
      setActiveMediaIndex((prev) => {
        const mediaCount = course?.attributes.previewMedia?.data.length || 0;
        return (prev + 1) % mediaCount;
      });
    }
  };

  // Toggle syllabus section expansion
  const toggleClass = (classId: number) => {
    setExpandedClassIds((prevIds) =>
      prevIds.includes(classId)
        ? prevIds.filter((id) => id !== classId)
        : [...prevIds, classId]
    );
  };

  // Calculate duration for each class using the duration field from class attributes
  const calculateDuration = (courseClass: CourseClass): string => {
    // Use the duration field directly if available
    if (courseClass.attributes.duration) {
      const durationMinutes = parseInt(courseClass.attributes.duration, 10);

      // Format based on duration length
      if (durationMinutes >= 60) {
        const hours = Math.floor(durationMinutes / 60);
        const minutes = durationMinutes % 60;

        // Format appropriately
        if (minutes === 0) {
          return `${hours} h`; // Just hours if no minutes
        } else {
          return `${hours} h ${minutes} m`; // Hours and minutes
        }
      } else {
        return `${durationMinutes} m`; // Just minutes if less than an hour
      }
    }

    // Return empty string if no duration available
    return "";
  };

  // Count lectures based on content fields: video, keyConcepts, writingPrompts
  const countLectures = (courseClass: CourseClass): string => {
    let count = 0;
    const content = courseClass.attributes.content;

    if (!content) return "0 lectures";

    // Check if video field exists in content
    if (content.video) {
      count++;
    }

    // Check if keyConcepts field exists in content
    if (content.keyConcepts) {
      count++;
    }

    // Check if writingPrompts field exists in content
    if (content.writingPrompts) {
      count++;
    }

    // Return in the format "X lectures"
    return `${count} ${count === 1 ? "lecture" : "lectures"}`;
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error || !course) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 p-4 rounded-md">
          <p className="text-red-700">{error || "Course not found"}</p>
        </div>
        <div className="mt-4">
          <Link
            href="/dashboard/user/courses"
            className="text-purple-600 hover:underline flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-1" />
            Back to courses
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div>
      {/* Back button */}
      <div className="container mx-auto px-4 py-4">
        <div className="flex justify-between items-center">
          <Link
            href="/dashboard/user/courses"
            className="text-gray-600 hover:text-gray-900 flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-1" />
            Back
          </Link>
          {/* Search Bar */}
          <form
            onSubmit={handleSearch}
            className="relative hidden md:flex items-center max-w-xs"
          >
            <input
              type="text"
              placeholder="Search"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500 pr-10"
            />
            <button
              type="submit"
              className="absolute right-2 text-gray-400 hover:text-gray-600"
            >
              <MagnifyingGlassIcon className="h-5 w-5" />
            </button>
          </form>
        </div>
      </div>

      {/* Course header - grey background */}
      <div className="bg-gray-50 py-6">
        <div className="container mx-auto px-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Left: Featured Image (more compact and square) */}
            <div className="md:col-span-1">
              <div className="overflow-hidden bg-gray-100 aspect-square md:max-w-xs mx-auto">
                {course.attributes.featuredImage?.data?.attributes?.url ? (
                  <img
                    src={getImageUrl(
                      course.attributes.featuredImage.data.attributes.url
                    )}
                    alt={course.attributes.title}
                    className="w-full h-full object-cover"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center bg-gray-200">
                    <span className="text-gray-400">No image available</span>
                  </div>
                )}
              </div>
            </div>

            {/* Right: Course Information */}
            <div className="md:col-span-2">
              <h1 className="text-3xl font-bold text-gray-900 mb-4">
                {course.attributes.title}
              </h1>

              {/* Free badge and payment info */}
              <div className="flex items-center mb-4">
                <span className="text-xl font-semibold text-black bg-transparent border-2 border-black rounded-full px-4 py-1">
                  {course.attributes.isFree || course.attributes.price === 0
                    ? "Free"
                    : `${course.attributes.price}`}
                </span>
                <span className="ml-2 text-sm text-gray-500">
                  One time payment
                </span>
              </div>

              {/* Course dates */}
              {(course.attributes.startDate || course.attributes.endDate) && (
                <div className="mb-4 text-gray-600">
                  {formatDate(course.attributes.startDate)} -{" "}
                  {formatDate(course.attributes.endDate)}
                </div>
              )}

              {/* Brief description */}
              <div className="mb-6 text-gray-700">
                <p>{course.attributes.description}</p>
              </div>

              {/* Membership Section with improved layout */}
              <div className="mb-6">
                <div className="flex flex-col md:flex-row md:items-center md:justify-between">
                  <div className="mb-4 md:mb-0">
                    <p className="text-sm text-gray-600 mb-2">
                      Are you a member?
                    </p>
                    <div className="relative inline-block w-full md:w-auto">
                      <select className="block appearance-none w-full md:w-48 bg-white border border-gray-300 px-4 py-2 pr-8 rounded leading-tight focus:outline-none focus:border-gray-500">
                        <option>No</option>
                        <option>Yes - Prajnani</option>
                        <option>Yes - Satyagrahi</option>
                        <option>Yes - Brahmachari</option>
                        <option>Yes - Sannyasi</option>
                      </select>
                      <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                        <ChevronDownIcon className="h-4 w-4" />
                      </div>
                    </div>
                  </div>

                  {/* Membership link placement moved to the right */}
                  <div className="text-right">
                    <a
                      href="#"
                      className="text-xs underline text-gray-600 hover:text-gray-800"
                    >
                      Discover our memberships to receive discounts
                    </a>
                  </div>
                </div>
              </div>

              {/* Enroll button */}
              <button
                onClick={handlePurchase}
                className="w-full py-3 px-6 rounded-md bg-black text-white font-medium hover:bg-gray-800 disabled:bg-gray-400 disabled:cursor-not-allowed"
                disabled={isEnrolling}
              >
                {isEnrolling ? (
                  <span className="flex items-center justify-center">
                    <span className="animate-spin mr-2 h-4 w-4 border-t-2 border-b-2 border-white rounded-full"></span>
                    Enrolling...
                  </span>
                ) : course.attributes.isFree ||
                  course.attributes.price === 0 ? (
                  "Enroll now (Free)"
                ) : (
                  `Purchase (${course.attributes.price})`
                )}
              </button>

              {errorMessage && (
                <div className="mt-2 text-sm text-red-600">
                  <p>{errorMessage}</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Featured video section - white background */}
      <div className="bg-white py-8">
        <div className="container mx-auto px-4">
          <div
            className="mb-8"
            ref={(el) => registerSectionRef("intro-video", el)}
          >
            {course.attributes.introVideo?.video?.data ? (
              <>
                <div className="bg-gray-700 rounded-lg overflow-hidden">
                  <div className="aspect-video relative">
                    {course.attributes.introVideo.video.data.attributes.mime.startsWith(
                      "video/"
                    ) ? (
                      <video
                        className="w-full h-full object-cover"
                        controls
                        poster="/video-placeholder.jpg"
                      >
                        <source
                          src={getImageUrl(
                            course.attributes.introVideo.video.data.attributes
                              .url
                          )}
                          type={
                            course.attributes.introVideo.video.data.attributes
                              .mime
                          }
                        />
                        Your browser does not support the video tag.
                      </video>
                    ) : (
                      <div className="w-full h-full flex items-center justify-center bg-gray-800">
                        <div className="flex flex-col items-center">
                          <PlayIcon className="h-16 w-16 text-white opacity-50 mb-4" />
                          <p className="text-white text-center">
                            Video format not supported
                          </p>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Video title and instructor badges */}
                  <div className="bg-gray-800 p-4">
                    {course.attributes.introVideo.title && (
                      <h3 className="text-white text-lg font-medium mb-4">
                        {course.attributes.introVideo.title}
                      </h3>
                    )}

                    {/* Instructor badges */}
                    <div className="flex flex-wrap gap-4">
                      {course.attributes.instructors?.data &&
                        course.attributes.instructors.data.map((instructor) => (
                          <div
                            key={instructor.id}
                            className="flex items-center gap-2"
                          >
                            {instructor.attributes.picture?.data?.attributes
                              ?.url ? (
                              <img
                                src={getImageUrl(
                                  instructor.attributes.picture.data.attributes
                                    .url
                                )}
                                alt={instructor.attributes.name}
                                className="h-8 w-8 object-cover rounded-full"
                              />
                            ) : (
                              <div className="h-8 w-8 bg-gray-400 rounded-full flex items-center justify-center">
                                <span className="text-white text-xs">
                                  {instructor.attributes.name.charAt(0)}
                                </span>
                              </div>
                            )}
                            <span className="text-white text-sm">
                              {instructor.attributes.name} · Instructor
                            </span>
                          </div>
                        ))}
                    </div>
                  </div>
                </div>
              </>
            ) : null}
          </div>
        </div>
      </div>

      {/* What you will learn - gray background */}
      {course.attributes.whatYouWillLearn &&
        course.attributes.whatYouWillLearn.length > 0 && (
          <div className="bg-gray-50 py-8">
            <div className="container mx-auto px-4">
              <div
                className="mb-8"
                ref={(el) => registerSectionRef("what-you-learn", el)}
              >
                <h2 className="text-3xl font-bold text-gray-900 mb-8">
                  What you will learn
                </h2>

                <div className="space-y-6">
                  {course.attributes.whatYouWillLearn.map((point, index) => (
                    <div key={index} className="flex">
                      <div className="flex-shrink-0 mr-4">
                        <ChevronRightIcon className="h-5 w-5 text-purple-700" />
                      </div>
                      <div>
                        <h3 className="font-bold text-gray-900 mb-1">
                          {point.title}
                        </h3>
                        <p className="text-gray-600">{point.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

      {/* This course includes - white background */}
      {course.attributes.courseFeatures && (
        <div className="bg-white py-8">
          <div className="container mx-auto px-4">
            <div
              className="mb-8"
              ref={(el) => registerSectionRef("course-features", el)}
            >
              <h2 className="text-3xl font-bold text-gray-900 mb-8">
                This course includes:
              </h2>

              <div className="space-y-6">
                {course.attributes.courseFeatures.videoClasses && (
                  <div className="flex">
                    <div className="flex-shrink-0 mr-4">
                      <ChevronRightIcon className="h-5 w-5 text-purple-700" />
                    </div>
                    <div>
                      <h3 className="font-bold text-gray-900 mb-1">
                        7 video classes
                      </h3>
                      <p className="text-gray-600">
                        {course.attributes.courseFeatures.videoClasses}
                      </p>
                    </div>
                  </div>
                )}

                {course.attributes.courseFeatures.guidedMeditations && (
                  <div className="flex">
                    <div className="flex-shrink-0 mr-4">
                      <ChevronRightIcon className="h-5 w-5 text-purple-700" />
                    </div>
                    <div>
                      <h3 className="font-bold text-gray-900 mb-1">
                        7 Guided meditations
                      </h3>
                      <p className="text-gray-600">
                        {course.attributes.courseFeatures.guidedMeditations}
                      </p>
                    </div>
                  </div>
                )}

                {course.attributes.courseFeatures.studyMaterials && (
                  <div className="flex">
                    <div className="flex-shrink-0 mr-4">
                      <ChevronRightIcon className="h-5 w-5 text-purple-700" />
                    </div>
                    <div>
                      <h3 className="font-bold text-gray-900 mb-1">
                        Additional study materials
                      </h3>
                      <p className="text-gray-600">
                        {course.attributes.courseFeatures.studyMaterials}
                      </p>
                    </div>
                  </div>
                )}

                {course.attributes.courseFeatures.supportInfo && (
                  <div className="flex">
                    <div className="flex-shrink-0 mr-4">
                      <ChevronRightIcon className="h-5 w-5 text-purple-700" />
                    </div>
                    <div>
                      <h3 className="font-bold text-gray-900 mb-1">
                        Comments and questions
                      </h3>
                      <p className="text-gray-600">
                        {course.attributes.courseFeatures.supportInfo}
                      </p>
                    </div>
                  </div>
                )}

                {course.attributes.courseFeatures.curriculumAids && (
                  <div className="flex">
                    <div className="flex-shrink-0 mr-4">
                      <ChevronRightIcon className="h-5 w-5 text-purple-700" />
                    </div>
                    <div>
                      <h3 className="font-bold text-gray-900 mb-1">
                        Curriculum study aids
                      </h3>
                      <p className="text-gray-600">
                        {course.attributes.courseFeatures.curriculumAids}
                      </p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Preview Media Slider - gray background (updated) */}
      {course.attributes.previewMedia?.data &&
        course.attributes.previewMedia.data.length > 0 && (
          <div className="bg-gray-50 py-16">
            <div className="container mx-auto px-4">
              <div
                className="relative"
                ref={(el) => registerSectionRef("preview-media", el)}
              >
                {/* Slider container with larger images */}
                <div
                  ref={sliderRef}
                  className="flex space-x-6 overflow-x-auto hide-scrollbar pb-6"
                  style={{ scrollbarWidth: "none", msOverflowStyle: "none" }}
                >
                  {course.attributes.previewMedia.data.map((media, index) => (
                    <div
                      key={media.id}
                      className="flex-shrink-0 w-96 h-64 bg-gray-100 rounded-lg overflow-hidden cursor-pointer"
                      onClick={() => handlePlayMedia(index)}
                    >
                      {media.attributes.mime.startsWith("image/") ? (
                        <img
                          src={getImageUrl(media.attributes.url)}
                          alt={media.attributes.name}
                          className="w-full h-full object-cover"
                        />
                      ) : media.attributes.mime.startsWith("video/") ? (
                        <div className="relative w-full h-full bg-black">
                          {/* Use actual thumbnail from video if available */}
                          <div className="w-full h-full bg-gray-800">
                            <img
                              src={
                                getImageUrl(media.attributes.url) + "?preview=1"
                              }
                              alt="Video thumbnail"
                              className="w-full h-full object-cover opacity-80"
                              onError={(e) => {
                                // Fallback if thumbnail generation fails
                                e.currentTarget.src = "/video-placeholder.jpg";
                              }}
                            />
                          </div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <div className="w-20 h-20 rounded-full flex items-center justify-center">
                              <div className="bg-white bg-opacity-80 w-16 h-16 rounded-full flex items-center justify-center">
                                <div className="ml-1 bg-purple-600 w-12 h-12 rounded-full flex items-center justify-center">
                                  <PlayIcon className="h-6 w-6 text-white" />
                                </div>
                              </div>
                            </div>
                            <div className="absolute bottom-4 left-4 bg-black bg-opacity-60 px-3 py-1 rounded text-white text-sm">
                              Video Preview
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="w-full h-full flex items-center justify-center">
                          <span className="text-gray-500">Media Preview</span>
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                {/* Navigation arrows - better positioned for larger media items */}
                <button
                  onClick={scrollLeft}
                  className="absolute -left-5 top-1/2 transform -translate-y-1/2 h-12 w-12 bg-white rounded-full shadow-lg flex items-center justify-center z-10 border border-gray-200"
                >
                  <ChevronLeftIcon className="h-5 w-5 text-gray-600" />
                </button>
                <button
                  onClick={scrollRight}
                  className="absolute -right-5 top-1/2 transform -translate-y-1/2 h-12 w-12 bg-white rounded-full shadow-lg flex items-center justify-center z-10 border border-gray-200"
                >
                  <ChevronRightIcon className="h-5 w-5 text-gray-600" />
                </button>

                {/* Pagination dots */}
                <div className="flex justify-center mt-6 space-x-2">
                  {course.attributes.previewMedia.data.map((_, index) => (
                    <div
                      key={index}
                      className={`h-2 w-2 rounded-full cursor-pointer ${
                        index === activeMediaIndex ? "bg-black" : "bg-gray-300"
                      }`}
                      onClick={() => setActiveMediaIndex(index)}
                    ></div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        )}

      {/* Featured Quote - white background (updated with bold text) */}
      {course.attributes.featuredQuote?.quoteText && (
        <div className="bg-white py-16">
          <div className="container mx-auto px-4">
            <div
              className="mb-8 text-center max-w-4xl mx-auto"
              ref={(el) => registerSectionRef("featured-quote", el)}
            >
              <blockquote className="text-2xl font-bold italic text-gray-900 mb-10 leading-relaxed">
                "{course.attributes.featuredQuote.quoteText}"
              </blockquote>

              <div className="flex flex-col items-center">
                {course.attributes.featuredQuote.authorImage?.data?.attributes
                  ?.url ? (
                  <img
                    src={getImageUrl(
                      course.attributes.featuredQuote.authorImage.data
                        .attributes.url
                    )}
                    alt={course.attributes.featuredQuote.authorName}
                    className="w-16 h-16 object-cover rounded-full mb-3"
                  />
                ) : (
                  <div className="w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mb-3">
                    <span className="text-gray-500 text-xl font-medium">
                      {course.attributes.featuredQuote.authorName.charAt(0)}
                    </span>
                  </div>
                )}
                <cite className="font-medium text-gray-900 not-italic text-lg">
                  {course.attributes.featuredQuote.authorName}
                </cite>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* The Instructors - gray background */}
      {course.attributes.instructors?.data &&
        course.attributes.instructors.data.length > 0 && (
          <div className="bg-gray-50 py-8">
            <div className="container mx-auto px-4">
              <div
                className="mb-8"
                ref={(el) => registerSectionRef("instructors", el)}
              >
                <h2 className="text-3xl font-bold text-gray-900 mb-8">
                  The instructors
                </h2>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                  {/* Sort instructors alphabetically by name */}
                  {[...course.attributes.instructors.data]
                    .sort((a, b) =>
                      a.attributes.name.localeCompare(b.attributes.name)
                    )
                    .map((instructor) => {
                      // Check if picture field exists and has data
                      const hasPicture =
                        instructor.attributes.picture &&
                        instructor.attributes.picture.data &&
                        instructor.attributes.picture.data.attributes &&
                        instructor.attributes.picture.data.attributes.url;

                      const imageUrl = hasPicture
                        ? getImageUrl(
                            instructor.attributes.picture.data.attributes.url
                          )
                        : null;

                      return (
                        <div key={instructor.id} className="flex">
                          <div className="flex-shrink-0 mr-4">
                            {imageUrl ? (
                              <img
                                src={imageUrl}
                                alt={instructor.attributes.name}
                                className="h-32 w-32 object-cover rounded-sm"
                              />
                            ) : (
                              <div className="h-32 w-32 bg-gray-100 flex items-center justify-center rounded-sm">
                                <span className="text-gray-500 text-6xl font-medium">
                                  {instructor.attributes.name.charAt(0)}
                                </span>
                              </div>
                            )}
                          </div>
                          <div>
                            <h3 className="text-lg font-bold text-gray-900 mb-2">
                              {instructor.attributes.name}
                            </h3>
                            {instructor.attributes.title && (
                              <p className="text-gray-500 text-sm mb-2">
                                {instructor.attributes.title}
                              </p>
                            )}
                            {instructor.attributes.bio && (
                              <p className="text-gray-600 text-sm">
                                {instructor.attributes.bio}
                              </p>
                            )}
                            {instructor.attributes.website && (
                              <a
                                href={instructor.attributes.website}
                                className="text-purple-600 hover:underline text-sm mt-2 inline-block"
                                target="_blank"
                                rel="noopener noreferrer"
                              >
                                Visit website
                              </a>
                            )}
                          </div>
                        </div>
                      );
                    })}
                </div>
              </div>
            </div>
          </div>
        )}

      {/* Remaining sections (Syllabus, Testimonials, CTA) - white background */}
      <div className="bg-white py-8">
        <div className="container mx-auto px-4">
          {/* Syllabus Section */}
          {classes.length > 0 && (
            <div
              className="mb-16"
              ref={(el) => registerSectionRef("syllabus", el)}
            >
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                Syllabus
              </h2>
              <p className="text-gray-600 mb-8">
                {classes.length} class course curriculum
              </p>

              <div className="space-y-4">
                {classes.map((courseClass) => {
                  const isExpanded = expandedClassIds.includes(courseClass.id);

                  return (
                    <div
                      key={courseClass.id}
                      className="border-t border-gray-200"
                    >
                      <button
                        onClick={() => toggleClass(courseClass.id)}
                        className="flex justify-between items-center w-full py-4 text-left"
                      >
                        <div className="flex items-center">
                          <ChevronRightIcon
                            className={`h-5 w-5 text-purple-700 mr-2 transition-transform ${
                              isExpanded ? "transform rotate-90" : ""
                            }`}
                          />
                          <span className="text-purple-700 font-medium">
                            {courseClass.attributes.title}
                          </span>
                        </div>
                        <div className="text-gray-500 text-sm">
                          {calculateDuration(courseClass)} ·{" "}
                          {countLectures(courseClass)}
                        </div>
                      </button>

                      {/* Expanded content */}
                      {isExpanded && (
                        <div className="pl-8 pb-4 pr-4">
                          {/* Class description - rendered as markdown */}
                          {courseClass.attributes.description && (
                            <div className="mb-4 prose max-w-none">
                              <ReactMarkdown>
                                {courseClass.attributes.description}
                              </ReactMarkdown>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* Testimonials */}
          <div
            className="mb-16"
            ref={(el) => registerSectionRef("testimonials", el)}
          >
            <h2 className="text-3xl font-bold text-gray-900 mb-2">
              Testimonials
            </h2>
            <p className="text-gray-600 mb-8">What students say about us</p>

            {course && (
              <CourseTestimonialsComponent
                courseId={course.id.toString()}
                maxDisplay={3}
              />
            )}
          </div>

          {/* Enroll Now button at bottom of page */}
          <div className="py-12 flex justify-center">
            <button
              onClick={handlePurchase}
              className="px-12 py-4 bg-black text-white text-lg font-medium rounded-md hover:bg-gray-800 transition-colors"
              disabled={isEnrolling}
            >
              {isEnrolling ? (
                <span className="flex items-center justify-center">
                  <span className="animate-spin mr-2 h-5 w-5 border-t-2 border-b-2 border-white rounded-full"></span>
                  Enrolling...
                </span>
              ) : course.attributes.isFree || course.attributes.price === 0 ? (
                "Enroll Now"
              ) : (
                `Purchase Now (${course.attributes.price})`
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Style for hiding scrollbars */}
      <style jsx>{`
        .hide-scrollbar::-webkit-scrollbar {
          display: none;
        }
        .modal-backdrop {
          background-color: rgba(0, 0, 0, 0.75);
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          z-index: 50;
          display: flex;
          justify-content: center;
          align-items: center;
          backdrop-filter: blur(2px);
        }
        .modal-content {
          max-width: 90vw;
          max-height: 90vh;
          background-color: #000;
          border-radius: 0.5rem;
          overflow: hidden;
          position: relative;
        }
        .modal-close {
          position: absolute;
          top: 1rem;
          right: 1rem;
          background-color: rgba(255, 255, 255, 0.2);
          color: white;
          width: 2.5rem;
          height: 2.5rem;
          border-radius: 9999px;
          display: flex;
          align-items: center;
          justify-content: center;
          cursor: pointer;
          z-index: 60;
          transition: background-color 0.2s;
        }
        .modal-close:hover {
          background-color: rgba(255, 255, 255, 0.3);
        }
      `}</style>

      {/* Success notification */}
      {showSuccessNotification && (
        <SuccessNotification
          message="Course successfully added to your courses! You can find it in the 'My Courses' tab."
          duration={5000}
          onClose={() => setShowSuccessNotification(false)}
        />
      )}

      {/* Media Modal */}
      {showMediaModal && modalMedia && (
        <div
          className="modal-backdrop"
          onClick={() => setShowMediaModal(false)}
        >
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <button
              className="modal-close"
              onClick={() => setShowMediaModal(false)}
            >
              <XMarkIcon className="h-6 w-6" />
            </button>

            {modalMedia.type.startsWith("video/") ? (
              <video
                className="max-w-full max-h-[80vh] mx-auto"
                controls
                autoPlay
                src={modalMedia.url}
                title={modalMedia.title}
              />
            ) : modalMedia.type.startsWith("image/") ? (
              <img
                className="max-w-full max-h-[80vh] mx-auto object-contain"
                src={modalMedia.url}
                alt={modalMedia.title}
              />
            ) : (
              <div className="p-8 text-white">Unsupported media type</div>
            )}

            <div className="p-4 text-white">
              <h3 className="text-lg font-medium">{modalMedia.title}</h3>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CourseDetailPage;

// === ./src/components/dashboard/course/user/CourseOverview.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import {
  ArrowLeftIcon,
  ChevronDownIcon,
  ChevronRightIcon,
  CheckIcon,
  CheckCircleIcon,
  LockClosedIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";
import { courseProgressApi } from "@/lib/courseProgressApi";
import ReactMarkdown from "react-markdown";

interface CourseOverviewProps {
  slug: string;
  isAuthenticated: boolean;
}

// Interface for the progress data as stored in component state
interface ProgressData {
  [key: string]: {
    started: boolean;
    completed: boolean;
    progress: number; // 0-100
  };
}

// Define the progress data structure from API
interface ClassProgress {
  classId: number;
  orderIndex: number;
  video: number;
  keyConcepts: number;
  writingPrompts: number;
  additionalMaterials: number;
  completed: boolean;
  lastAccessed: string | null;
}

interface CourseProgressData {
  id: number;
  attributes: {
    tracking: {
      classes: ClassProgress[];
      started: boolean;
      completed: boolean;
      startDate: string | null;
      lastAccessDate: string | null;
    };
    enrolledDate: string;
  };
}

// Interface for section durations
interface ClassContent {
  video?: {
    duration?: number;
  };
  keyConcepts?: {
    duration?: number;
  };
  writingPrompts?: {
    duration?: number;
  };
  additionalMaterials?: {
    duration?: number;
  };
}

interface CourseClass {
  id: number;
  attributes: {
    title: string;
    orderIndex: number;
    description?: string;
    content?: ClassContent;
  };
}

const CourseOverview = ({ slug, isAuthenticated }: CourseOverviewProps) => {
  const [course, setCourse] = useState<any>(null);
  const [classes, setClasses] = useState<CourseClass[]>([]);
  const [expandedSections, setExpandedSections] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState<ProgressData>({});
  const [isCourseCompleted, setIsCourseCompleted] = useState(false);
  const router = useRouter();

  // Store the full progress data for calculating overall percentage
  const progressDataRef = useRef<CourseProgressData | null>(null);

  // Fetch course data and progress
  useEffect(() => {
    const fetchCourse = async () => {
      try {
        setIsLoading(true);
        const response = await courseApi.getCourseBySlug(slug);

        if (!response) {
          setError("Course not found");
          return;
        }

        setCourse(response);

        // After setting the course, fetch the classes
        if (response.id) {
          fetchClasses(response.id.toString());

          // Fetch progress data if user is authenticated
          if (isAuthenticated) {
            await fetchCourseProgress(response.id.toString());
          }
        }
      } catch (err) {
        console.error("Error fetching course:", err);
        setError("Failed to load course details");
      } finally {
        setIsLoading(false);
      }
    };

    const fetchClasses = async (courseId: string) => {
      try {
        const response = await courseApi.getClasses(courseId);

        if (response.data && response.data.length > 0) {
          // Sort classes by orderIndex
          const sortedClasses = [...response.data].sort(
            (a, b) => a.attributes.orderIndex - b.attributes.orderIndex
          );

          setClasses(sortedClasses);
          // Expand the Welcome section by default
          setExpandedSections(["welcome"]);
        } else {
          console.log("No classes found for this course");
          setClasses([]);
        }
      } catch (err) {
        console.error("Error fetching classes:", err);
        setError("Failed to load course classes");
      }
    };

    // Function to fetch and process course progress data
    const fetchCourseProgress = async (courseId: string) => {
      try {
        const progressData = await courseProgressApi.getUserCourseProgress(
          courseId
        );

        if (
          progressData &&
          progressData.attributes &&
          progressData.attributes.tracking
        ) {
          // Store full progress data for calculations
          progressDataRef.current = progressData;

          // Check if course is completed from API data
          setIsCourseCompleted(progressData.attributes.tracking.completed);

          // Transform progress data to the format our component uses
          const formattedProgress: ProgressData = {};

          const tracking = progressData.attributes.tracking;

          // Set introduction progress
          formattedProgress["introduction"] = {
            started: tracking.started,
            completed: tracking.started, // Assume intro is complete if course is started
            progress: tracking.started ? 100 : 0,
          };

          // Process each class's components
          if (tracking.classes && Array.isArray(tracking.classes)) {
            tracking.classes.forEach((classItem) => {
              // For each component in the class (video, keyConcepts, writingPrompts, additionalMaterials)
              // Create progress entries with the format: "orderIndex.componentNumber"
              const componentMapping = {
                video: 1,
                keyConcepts: 2,
                writingPrompts: 3,
                additionalMaterials: 4,
              };

              Object.entries(componentMapping).forEach(
                ([componentName, componentNumber]) => {
                  // Create the key in format "orderIndex.componentNumber" (e.g., "1.1", "1.2", etc.)
                  const key = `${classItem.orderIndex}.${componentNumber}`;

                  // Get the progress value (0-1) for this component
                  const progressValue = classItem[
                    componentName as keyof ClassProgress
                  ] as number;

                  // Store formatted progress data
                  formattedProgress[key] = {
                    started: progressValue > 0,
                    completed: progressValue >= 0.99, // Consider it complete at 99%
                    progress: Math.round(progressValue * 100),
                  };
                }
              );
            });
          }

          setProgress(formattedProgress);
        } else {
          console.log("No progress data found or invalid structure");
        }
      } catch (err) {
        console.error("Error fetching course progress:", err);
      }
    };

    if (slug) {
      fetchCourse();
    }
  }, [slug, isAuthenticated]);

  // Toggle section expansion (except for addendum if course is not completed)
  const toggleSection = (sectionId: string) => {
    // Don't toggle addendum if course is not completed
    if (sectionId === "course-addendum" && !isCourseCompleted) {
      return;
    }

    setExpandedSections((prevIds) =>
      prevIds.includes(sectionId)
        ? prevIds.filter((id) => id !== sectionId)
        : [...prevIds, sectionId]
    );
  };

  // Get total duration for the course
  const getTotalDuration = (): string => {
    let totalMinutes = 0;

    classes.forEach((classItem) => {
      // Sum up all section durations for this class
      const content = classItem.attributes.content;
      if (content) {
        // Add each section's duration if available
        if (content.video?.duration) totalMinutes += content.video.duration;
        if (content.keyConcepts?.duration)
          totalMinutes += content.keyConcepts.duration;
        if (content.writingPrompts?.duration)
          totalMinutes += content.writingPrompts.duration;
        if (content.additionalMaterials?.duration)
          totalMinutes += content.additionalMaterials.duration;
      }
    });

    // Format as hours:minutes
    const hours = Math.floor(totalMinutes / 60);
    const minutes = totalMinutes % 60;

    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, "0")}:00 hours`;
    } else {
      return `${minutes}:00 min`;
    }
  };

  // Get progress for a specific component
  const getComponentProgress = (classIndex: number, componentIndex: number) => {
    const key = `${classIndex}.${componentIndex}`;
    return progress[key] || { started: false, completed: false, progress: 0 };
  };

  // Check if a section exists for a given class
  const sectionExists = (
    courseClass: CourseClass,
    sectionType: string
  ): boolean => {
    if (!courseClass.attributes.content) return false;

    const content = courseClass.attributes.content;

    switch (sectionType) {
      case "video":
        return !!content.video;
      case "keyConcepts":
        return !!content.keyConcepts;
      case "writingPrompts":
        return !!content.writingPrompts;
      case "additionalMaterials":
        return !!content.additionalMaterials;
      default:
        return false;
    }
  };

  // Get section duration
  const getSectionDuration = (
    courseClass: CourseClass,
    sectionType: string
  ): string => {
    if (!courseClass.attributes.content) return "";

    const content = courseClass.attributes.content;
    let duration = 0;

    switch (sectionType) {
      case "video":
        duration = content.video?.duration || 0;
        break;
      case "keyConcepts":
        duration = content.keyConcepts?.duration || 0;
        break;
      case "writingPrompts":
        duration = content.writingPrompts?.duration || 0;
        break;
      case "additionalMaterials":
        duration = content.additionalMaterials?.duration || 0;
        break;
    }

    // Format the duration
    if (duration >= 60) {
      const hours = Math.floor(duration / 60);
      const minutes = duration % 60;
      return `${hours}:${minutes.toString().padStart(2, "0")} hours`;
    } else {
      return `${duration} min`;
    }
  };

  // Calculate course completion percentage
  const getCourseCompletionPercentage = (): number => {
    // If no progress data or not authenticated, return 0
    if (!isAuthenticated || Object.keys(progress).length === 0) {
      return 0;
    }

    // Calculate using the actual progress values from each component
    let totalProgressSum = 0;
    let totalComponents = 0;

    // Loop through all progress entries except introduction
    Object.entries(progress).forEach(([key, value]) => {
      if (key !== "introduction") {
        totalComponents++;
        totalProgressSum += value.progress; // Use the actual percentage (0-100)
      }
    });

    // Calculate average progress across all components
    const averageProgress =
      totalComponents > 0 ? totalProgressSum / totalComponents : 0;

    // Return rounded percentage
    return Math.round(averageProgress);
  };

  // Handle component clicks
  const handleComponentClick = (classIndex: number, componentIndex: number) => {
    // Get progress for this component
    const componentProgress = getComponentProgress(classIndex, componentIndex);

    // If component is started but not completed, continue
    if (componentProgress.started && !componentProgress.completed) {
      router.push(
        `/dashboard/user/courses/${slug}/class/${classIndex}/component/${componentIndex}`
      );
    }
    // If component is not started, mark as started and navigate
    else if (!componentProgress.started) {
      router.push(
        `/dashboard/user/courses/${slug}/class/${classIndex}/component/${componentIndex}`
      );
    }
    // If completed, just navigate
    else {
      router.push(
        `/dashboard/user/courses/${slug}/class/${classIndex}/component/${componentIndex}`
      );
    }
  };

  const handleIntroductionClick = () => {
    router.push(`/dashboard/user/courses/${slug}/introduction`);
  };

  const handleAddendumClick = () => {
    // Only navigate if course is completed
    if (isCourseCompleted) {
      router.push(`/dashboard/user/courses/${slug}/addendum`);
    }
  };

  // Helper function to render progress indicator for a component
  const renderProgressIndicator = (componentProgress: {
    started: boolean;
    completed: boolean;
    progress: number;
  }) => {
    if (componentProgress.completed) {
      // Completed (checkmark)
      return (
        <div className="flex items-center">
          <CheckIcon className="h-5 w-5 text-purple-600" />
        </div>
      );
    } else if (componentProgress.started) {
      // In progress (circle with progress)
      return (
        <div className="relative h-5 w-5 flex items-center justify-center">
          <div className="absolute inset-0 rounded-full border-2 border-gray-300"></div>
          <div
            className="absolute inset-0 rounded-full border-2 border-purple-600"
            style={{
              clipPath: `inset(0 0 0 ${100 - componentProgress.progress}%)`,
            }}
          ></div>
        </div>
      );
    } else {
      // Not started (empty circle)
      return (
        <div className="h-5 w-5 rounded-full border-2 border-gray-300"></div>
      );
    }
  };

  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Back button */}
      <div className="container mx-auto px-4 py-4">
        <Link
          href="/dashboard/user/courses"
          className="text-gray-600 hover:text-gray-900 flex items-center"
        >
          <ArrowLeftIcon className="h-4 w-4 mr-1" />
          Back
        </Link>
      </div>

      {/* Course header with featured image as background */}
      <div
        className="bg-gray-800 text-white relative"
        style={{
          backgroundImage: course?.attributes.featuredImage?.data
            ? `url(${getImageUrl(
                course.attributes.featuredImage.data.attributes.url
              )})`
            : "none",
          backgroundSize: "cover",
          backgroundPosition: "center",
        }}
      >
        {/* Dark overlay to ensure text readability */}
        <div className="absolute inset-0 bg-black bg-opacity-60"></div>

        <div className="container mx-auto px-4 py-16 relative z-10 text-center">
          <div className="mb-2 text-sm font-medium">Course</div>
          <h1 className="text-4xl font-bold mb-4">
            {course?.attributes.title}
          </h1>
          {course?.attributes.subtitle && (
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              {course.attributes.subtitle}
            </p>
          )}
        </div>
      </div>

      {/* Course content - No longer inside a tab */}
      <div className="container mx-auto px-4 py-6">
        <h2 className="text-xl font-bold mb-2">Course content</h2>
        <div className="flex justify-between items-center mb-6">
          <div className="text-sm text-gray-600">
            {classes.length} {classes.length === 1 ? "class" : "classes"}
          </div>
          <div className="text-sm text-gray-600">{getTotalDuration()}</div>
        </div>

        {/* Welcome section */}
        <div className="space-y-4">
          <div className="border border-gray-200 rounded-md overflow-hidden bg-white">
            <button
              onClick={() => toggleSection("welcome")}
              className="w-full text-left px-4 py-3 flex justify-between items-center hover:bg-gray-50"
            >
              <span className="font-medium">Welcome!</span>
              <div className="flex items-center">
                {expandedSections.includes("welcome") ? (
                  <ChevronDownIcon className="h-5 w-5 text-gray-400 ml-2" />
                ) : (
                  <ChevronRightIcon className="h-5 w-5 text-gray-400 ml-2" />
                )}
              </div>
            </button>

            {expandedSections.includes("welcome") && (
              <div className="border-t border-gray-200 divide-y divide-gray-200">
                <div
                  className="px-4 py-3 flex justify-between items-center hover:bg-gray-50 cursor-pointer"
                  onClick={handleIntroductionClick}
                >
                  <div className="flex items-center">
                    <div className="w-8 flex justify-center">
                      {renderProgressIndicator(
                        progress["introduction"] || {
                          started: false,
                          completed: false,
                          progress: 0,
                        }
                      )}
                    </div>
                    <div>
                      <span className="text-sm font-medium">Introduction</span>
                    </div>
                  </div>

                  {progress["introduction"]?.completed ? (
                    <div className="flex items-center w-1/3">
                      <div className="w-full bg-purple-100 h-1 rounded-full">
                        <div
                          className="bg-purple-600 h-1 rounded-full"
                          style={{ width: "100%" }}
                        ></div>
                      </div>
                      <span className="ml-2 text-sm">100% completed</span>
                    </div>
                  ) : progress["introduction"]?.started ? (
                    <button className="px-3 py-1 text-sm font-medium bg-black text-white rounded-md hover:bg-gray-800">
                      Continue
                    </button>
                  ) : (
                    <button className="px-3 py-1 text-sm font-medium bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
                      Start
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Class sections */}
          {classes.map((classItem) => {
            const classId = `class-${classItem.id}`;
            const isExpanded = expandedSections.includes(classId);
            const classIndex = classItem.attributes.orderIndex;

            return (
              <div
                key={classItem.id}
                className="border border-gray-200 rounded-md overflow-hidden bg-white"
              >
                {/* Class header (always visible) */}
                <button
                  onClick={() => toggleSection(classId)}
                  className="w-full text-left px-4 py-3 flex justify-between items-center hover:bg-gray-50"
                >
                  <span className="font-medium">
                    Class {classIndex} - {classItem.attributes.title}
                  </span>
                  <div className="flex items-center">
                    {isExpanded ? (
                      <ChevronDownIcon className="h-5 w-5 text-gray-400 ml-2" />
                    ) : (
                      <ChevronRightIcon className="h-5 w-5 text-gray-400 ml-2" />
                    )}
                  </div>
                </button>

                {/* Class content (visible when expanded) */}
                {isExpanded && (
                  <div className="border-t border-gray-200 divide-y divide-gray-200">
                    {/* Video section */}
                    {sectionExists(classItem, "video") && (
                      <div
                        className="px-4 py-3 flex justify-between items-center hover:bg-gray-50 cursor-pointer"
                        onClick={() => handleComponentClick(classIndex, 1)}
                      >
                        <div className="flex items-center">
                          <div className="w-8 flex justify-center">
                            {renderProgressIndicator(
                              getComponentProgress(classIndex, 1)
                            )}
                          </div>
                          <div className="flex items-center">
                            <span className="text-sm font-medium">
                              {classIndex}.1 Video: {classItem.attributes.title}
                            </span>
                            <span className="text-xs text-gray-500 ml-2">
                              {getSectionDuration(classItem, "video")}
                            </span>
                          </div>
                        </div>

                        {getComponentProgress(classIndex, 1).completed ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-purple-100 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{ width: "100%" }}
                              ></div>
                            </div>
                            <span className="text-sm whitespace-nowrap">
                              100% completed
                            </span>
                          </div>
                        ) : getComponentProgress(classIndex, 1).started ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-gray-200 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{
                                  width: `${
                                    getComponentProgress(classIndex, 1).progress
                                  }%`,
                                }}
                              ></div>
                            </div>
                            <button className="px-3 py-1 text-sm font-medium bg-black text-white rounded-md hover:bg-gray-800 whitespace-nowrap">
                              Continue
                            </button>
                          </div>
                        ) : (
                          <button className="px-3 py-1 text-sm font-medium bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
                            Start
                          </button>
                        )}
                      </div>
                    )}

                    {/* Key Concepts section */}
                    {sectionExists(classItem, "keyConcepts") && (
                      <div
                        className="px-4 py-3 flex justify-between items-center hover:bg-gray-50 cursor-pointer"
                        onClick={() => handleComponentClick(classIndex, 2)}
                      >
                        <div className="flex items-center">
                          <div className="w-8 flex justify-center">
                            {renderProgressIndicator(
                              getComponentProgress(classIndex, 2)
                            )}
                          </div>
                          <div className="flex items-center">
                            <span className="text-sm font-medium">
                              {classIndex}.2 Key Concepts
                            </span>
                            <span className="text-xs text-gray-500 ml-2">
                              {getSectionDuration(classItem, "keyConcepts")}
                            </span>
                          </div>
                        </div>

                        {getComponentProgress(classIndex, 2).completed ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-purple-100 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{ width: "100%" }}
                              ></div>
                            </div>
                            <span className="text-sm whitespace-nowrap">
                              100% completed
                            </span>
                          </div>
                        ) : getComponentProgress(classIndex, 2).started ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-gray-200 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{
                                  width: `${
                                    getComponentProgress(classIndex, 2).progress
                                  }%`,
                                }}
                              ></div>
                            </div>
                            <button className="px-3 py-1 text-sm font-medium bg-black text-white rounded-md hover:bg-gray-800 whitespace-nowrap">
                              Continue
                            </button>
                          </div>
                        ) : (
                          <button className="px-3 py-1 text-sm font-medium bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
                            Start
                          </button>
                        )}
                      </div>
                    )}

                    {/* Writing Prompts section */}
                    {sectionExists(classItem, "writingPrompts") && (
                      <div
                        className="px-4 py-3 flex justify-between items-center hover:bg-gray-50 cursor-pointer"
                        onClick={() => handleComponentClick(classIndex, 3)}
                      >
                        <div className="flex items-center">
                          <div className="w-8 flex justify-center">
                            {renderProgressIndicator(
                              getComponentProgress(classIndex, 3)
                            )}
                          </div>
                          <div className="flex items-center">
                            <span className="text-sm font-medium">
                              {classIndex}.3 Writing Prompts & Further
                              Reflection
                            </span>
                            <span className="text-xs text-gray-500 ml-2">
                              {getSectionDuration(classItem, "writingPrompts")}
                            </span>
                          </div>
                        </div>

                        {getComponentProgress(classIndex, 3).completed ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-purple-100 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{ width: "100%" }}
                              ></div>
                            </div>
                            <span className="text-sm whitespace-nowrap">
                              100% completed
                            </span>
                          </div>
                        ) : getComponentProgress(classIndex, 3).started ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-gray-200 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{
                                  width: `${
                                    getComponentProgress(classIndex, 3).progress
                                  }%`,
                                }}
                              ></div>
                            </div>
                            <button className="px-3 py-1 text-sm font-medium bg-black text-white rounded-md hover:bg-gray-800 whitespace-nowrap">
                              Continue
                            </button>
                          </div>
                        ) : (
                          <button className="px-3 py-1 text-sm font-medium bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
                            Start
                          </button>
                        )}
                      </div>
                    )}

                    {/* Additional Materials section - only show if it exists */}
                    {sectionExists(classItem, "additionalMaterials") && (
                      <div
                        className="px-4 py-3 flex justify-between items-center hover:bg-gray-50 cursor-pointer"
                        onClick={() => handleComponentClick(classIndex, 4)}
                      >
                        <div className="flex items-center">
                          <div className="w-8 flex justify-center">
                            {renderProgressIndicator(
                              getComponentProgress(classIndex, 4)
                            )}
                          </div>
                          <div className="flex items-center">
                            <span className="text-sm font-medium">
                              {classIndex}.4 Additional Materials
                            </span>
                            <span className="text-xs text-gray-500 ml-2">
                              {getSectionDuration(
                                classItem,
                                "additionalMaterials"
                              )}
                            </span>
                          </div>
                        </div>

                        {getComponentProgress(classIndex, 4).completed ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-purple-100 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{ width: "100%" }}
                              ></div>
                            </div>
                            <span className="text-sm whitespace-nowrap">
                              100% completed
                            </span>
                          </div>
                        ) : getComponentProgress(classIndex, 4).started ? (
                          <div className="flex items-center">
                            <div className="w-24 bg-gray-200 h-1 rounded-full mr-2">
                              <div
                                className="bg-purple-600 h-1 rounded-full"
                                style={{
                                  width: `${
                                    getComponentProgress(classIndex, 4).progress
                                  }%`,
                                }}
                              ></div>
                            </div>
                            <button className="px-3 py-1 text-sm font-medium bg-black text-white rounded-md hover:bg-gray-800 whitespace-nowrap">
                              Continue
                            </button>
                          </div>
                        ) : (
                          <button className="px-3 py-1 text-sm font-medium bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">
                            Start
                          </button>
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            );
          })}

          {/* Course completion section (shown in-place without redirection) */}
          <div className="border border-gray-200 rounded-md overflow-hidden bg-white">
            <button
              onClick={() => toggleSection("course-completed")}
              className="w-full text-left px-4 py-3 flex justify-between items-center hover:bg-gray-50"
            >
              <span className="font-medium">
                {getCourseCompletionPercentage() === 100
                  ? "Course completed"
                  : "Course completion"}
              </span>
              <div className="flex items-center">
                <div className="text-sm text-gray-500 mr-2">
                  {getCourseCompletionPercentage()}% completed
                </div>
                {expandedSections.includes("course-completed") ? (
                  <ChevronDownIcon className="h-5 w-5 text-gray-400" />
                ) : (
                  <ChevronRightIcon className="h-5 w-5 text-gray-400" />
                )}
              </div>
            </button>

            {expandedSections.includes("course-completed") && (
              <div className="border-t border-gray-200 p-6">
                <div className="text-center">
                  <div className="inline-flex items-center justify-center h-16 w-16 rounded-full bg-green-100 text-green-600 mb-4">
                    <CheckCircleIcon className="h-8 w-8" />
                  </div>
                  <h3 className="text-xl font-bold mb-3">
                    You've completed {getCourseCompletionPercentage()}% of this
                    course
                  </h3>
                  <p className="text-gray-600 mb-6">
                    {getCourseCompletionPercentage() === 100
                      ? "Congratulations on completing this course!"
                      : "Keep going to complete all course materials."}
                  </p>

                  {/* Progress bar */}
                  <div className="w-full h-2 bg-gray-200 rounded-full mb-6">
                    <div
                      className="h-2 bg-green-500 rounded-full transition-all duration-300"
                      style={{ width: `${getCourseCompletionPercentage()}%` }}
                    ></div>
                  </div>

                  {/* Certificate button (if course is 100% completed) */}
                  {getCourseCompletionPercentage() === 100 && (
                    <button className="px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700">
                      View Certificate
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Course addendum section (if exists) */}
          {course?.attributes.addendum && (
            <div
              className={`border border-gray-200 rounded-md overflow-hidden bg-white ${
                !isCourseCompleted ? "opacity-70" : ""
              }`}
            >
              <button
                onClick={() => toggleSection("course-addendum")}
                className={`w-full text-left px-4 py-3 flex justify-between items-center ${
                  isCourseCompleted ? "hover:bg-gray-50" : "cursor-not-allowed"
                }`}
              >
                <span className="font-medium">Course addendum</span>
                <div className="flex items-center">
                  {!isCourseCompleted ? (
                    <div className="text-sm text-gray-500 mr-2">
                      Unlocks when course is completed
                    </div>
                  ) : null}
                  {isCourseCompleted ? (
                    expandedSections.includes("course-addendum") ? (
                      <ChevronDownIcon className="h-5 w-5 text-gray-400" />
                    ) : (
                      <ChevronRightIcon className="h-5 w-5 text-gray-400" />
                    )
                  ) : (
                    <LockClosedIcon className="h-5 w-5 text-gray-400" />
                  )}
                </div>
              </button>

              {expandedSections.includes("course-addendum") &&
                isCourseCompleted && (
                  <div
                    className="border-t border-gray-200 p-6 cursor-pointer"
                    onClick={handleAddendumClick}
                  >
                    <p className="text-gray-700">
                      Click to view additional resources and insights to deepen
                      your understanding.
                    </p>
                  </div>
                )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Helper function to get image URL
const getImageUrl = (url?: string) => {
  if (!url) return "";

  // Check if it's an absolute URL
  if (url.startsWith("http://") || url.startsWith("https://")) {
    return url;
  }

  // Otherwise, it's a relative URL, so prepend the base URL
  const baseUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
  return `${baseUrl}${url}`;
};

export default CourseOverview;

// === ./src/components/dashboard/course/user/CourseTestimonialsComponent.tsx ===
"use client";

import { useState, useEffect, useRef } from "react";
import { courseCommentApi } from "@/lib/courseCommentApi";
import { ChevronLeftIcon, ChevronRightIcon } from "@heroicons/react/24/outline";

interface CourseTestimonialsProps {
  courseId: string;
  maxDisplay?: number; // Optional: limit how many testimonials to show
}

interface Testimonial {
  id: number;
  attributes: {
    comment: string;
    createdAt: string;
    user: {
      data: {
        id: number;
        attributes: {
          username: string;
          email?: string;
          firstName?: string;
          lastName?: string;
        };
      };
    };
  };
}

const CourseTestimonialsComponent = ({
  courseId,
  maxDisplay = 3,
}: CourseTestimonialsProps) => {
  const [testimonials, setTestimonials] = useState<Testimonial[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState(0);
  const testimonialRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    fetchTestimonials();
  }, [courseId]);

  const fetchTestimonials = async () => {
    try {
      setIsLoading(true);
      const response = await courseCommentApi.getComments(
        courseId,
        "testimonial" // This will fetch comments where sectionType is 'testimonial' and classIndex is null
      );

      setTestimonials(response.data || []);
    } catch (error) {
      console.error("Error fetching testimonials:", error);
      setError("Failed to load testimonials");
    } finally {
      setIsLoading(false);
    }
  };

  // Get the display name for a user
  const getUserDisplayName = (user: any): string => {
    if (user?.attributes) {
      // Try to use firstName and lastName if available
      if (user.attributes.firstName && user.attributes.lastName) {
        return `${user.attributes.firstName} ${user.attributes.lastName}`;
      }

      // Fall back to username
      if (user.attributes.username) {
        return user.attributes.username;
      }

      // Last resort, use email (but hide part of it for privacy)
      if (user.attributes.email) {
        const emailParts = user.attributes.email.split("@");
        return `${emailParts[0]}@...`;
      }
    }

    // If all else fails
    return "Student";
  };

  // Get user location/position - for now we'll just use a placeholder
  const getUserLocation = (user: any): string => {
    // In a real system, this would pull from user profile data
    return "Course Student";
  };

  // Handle testimonial navigation
  const handleNext = () => {
    if (testimonials.length <= maxDisplay) return;

    setCurrentPage((prev) => {
      const totalPages = Math.ceil(testimonials.length / maxDisplay);
      return (prev + 1) % totalPages;
    });
  };

  const handlePrevious = () => {
    if (testimonials.length <= maxDisplay) return;

    setCurrentPage((prev) => {
      const totalPages = Math.ceil(testimonials.length / maxDisplay);
      return (prev - 1 + totalPages) % totalPages;
    });
  };

  // Function to truncate long testimonials
  const truncateText = (text: string, maxLength = 250) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + "...";
  };

  // Get current page of testimonials
  const getCurrentTestimonials = () => {
    const start = currentPage * maxDisplay;
    const end = start + maxDisplay;
    return testimonials.slice(start, end);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error) {
    return <div className="p-4 bg-red-50 text-red-700 rounded-md">{error}</div>;
  }

  if (testimonials.length === 0) {
    return (
      <div className="text-center text-gray-500 py-8">No testimonials yet.</div>
    );
  }

  const totalPages = Math.ceil(testimonials.length / maxDisplay);

  return (
    <div className="relative" ref={testimonialRef}>
      {/* Testimonial container with navigation arrows */}
      <div className="relative">
        {/* Navigation arrows - only show if we have more than maxDisplay testimonials */}
        {testimonials.length > maxDisplay && (
          <>
            <button
              onClick={handlePrevious}
              className="absolute -left-4 top-1/2 transform -translate-y-1/2 z-10 bg-white rounded-full p-2 shadow-md hover:bg-gray-100"
              aria-label="Previous testimonials"
            >
              <ChevronLeftIcon className="h-5 w-5 text-gray-600" />
            </button>

            <button
              onClick={handleNext}
              className="absolute -right-4 top-1/2 transform -translate-y-1/2 z-10 bg-white rounded-full p-2 shadow-md hover:bg-gray-100"
              aria-label="Next testimonials"
            >
              <ChevronRightIcon className="h-5 w-5 text-gray-600" />
            </button>
          </>
        )}

        {/* Testimonial cards - show current page */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {getCurrentTestimonials().map((testimonial) => (
            <div
              key={testimonial.id}
              className="bg-white rounded-lg shadow-md p-6"
            >
              <p className="text-gray-700 italic mb-6 min-h-[120px]">
                "{truncateText(testimonial.attributes.comment)}"
              </p>
              <div className="flex items-center">
                <div className="flex-shrink-0 mr-3">
                  <div className="h-12 w-12 bg-gray-200 rounded-full flex items-center justify-center text-gray-500 text-lg font-medium">
                    {getUserDisplayName(
                      testimonial.attributes.user.data
                    ).charAt(0)}
                  </div>
                </div>
                <div>
                  <p className="font-medium text-gray-900">
                    {getUserDisplayName(testimonial.attributes.user.data)}
                  </p>
                  <p className="text-sm text-gray-600">
                    {getUserLocation(testimonial.attributes.user.data)}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Pagination dots - only show if we have more than maxDisplay testimonials */}
      {totalPages > 1 && (
        <div className="flex justify-center mt-8 space-x-2">
          {Array.from({ length: totalPages }).map((_, index) => (
            <button
              key={index}
              onClick={() => setCurrentPage(index)}
              className={`h-2 w-2 rounded-full ${
                index === currentPage ? "bg-black" : "bg-gray-300"
              }`}
              aria-label={`Go to testimonial page ${index + 1}`}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default CourseTestimonialsComponent;

// === ./src/components/dashboard/course/user/CoursesClient.tsx ===
// Updated CoursesClient.tsx with modified price filters
"use client";

import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { courseApi } from "@/lib/courseApi";
import {
  ArrowPathIcon,
  MagnifyingGlassIcon,
  FunnelIcon,
  XMarkIcon,
  CalendarIcon,
  UserGroupIcon,
  CurrencyDollarIcon,
} from "@heroicons/react/24/outline";

// Define types for our component props
interface CoursesClientProps {
  isAuthenticated: boolean;
  userJwt: string | null;
}

// Define types based on your Strapi structure
interface Instructor {
  id: number;
  attributes: {
    name: string;
  };
}

interface Course {
  id: number;
  attributes: {
    title: string;
    slug: string;
    description: string;
    price: number;
    isFree: boolean;
    startDate?: string;
    endDate?: string;
    featuredImage?: {
      data?: {
        attributes: {
          url: string;
          formats?: {
            thumbnail?: {
              url: string;
            };
          };
        };
      };
    };
    instructors?: {
      data: Instructor[];
    };
  };
}

// Updated Filter options interface with maxPrice instead of priceFilter
interface FilterOptions {
  dateRange: {
    start: string;
    end: string;
  };
  instructors: number[];
  isFreeOnly: boolean;
  maxPrice: number | null;
}

const CoursesClient = ({ isAuthenticated, userJwt }: CoursesClientProps) => {
  const [activeTab, setActiveTab] = useState<"my-courses" | "available">(
    "my-courses"
  );
  const [myCourses, setMyCourses] = useState<Course[]>([]);
  const [availableCourses, setAvailableCourses] = useState<Course[]>([]);
  const [filteredCourses, setFilteredCourses] = useState<Course[]>([]);
  const [instructorsList, setInstructorsList] = useState<Instructor[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [showFilters, setShowFilters] = useState<boolean>(false);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const searchInputRef = useRef<HTMLInputElement>(null);
  const router = useRouter();

  // Modified filter states with isFreeOnly and maxPrice
  const [filterOptions, setFilterOptions] = useState<FilterOptions>({
    dateRange: {
      start: "",
      end: "",
    },
    instructors: [],
    isFreeOnly: false,
    maxPrice: null,
  });

  // After component mounts, check localStorage
  useEffect(() => {
    // Check if we're in a browser environment
    if (typeof window !== "undefined") {
      // Get saved tab from localStorage
      const savedTab = localStorage.getItem("coursesActiveTab");
      if (savedTab === "available" || savedTab === "my-courses") {
        setActiveTab(savedTab);
      }
    }
  }, []);

  // Set up keyboard shortcut for search (Cmd+K or Ctrl+K)
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if ((e.metaKey || e.ctrlKey) && e.key === "k") {
        e.preventDefault();
        if (searchInputRef.current) {
          searchInputRef.current.focus();
        }
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  // Create a function to handle tab changes
  const handleTabChange = (tab: "my-courses" | "available") => {
    setActiveTab(tab);
    setSearchQuery(""); // Reset search when changing tabs
    resetFilters(); // Reset filters when changing tabs
    // Save to localStorage
    localStorage.setItem("coursesActiveTab", tab);
  };

  // Store JWT in localStorage when it changes
  useEffect(() => {
    if (userJwt) {
      localStorage.setItem("jwt", userJwt);
    } else {
      localStorage.removeItem("jwt");
    }
  }, [userJwt]);

  // Fetch all instructors for filter dropdown
  const fetchInstructors = async () => {
    try {
      const response = await courseApi.getInstructors();
      if (response && response.data) {
        setInstructorsList(response.data);
      }
    } catch (err) {
      console.error("Error fetching instructors:", err);
    }
  };

  // Fetch user's courses
  const fetchUserCourses = async () => {
    if (!isAuthenticated || !userJwt) {
      setIsLoading(false);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Ensure JWT is set before making the API call
      localStorage.setItem("jwt", userJwt);

      // Use the updated getUserCourses function from courseApi
      const response = await courseApi.getUserCourses();

      if (response && response.data) {
        setMyCourses(response.data);
        if (activeTab === "my-courses") {
          setFilteredCourses(response.data);
        }
      } else {
        console.log("No courses found or invalid response format");
        setMyCourses([]);
        if (activeTab === "my-courses") {
          setFilteredCourses([]);
        }
      }
    } catch (err) {
      console.error("Error fetching user courses:", err);
      setError("Failed to load your courses. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch available courses - works for both authenticated and unauthenticated users
  const fetchAvailableCourses = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Use the updated getAvailableCourses function from courseApi
      const response = await courseApi.getAvailableCourses();

      if (response && response.data) {
        setAvailableCourses(response.data);
        if (activeTab === "available") {
          setFilteredCourses(response.data);
        }
      } else {
        console.log("No available courses found or invalid response format");
        setAvailableCourses([]);
        if (activeTab === "available") {
          setFilteredCourses([]);
        }
      }
    } catch (err) {
      console.error("Error fetching available courses:", err);
      setError("Failed to load available courses. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch data based on active tab and authentication state
  useEffect(() => {
    fetchInstructors(); // Always fetch instructors for filter options

    if (activeTab === "my-courses") {
      fetchUserCourses();
    } else {
      fetchAvailableCourses();
    }
  }, [activeTab, isAuthenticated, userJwt]);

  // Apply filters when they change
  useEffect(() => {
    applyFiltersAndSearch();
  }, [searchQuery, filterOptions, myCourses, availableCourses, activeTab]);

  // Apply filters and search with updated price filtering logic
  const applyFiltersAndSearch = () => {
    // Select the appropriate course list based on active tab
    const courses = activeTab === "my-courses" ? myCourses : availableCourses;

    // First apply search if there is any
    let results = courses;

    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      results = results.filter(
        (course) =>
          course.attributes.title.toLowerCase().includes(query) ||
          course.attributes.description.toLowerCase().includes(query)
      );
    }

    // Then apply filters
    // 1. Date filter
    if (filterOptions.dateRange.start || filterOptions.dateRange.end) {
      results = results.filter((course) => {
        const startDateMatch =
          !filterOptions.dateRange.start ||
          !course.attributes.startDate ||
          new Date(course.attributes.startDate) >=
            new Date(filterOptions.dateRange.start);

        const endDateMatch =
          !filterOptions.dateRange.end ||
          !course.attributes.endDate ||
          new Date(course.attributes.endDate) <=
            new Date(filterOptions.dateRange.end);

        return startDateMatch && endDateMatch;
      });
    }

    // 2. Instructor filter
    if (filterOptions.instructors.length > 0) {
      results = results.filter((course) => {
        if (
          !course.attributes.instructors ||
          !course.attributes.instructors.data
        ) {
          return false;
        }

        // Check if any of the selected instructors are in this course
        return course.attributes.instructors.data.some((instructor) =>
          filterOptions.instructors.includes(instructor.id)
        );
      });
    }

    // 3. Updated Price filters for "Available" tab
    if (activeTab === "available") {
      // Apply free only filter if selected
      if (filterOptions.isFreeOnly) {
        results = results.filter(
          (course) => course.attributes.isFree || course.attributes.price === 0
        );
      }
      // Apply maxPrice filter if set and not using free only
      else if (filterOptions.maxPrice !== null) {
        results = results.filter(
          (course) => course.attributes.price <= filterOptions.maxPrice!
        );
      }
    }

    setFilteredCourses(results);
  };

  // Reset all filters
  const resetFilters = () => {
    setFilterOptions({
      dateRange: {
        start: "",
        end: "",
      },
      instructors: [],
      isFreeOnly: false,
      maxPrice: null,
    });
    setSearchQuery("");
  };

  // Handle instructor selection
  const handleInstructorToggle = (instructorId: number) => {
    setFilterOptions((prev) => {
      const updatedInstructors = prev.instructors.includes(instructorId)
        ? prev.instructors.filter((id) => id !== instructorId) // Remove if already selected
        : [...prev.instructors, instructorId]; // Add if not selected

      return {
        ...prev,
        instructors: updatedInstructors,
      };
    });
  };

  // Handle price input change
  const handleMaxPriceChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;

    // If value is empty, set maxPrice to null
    if (!value) {
      setFilterOptions((prev) => ({
        ...prev,
        maxPrice: null,
      }));
      return;
    }

    // Otherwise, parse as number
    const price = parseFloat(value);
    if (!isNaN(price) && price >= 0) {
      setFilterOptions((prev) => ({
        ...prev,
        maxPrice: price,
        // Turn off freeOnly when setting a specific price
        isFreeOnly: false,
      }));
    }
  };

  // Handle free only toggle
  const handleFreeOnlyToggle = (checked: boolean) => {
    setFilterOptions((prev) => ({
      ...prev,
      isFreeOnly: checked,
      // Reset maxPrice when toggling freeOnly on
      maxPrice: checked ? null : prev.maxPrice,
    }));
  };

  // Format instructor names for display
  const formatInstructors = (course: Course) => {
    if (
      !course.attributes.instructors?.data ||
      course.attributes.instructors.data.length === 0
    ) {
      return "";
    }
    return course.attributes.instructors.data
      .map((instructor) => instructor.attributes.name)
      .join(", ");
  };

  // Get course image URL with proper handling for different data structures
  const getCourseImageUrl = (course: Course) => {
    // First check if featuredImage exists and has data with url
    if (course.attributes.featuredImage?.data?.attributes?.url) {
      const url = course.attributes.featuredImage.data.attributes.url;

      // Check if it's already a full URL
      if (url.startsWith("http")) {
        return url;
      }

      // Otherwise, prepend the API URL
      const baseUrl = process.env.NEXT_PUBLIC_STRAPI_URL || "";
      return `${baseUrl}${url}`;
    }

    // Fallback: Try to find large format URL directly (seen in the logs)
    if (
      course.attributes.featuredImage?.data?.attributes?.formats?.large?.url
    ) {
      return course.attributes.featuredImage.data.attributes.formats.large.url;
    }

    // Fallback: Try to find small format URL directly
    if (
      course.attributes.featuredImage?.data?.attributes?.formats?.small?.url
    ) {
      return course.attributes.featuredImage.data.attributes.formats.small.url;
    }

    return "/placeholder-course.jpg"; // Return placeholder if no image found
  };

  // Handle enrollment/purchase button click
  const handleEnroll = (course: Course) => {
    if (!isAuthenticated) {
      // Redirect to login page with a return URL
      window.location.href = `/login?callbackUrl=${encodeURIComponent(
        `/dashboard/user/courses/${course.attributes.slug}`
      )}&action=view&courseId=${course.id}`;
      return;
    }

    // Redirect to the course detail page
    window.location.href = `/dashboard/user/courses/${course.attributes.slug}`;
  };

  // Handle opening an enrolled course - redirect to the overview page
  const handleOpenCourse = (slug: string) => {
    router.push(`/dashboard/user/courses/${slug}/overview`);
  };

  // Format date for display
  const formatDate = (dateString?: string) => {
    if (!dateString) return "";
    return new Date(dateString).toLocaleDateString();
  };

  // Count active filters
  const countActiveFilters = () => {
    let count = 0;

    // Count date filters
    if (filterOptions.dateRange.start) count++;
    if (filterOptions.dateRange.end) count++;

    // Count instructor filters
    count += filterOptions.instructors.length;

    // Count price filters
    if (filterOptions.isFreeOnly) count++;
    if (filterOptions.maxPrice !== null) count++;

    return count;
  };

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Header row with title and search/filter */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-4 md:mb-0">
          Courses
        </h1>

        {/* Search bar */}
        <div className="relative w-full md:w-64">
          <input
            ref={searchInputRef}
            type="text"
            placeholder="Search (⌘K)"
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 bg-white"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" />
          {searchQuery && (
            <button
              onClick={() => setSearchQuery("")}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
            >
              <XMarkIcon className="h-5 w-5" />
            </button>
          )}
        </div>
      </div>

      {/* Section with tabs and filter button */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
        {/* Tab navigation - moved to left */}
        <div className="mb-4 md:mb-0 border-b border-gray-200 w-full md:w-auto">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => handleTabChange("my-courses")}
              className={`py-2 px-1 border-b-2 font-medium ${
                activeTab === "my-courses"
                  ? "border-purple-500 text-purple-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              My Courses
            </button>

            <button
              onClick={() => handleTabChange("available")}
              className={`py-2 px-1 border-b-2 font-medium ${
                activeTab === "available"
                  ? "border-purple-500 text-purple-600"
                  : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
              }`}
            >
              Available to Purchase
            </button>
          </nav>
        </div>

        {/* Filters button - moved to right */}
        <button
          onClick={() => setShowFilters(!showFilters)}
          className={`flex items-center px-4 py-2 rounded-lg border ${
            showFilters || countActiveFilters() > 0
              ? "bg-purple-100 border-purple-300 text-purple-800"
              : "border-gray-300 text-gray-700 hover:bg-gray-50"
          }`}
        >
          <FunnelIcon className="h-5 w-5 mr-2" />
          Filters
          {countActiveFilters() > 0 && (
            <span className="ml-2 inline-flex items-center justify-center w-5 h-5 text-xs font-medium bg-purple-600 text-white rounded-full">
              {countActiveFilters()}
            </span>
          )}
        </button>
      </div>

      {/* Course count */}
      <div className="flex justify-between items-center mb-4">
        <div className="text-sm text-gray-500">
          {filteredCourses.length}{" "}
          {filteredCourses.length === 1 ? "item" : "items"}
        </div>
      </div>

      {/* Filters panel */}
      {showFilters && (
        <div className="mb-6 p-4 bg-white border border-gray-200 rounded-lg shadow-sm">
          <div className="flex justify-between items-center mb-4">
            <h3 className="font-medium text-gray-700">Filter Courses</h3>
            <button
              onClick={resetFilters}
              className="text-sm text-purple-600 hover:text-purple-800"
            >
              Reset all
            </button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Date filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                <CalendarIcon className="h-4 w-4 mr-1" />
                Date Range
              </label>
              <div className="flex space-x-2">
                <div>
                  <label className="block text-xs text-gray-500 mb-1">
                    Start
                  </label>
                  <input
                    type="date"
                    value={filterOptions.dateRange.start}
                    onChange={(e) =>
                      setFilterOptions({
                        ...filterOptions,
                        dateRange: {
                          ...filterOptions.dateRange,
                          start: e.target.value,
                        },
                      })
                    }
                    className="w-full px-2 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500"
                  />
                </div>
                <div>
                  <label className="block text-xs text-gray-500 mb-1">
                    End
                  </label>
                  <input
                    type="date"
                    value={filterOptions.dateRange.end}
                    onChange={(e) =>
                      setFilterOptions({
                        ...filterOptions,
                        dateRange: {
                          ...filterOptions.dateRange,
                          end: e.target.value,
                        },
                      })
                    }
                    className="w-full px-2 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500"
                  />
                </div>
              </div>
            </div>

            {/* Instructors filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                <UserGroupIcon className="h-4 w-4 mr-1" />
                Instructors
              </label>
              <div className="relative">
                <div className="max-h-32 overflow-y-auto border border-gray-300 rounded-md p-2">
                  {instructorsList.length > 0 ? (
                    instructorsList.map((instructor) => (
                      <div
                        key={instructor.id}
                        className="flex items-center py-1"
                      >
                        <input
                          type="checkbox"
                          id={`instructor-${instructor.id}`}
                          checked={filterOptions.instructors.includes(
                            instructor.id
                          )}
                          onChange={() => handleInstructorToggle(instructor.id)}
                          className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                        />
                        <label
                          htmlFor={`instructor-${instructor.id}`}
                          className="ml-2 text-sm text-gray-700"
                        >
                          {instructor.attributes.name}
                        </label>
                      </div>
                    ))
                  ) : (
                    <p className="text-sm text-gray-500 py-1">
                      Loading instructors...
                    </p>
                  )}
                </div>
              </div>
            </div>

            {/* Updated Price filter - only show for Available tab */}
            {activeTab === "available" && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
                  <CurrencyDollarIcon className="h-4 w-4 mr-1" />
                  Price
                </label>
                <div className="space-y-3">
                  {/* Free only checkbox */}
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={filterOptions.isFreeOnly}
                      onChange={(e) => handleFreeOnlyToggle(e.target.checked)}
                      className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">
                      Free only
                    </span>
                  </label>

                  {/* Price under input */}
                  <div>
                    <label className="block text-xs text-gray-500 mb-1">
                      Price under
                    </label>
                    <div className="relative">
                      <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500">
                        $
                      </span>
                      <input
                        type="number"
                        min="0"
                        step="0.01"
                        placeholder="Enter amount"
                        value={
                          filterOptions.maxPrice !== null
                            ? filterOptions.maxPrice
                            : ""
                        }
                        onChange={handleMaxPriceChange}
                        disabled={filterOptions.isFreeOnly}
                        className={`w-full pl-7 pr-3 py-1 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500 ${
                          filterOptions.isFreeOnly ? "bg-gray-100" : "bg-white"
                        }`}
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Authentication warning */}
      {!isAuthenticated && activeTab === "my-courses" && (
        <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
          <p className="text-yellow-700">
            Please{" "}
            <Link
              href={`/login?callbackUrl=${encodeURIComponent(
                "dashboard/user/courses"
              )}`}
              className="font-medium underline"
            >
              log in
            </Link>{" "}
            to view your enrolled courses.
          </p>
        </div>
      )}

      {/* Error message */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
          {error}
        </div>
      )}

      {/* Loading state */}
      {isLoading ? (
        <div className="flex justify-center items-center h-64">
          <ArrowPathIcon className="h-8 w-8 text-purple-600 animate-spin" />
        </div>
      ) : (
        <>
          {/* My Courses tab content */}
          {activeTab === "my-courses" && (
            <>
              {/* Empty state for authenticated users with no courses */}
              {isAuthenticated && filteredCourses.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-12">
                  <div className="mb-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-16 w-16 text-gray-400"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={1}
                        d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                      />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    {searchQuery || countActiveFilters() > 0
                      ? "No courses match your search or filters"
                      : "No courses yet"}
                  </h3>
                  <p className="text-gray-500 mb-4 text-center">
                    {searchQuery || countActiveFilters() > 0
                      ? "Try adjusting your search terms or filters"
                      : "You haven't enrolled in any courses yet.\nExplore our available courses to start your learning journey."}
                  </p>
                  {!(searchQuery || countActiveFilters() > 0) && (
                    <button
                      className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700"
                      onClick={() => handleTabChange("available")}
                    >
                      Browse courses
                    </button>
                  )}
                </div>
              ) : (
                // Only show course grid for authenticated users with courses
                isAuthenticated && (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {filteredCourses.map((course) => (
                      <div
                        key={course.id}
                        className="bg-white rounded-lg overflow-hidden shadow hover:shadow-md transition-shadow"
                      >
                        <div className="relative aspect-video bg-gray-200">
                          <img
                            src={getCourseImageUrl(course)}
                            alt={course.attributes.title}
                            className="w-full h-full object-cover"
                          />
                          <button className="absolute top-3 right-3 bg-white p-2 rounded-full shadow-md">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5 text-gray-600"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={1.5}
                                d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"
                              />
                            </svg>
                          </button>
                        </div>
                        <div className="p-4">
                          {formatInstructors(course) && (
                            <p className="text-sm text-gray-500 mb-1">
                              Taught by {formatInstructors(course)}
                            </p>
                          )}
                          <h3 className="text-lg font-medium text-gray-900 mb-2">
                            {course.attributes.title}
                          </h3>
                          <p className="text-sm text-gray-500 mb-4 line-clamp-3">
                            {course.attributes.description}
                          </p>

                          {/* Date badges */}
                          {(course.attributes.startDate ||
                            course.attributes.endDate) && (
                            <div className="flex flex-wrap gap-2 mb-4">
                              {course.attributes.startDate && (
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                  Start:{" "}
                                  {formatDate(course.attributes.startDate)}
                                </span>
                              )}
                              {course.attributes.endDate && (
                                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                  End: {formatDate(course.attributes.endDate)}
                                </span>
                              )}
                            </div>
                          )}

                          <button
                            onClick={() =>
                              handleOpenCourse(course.attributes.slug)
                            }
                            className="block w-full text-center px-4 py-2 bg-black text-white rounded-md hover:bg-gray-800"
                          >
                            Open
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                )
              )}
            </>
          )}

          {/* Available Courses tab content */}
          {activeTab === "available" && (
            <>
              {filteredCourses.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-12">
                  <div className="mb-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-16 w-16 text-gray-400"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={1}
                        d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                      />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    {searchQuery || countActiveFilters() > 0
                      ? "No courses match your search or filters"
                      : "No courses available"}
                  </h3>
                  <p className="text-gray-500 mb-4 text-center">
                    {searchQuery || countActiveFilters() > 0
                      ? "Try adjusting your search terms or filters"
                      : "There are no courses available for purchase at the moment.\nCheck back later or activate alerts to be notified when new courses arrive."}
                  </p>
                  {!(searchQuery || countActiveFilters() > 0) && (
                    <button className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700">
                      Notify me
                    </button>
                  )}
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredCourses.map((course) => (
                    <div
                      key={course.id}
                      className="bg-white rounded-lg overflow-hidden shadow hover:shadow-md transition-shadow"
                    >
                      <div className="relative aspect-video bg-gray-200">
                        <img
                          src={getCourseImageUrl(course)}
                          alt={course.attributes.title}
                          className="w-full h-full object-cover"
                        />
                        {/* Bookmark button */}
                        <button className="absolute top-3 right-3 bg-white p-2 rounded-full shadow-md">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-5 w-5 text-gray-600"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={1.5}
                              d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"
                            />
                          </svg>
                        </button>

                        {/* Price tag - top left */}
                        <div className="absolute top-3 left-3">
                          {course.attributes.isFree ||
                          course.attributes.price === 0 ? (
                            <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-1 rounded-md">
                              Free
                            </span>
                          ) : (
                            <span className="bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-1 rounded-md">
                              ${course.attributes.price}
                            </span>
                          )}
                        </div>
                      </div>

                      <div className="p-4">
                        {formatInstructors(course) && (
                          <p className="text-sm text-gray-500 mb-1">
                            Taught by {formatInstructors(course)}
                          </p>
                        )}
                        <h3 className="text-lg font-medium text-gray-900 mb-2">
                          {course.attributes.title}
                        </h3>
                        <p className="text-sm text-gray-500 mb-4 line-clamp-3">
                          {course.attributes.description}
                        </p>

                        {/* Date badges */}
                        {(course.attributes.startDate ||
                          course.attributes.endDate) && (
                          <div className="flex flex-wrap gap-2 mb-4">
                            {course.attributes.startDate && (
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                Start: {formatDate(course.attributes.startDate)}
                              </span>
                            )}
                            {course.attributes.endDate && (
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                                End: {formatDate(course.attributes.endDate)}
                              </span>
                            )}
                          </div>
                        )}

                        <button
                          onClick={() => handleEnroll(course)}
                          className={`block w-full text-center px-4 py-2 rounded-md ${
                            course.attributes.isFree ||
                            course.attributes.price === 0
                              ? "bg-green-600 hover:bg-green-700 text-white"
                              : "bg-black hover:bg-gray-800 text-white"
                          }`}
                        >
                          {course.attributes.isFree ||
                          course.attributes.price === 0
                            ? "Enroll Now"
                            : "Purchase"}
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </>
          )}
        </>
      )}
    </div>
  );
};

export default CoursesClient;

// === ./src/components/dashboard/course/user/PaymentPage.tsx ===
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import {
  ArrowLeftIcon,
  CreditCardIcon,
  LockClosedIcon,
} from "@heroicons/react/24/outline";
import { courseApi } from "@/lib/courseApi";

interface PaymentPageProps {
  courseId: string;
  courseSlug: string;
}

const PaymentPage = ({ courseId, courseSlug }: PaymentPageProps) => {
  const [course, setCourse] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [cardNumber, setCardNumber] = useState("");
  const [cardName, setCardName] = useState("");
  const [expiryDate, setExpiryDate] = useState("");
  const [cvv, setCvv] = useState("");
  const router = useRouter();

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        setIsLoading(true);
        const response = await courseApi.getCourse(courseId);
        setCourse(response.data);
      } catch (err) {
        console.error("Error fetching course:", err);
        setError("Failed to load course details");
      } finally {
        setIsLoading(false);
      }
    };

    if (courseId) {
      fetchCourse();
    }
  }, [courseId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsProcessing(true);
    setError(null);

    try {
      // Simulate payment processing
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // After "payment", enroll the user in the course
      await courseApi.enrollInCourse(courseId);

      // Redirect to success page or course page
      router.push(`/dashboard/user/courses/${courseSlug}?enrolled=true`);
    } catch (err) {
      console.error("Error processing payment:", err);
      setError("Payment failed. Please try again.");
      setIsProcessing(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  if (error && !course) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-100 p-4 rounded-md">
          <p className="text-red-700">{error}</p>
        </div>
        <div className="mt-4">
          <Link
            href="/dashboard/user/courses"
            className="text-purple-600 hover:underline flex items-center"
          >
            <ArrowLeftIcon className="h-4 w-4 mr-1" />
            Back to courses
          </Link>
        </div>
      </div>
    );
  }

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(price);
  };

  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="container mx-auto px-4 py-4">
        <Link
          href={`/dashboard/user/courses/${courseSlug}`}
          className="text-gray-600 hover:text-gray-900 flex items-center"
        >
          <ArrowLeftIcon className="h-4 w-4 mr-1" />
          Back to course
        </Link>
      </div>

      <div className="container mx-auto px-4 py-8">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-3xl font-bold text-gray-900 mb-8 text-center">
            Complete your purchase
          </h1>

          <div className="bg-white rounded-lg shadow-md overflow-hidden mb-8">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">
                Order Summary
              </h2>

              <div className="flex justify-between items-center mb-2">
                <span className="text-gray-600">
                  {course?.attributes?.title}
                </span>
                <span className="font-medium">
                  {formatPrice(course?.attributes?.price || 0)}
                </span>
              </div>

              <div className="flex justify-between items-center text-sm text-gray-500 mb-4">
                <span>Course access</span>
                <span>Lifetime</span>
              </div>

              <div className="border-t border-gray-200 pt-4 mt-4">
                <div className="flex justify-between items-center text-lg font-semibold">
                  <span>Total</span>
                  <span>{formatPrice(course?.attributes?.price || 0)}</span>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-md overflow-hidden mb-8">
            <div className="p-6">
              <h2 className="text-xl font-semibold text-gray-800 mb-6 flex items-center">
                <CreditCardIcon className="h-5 w-5 mr-2 text-gray-600" />
                Payment Method
              </h2>

              <form onSubmit={handleSubmit}>
                <div className="mb-6">
                  <label
                    htmlFor="cardName"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Name on card
                  </label>
                  <input
                    type="text"
                    id="cardName"
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    placeholder="John Smith"
                    value={cardName}
                    onChange={(e) => setCardName(e.target.value)}
                    required
                  />
                </div>

                <div className="mb-6">
                  <label
                    htmlFor="cardNumber"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Card number
                  </label>
                  <input
                    type="text"
                    id="cardNumber"
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                    placeholder="1234 5678 9012 3456"
                    value={cardNumber}
                    onChange={(e) =>
                      setCardNumber(
                        e.target.value.replace(/\D/g, "").slice(0, 16)
                      )
                    }
                    required
                  />
                </div>

                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div>
                    <label
                      htmlFor="expiryDate"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      Expiry date
                    </label>
                    <input
                      type="text"
                      id="expiryDate"
                      className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                      placeholder="MM/YY"
                      value={expiryDate}
                      onChange={(e) => setExpiryDate(e.target.value)}
                      required
                    />
                  </div>
                  <div>
                    <label
                      htmlFor="cvv"
                      className="block text-sm font-medium text-gray-700 mb-1"
                    >
                      CVV
                    </label>
                    <input
                      type="text"
                      id="cvv"
                      className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
                      placeholder="123"
                      value={cvv}
                      onChange={(e) =>
                        setCvv(e.target.value.replace(/\D/g, "").slice(0, 3))
                      }
                      required
                    />
                  </div>
                </div>

                <div className="flex items-center text-sm text-gray-500 mb-6">
                  <LockClosedIcon className="h-4 w-4 mr-1 text-gray-400" />
                  <span>Your payment information is secure and encrypted</span>
                </div>

                {error && (
                  <div className="mb-6 p-4 bg-red-100 text-red-700 rounded-md">
                    {error}
                  </div>
                )}

                <button
                  type="submit"
                  className="w-full py-3 px-6 bg-black text-white font-medium rounded-md hover:bg-gray-800 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  disabled={isProcessing}
                >
                  {isProcessing ? (
                    <span className="flex items-center justify-center">
                      <span className="animate-spin mr-2 h-4 w-4 border-t-2 border-b-2 border-white rounded-full"></span>
                      Processing...
                    </span>
                  ) : (
                    `Pay ${formatPrice(course?.attributes?.price || 0)}`
                  )}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentPage;

// === ./src/components/dashboard/course/user/SuccessNotificationPage.tsx ===
"use client";

import { useState, useEffect } from "react";
import { CheckCircleIcon, XMarkIcon } from "@heroicons/react/24/outline";

interface SuccessNotificationProps {
  message: string;
  duration?: number;
  onClose?: () => void;
}

const SuccessNotification = ({
  message,
  duration = 5000,
  onClose,
}: SuccessNotificationProps) => {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false);
      if (onClose) onClose();
    }, duration);

    return () => clearTimeout(timer);
  }, [duration, onClose]);

  const handleClose = () => {
    setIsVisible(false);
    if (onClose) onClose();
  };

  if (!isVisible) return null;

  return (
    <div className="fixed bottom-4 right-4 bg-green-50 border border-green-200 rounded-md shadow-md max-w-md z-50">
      <div className="p-4 flex items-start">
        <CheckCircleIcon className="h-6 w-6 text-green-500 mr-3 flex-shrink-0" />
        <div className="flex-grow">
          <p className="text-green-800 font-medium">{message}</p>
        </div>
        <button
          onClick={handleClose}
          className="ml-4 text-green-500 hover:text-green-700"
        >
          <XMarkIcon className="h-5 w-5" />
        </button>
      </div>
    </div>
  );
};

export default SuccessNotification;

// === ./src/components/dashboard/course/user/index.ts ===
// Export all course components from a single file for easier imports

export { default as CourseOverview } from "./CourseOverview";
export { default as ClassComponentLayout } from "./ClassComponentLayout";
export { default as ClassVideoComponent } from "./ClassVideoComponent";
export { default as ClassKeyConceptsComponent } from "./ClassKeyConceptsComponent";
export { default as ClassWritingPromptsComponent } from "./ClassWritingPromptsComponent";
export { default as ClassAdditionalMaterialsComponent } from "./ClassAdditionalMaterialsComponent";
export { default as CourseCompletedComponent } from "./CourseCompletedComponent";

// === ./src/components/donation/DonationComponents.tsx ===
'use client';

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/navigation';

// Common Types
type DonationCategory = 'Broadcasting' | 'Solarization' | 'Greenhouse & Seedbank' | 'Off-Grid' | 'Custom';

interface DonationOption {
  id: string;
  category: DonationCategory;
  title: string;
  description: string;
  defaultAmount: number;
  imageUrl?: string;
}

export const donationOptions: DonationOption[] = [
    {
      id: 'broadcasting',
      category: 'Broadcasting',
      title: 'Raise $45,00',
      description: 'We will continue to capture, produce, archive, and disseminate this transformative wisdom that has the power to change our collective destiny. This requires improving the quality of our media and broadcasting infrastructure to ensure our long-term connectivity: upgrading our cameras, microphones, mixers and editing equipment, fiber optic cables, hard drives, and storage capacities.',
      defaultAmount: 45,
    },
    {
      id: 'solarization',
      category: 'Solarization',
      title: 'Raise $100,00',
      description: 'The solarization of our community buildings is fundamental in our transition to longer-term sustainability. It will allow us to continue broadcasting from the ashram despite any instabilities and fluctuations in the grid, and to receive visitors for as long as possible while maintaining general operations and daily activities in essential locations, such as the lodge and student housing center.',
      defaultAmount: 100,
    },
    {
      id: 'greenhouse',
      category: 'Greenhouse & Seedbank',
      title: 'Raise $55,00',
      description: 'The ashram\'s greenhouse and seed bank project is the foundation of our community\'s efforts to ensure food security into the future, so that we can continue to serve as stewards of this abundant and sacred land here in rural Costa Rica, and share this information with other communities and with those that can visit us here.',
      defaultAmount: 55,
    },
    {
      id: 'offgrid',
      category: 'Off-Grid',
      title: 'Raise $75,00',
      description: 'Support our off-grid initiatives to create a self-sustainable community model that can thrive independently of external systems. This includes developing water collection systems, sustainable energy solutions, and implementing permaculture principles throughout our campus.',
      defaultAmount: 75,
    },
    {
      id: 'custom',
      category: 'Custom',
      title: 'Donate to the general fund',
      description: 'We will continue to capture, produce, archive, and disseminate this transformative wisdom that has the power to change our collective destiny. This requires improving the quality of our media and broadcasting infrastructure to ensure our long-term connectivity: upgrading our cameras, microphones, mixers and editing equipment, fiber optic cables, hard drives, and storage capacities.',
      defaultAmount: 45,
    },
  ];

// Donation Tabs Component
interface DonationTabsProps {
  activeCategory: DonationCategory;
  onCategoryChange: (category: DonationCategory) => void;
}

const DonationTabs: React.FC<DonationTabsProps> = ({
  activeCategory,
  onCategoryChange,
}) => {
  // Get unique categories from options
  const categories: DonationCategory[] = ['Broadcasting', 'Solarization', 'Greenhouse & Seedbank', 'Off-Grid', 'Custom'];

  return (
    <div className="flex justify-center border-b border-gray-200">
      <div className="flex overflow-x-auto">
        {categories.map((category) => (
          <button
            key={category}
            onClick={() => onCategoryChange(category)}
            className={`whitespace-nowrap py-4 px-6 text-sm font-medium ${
              activeCategory === category
                ? 'border-b-2 border-indigo-600 text-gray-900'
                : 'border-b-2 border-transparent text-gray-600 hover:text-gray-800 hover:border-gray-300'
            }`}
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  );
};

// Donation Option Detail Component
interface DonationOptionDetailProps {
  option: DonationOption;
  amount: string;
  onAmountChange: (value: string) => void;
}

const DonationOptionDetail: React.FC<DonationOptionDetailProps> = ({
    option,
    amount,
    onAmountChange,
}) => {
    const { category, title, description } = option;
    const router = useRouter();
    
    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      
      // Navigate to the payment page with donation details as URL parameters
      const params = new URLSearchParams({
        amount,
        category: option.category
      });
      
      router.push(`/donate/payment?${params.toString()}`);
    };
    
    // Format amount for display
    const formatAmount = (value: string): string => {
      // Remove any non-numeric characters except decimal point
      let formattedAmount = value.replace(/[^0-9.]/g, '');
      
      // Ensure only one decimal point
      const parts = formattedAmount.split('.');
      if (parts.length > 2) {
        formattedAmount = parts[0] + '.' + parts.slice(1).join('');
      }
      
      return formattedAmount;
    };

    const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const newValue = formatAmount(e.target.value);
      onAmountChange(newValue);
    };
    
    return (
      <div className="grid md:grid-cols-2 gap-0 border border-gray-200 rounded-lg overflow-hidden">
        {/* Left side - Gray placeholder */}
        <div className="bg-gray-200 min-h-[300px] md:min-h-full relative">
          <div className="w-full h-full flex items-center justify-center">
            <svg 
              className="h-24 w-24 text-gray-400" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={1} 
                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" 
              />
            </svg>
          </div>
        </div>
  
        {/* Right side - Content */}
        <div className="p-6">
          <div className="text-purple-600 font-medium mb-1">{category}</div>
          <h2 className="text-3xl font-bold mb-4">{title}</h2>
          <p className="text-gray-700 mb-6">{description}</p>
          
          <form onSubmit={handleSubmit}>
            <div className="mb-6">
              <label className="block text-sm font-medium mb-2">Insert amount</label>
              <div className="flex">
                <div className="inline-flex items-center px-3 text-gray-500 border border-r-0 border-gray-300 rounded-l-md bg-gray-50">
                  <select 
                    className="h-full bg-transparent border-none focus:outline-none py-0 text-sm"
                    defaultValue="USD"
                  >
                    <option value="USD">USD</option>
                  </select>
                </div>
                <input
                  type="text"
                  value={amount}
                  onChange={handleAmountChange}
                  className="flex-grow px-3 py-3 border border-gray-300 rounded-r-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                  placeholder="0.00"
                  inputMode="decimal"
                />
              </div>
            </div>
            
            {/* Preset amount buttons for Custom category */}
            {option.category === 'Custom' && (
              <div className="grid grid-cols-4 gap-2 mb-6">
                {[45, 50, 55, 60].map((presetAmount) => (
                  <button
                    key={presetAmount}
                    type="button"
                    onClick={() => onAmountChange(presetAmount.toFixed(2))}
                    className={`py-2 border rounded-md text-center text-sm font-medium transition-colors ${
                      parseFloat(amount) === presetAmount
                        ? 'bg-gray-900 text-white border-gray-900'
                        : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                    }`}
                  >
                    ${presetAmount.toFixed(2)}
                  </button>
                ))}
              </div>
            )}
            
            <button
              type="submit"
              className="w-full bg-gray-900 text-white rounded-md py-3 font-medium hover:bg-gray-800"
            >
              {option.category === 'Custom' ? 'Continue' : 'Accept'}
            </button>
          </form>
        </div>
      </div>
    );
};

// Donation Hero Component
interface DonationHeroProps {
  heading?: string;
  description?: string;
  onDonateClick?: () => void;
}

export const DonationHero: React.FC<DonationHeroProps> = ({
  heading = "Help Actualize a New Way of Life",
  description = "If you recognize the urgency to create a more spiritual and ecological culture, and if you want to be part of the process of human and planetary rebirth, please support this unique and vital project.",
  onDonateClick,
}) => {
  return (
    <section className="relative py-20 bg-gray-700 text-white text-center">
      <div className="container mx-auto px-4">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-4xl font-bold mb-6">{heading}</h1>
          <p className="mb-8">{description}</p>
          
          <button
            onClick={onDonateClick}
            className="inline-block bg-white text-gray-900 rounded-md px-6 py-2 font-medium hover:bg-gray-100"
          >
            Donate
          </button>
        </div>
      </div>
    </section>
  );
};

// Main Donation Page Component
interface DonationPageProps {
  initialCategory?: DonationCategory;
  onSuccess?: () => void;
}

export const DonationPage: React.FC<DonationPageProps> = ({
    initialCategory = 'Broadcasting',
    onSuccess,
  }) => {
    const [activeCategory, setActiveCategory] = useState<DonationCategory>(initialCategory);
    const [amount, setAmount] = useState('');
    
    // Get the current selected option
    const selectedOption = donationOptions.find(option => option.category === activeCategory) || donationOptions[0];
    
    // Set amount when category changes
    useEffect(() => {
      const option = donationOptions.find(opt => opt.category === activeCategory);
      if (option) {
        setAmount(option.defaultAmount.toFixed(2));
      }
    }, [activeCategory]);
    
    const handleCategoryChange = (category: DonationCategory) => {
      setActiveCategory(category);
    };
    
    return (
      <div>
        <h2 className="text-center text-2xl font-bold my-8">Title here</h2>
        <p className="text-center text-gray-600 mb-6 max-w-3xl mx-auto">
          Lorem ipsum dolor sit amet consectetur. Sagittis sapien et faucibus diam netus. Facilisis ac iaculis hendrerit cras molestiae elementis. Faucibus viae metus exsuciabo
          nunc sequum tempus pellentesque. Morbi comodo molestiae compreshen vel laorectus.
        </p>
        
        <DonationTabs
          activeCategory={activeCategory}
          onCategoryChange={handleCategoryChange}
        />
        
        <div className="max-w-5xl mx-auto mt-8 px-4">
          <DonationOptionDetail
            option={selectedOption}
            amount={amount}
            onAmountChange={setAmount}
          />
        </div>
        
        {/* Custom option as shown in wireframe */}
        {activeCategory === 'Custom' && (
          <div className="max-w-5xl mx-auto mt-16 px-4 text-center pb-8">
            <h3 className="text-center text-sm text-gray-500 mb-2">Custom</h3>
            <h2 className="text-3xl font-bold mb-4">Donate to the general fund</h2>
            <p className="max-w-3xl mx-auto mb-8 text-gray-600">
              We will continue to capture, produce, archive, and disseminate this transformative wisdom that has the power to change our collective destiny. This requires improving the quality of our media and broadcasting infrastructure to ensure our long-term connectivity: upgrading our cameras, microphones, mixers and editing equipment, fiber optic cables, hard drives, and storage capacities.
            </p>
            
            <div className="flex flex-wrap justify-center gap-4 mb-6">
              {[45, 50, 55, 60].map((presetAmount) => (
                <button
                  key={presetAmount}
                  type="button"
                  className="py-2 px-4 border rounded-md text-center text-sm font-medium transition-colors border-gray-300 text-gray-700 hover:bg-gray-50"
                >
                  ${presetAmount.toFixed(2)}
                </button>
              ))}
            </div>
            
            <div className="flex justify-center items-center gap-4 max-w-sm mx-auto">
              <select className="px-3 py-2 border border-gray-300 rounded-md bg-white text-sm">
                <option value="USD">USD</option>
              </select>
              <input 
                type="text" 
                placeholder="Type your amount"
                className="flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none"
              />
              <div className="whitespace-nowrap text-sm">One time</div>
              <button className="px-4 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium">
                Accept
              </button>
            </div>
          </div>
        )}
      </div>
    );
  };

// Export page components
export const FriendOfSatYogaPage: React.FC = () => {
  const router = useRouter();
  
  const handleDonateClick = () => {
    // Scroll to donation form
    const donationSection = document.getElementById('donation-section');
    if (donationSection) {
      donationSection.scrollIntoView({ behavior: 'smooth' });
    }
  };
  
  return (
    <div className="min-h-screen">
      <DonationHero onDonateClick={handleDonateClick} />
      
      <div className="container mx-auto px-4 py-16">
        <div className="max-w-3xl mx-auto">
          <h2 className="text-3xl font-bold mb-6">Become a friend of Sat Yoga</h2>
          <p className="text-gray-700 mb-4">
            By contributing financially, you join a valued group of visionary leaders who are ensuring this new model of a peaceful world can be fully realized. You enable us to offer more scholarships to needy students, to reach out to more people within Costa Rica and throughout Latin America, and to guide more people to have better lives and raise their children to be healthy, awakened, and prepared for the future.
          </p>
          <p className="text-gray-700 mb-4">
            As a Friend of Sat Yoga, you will be directly benefiting the people of Costa Rica and the world as a whole. Right now, we have an urgent need for your assistance.
          </p>
          <p className="text-gray-700">
            If you wish to lend a hand in these difficult times, please contact Jagdish on (+506) 8705-0779 or email friendsupport@satyogainstitute.org to become a Friend of Sat Yoga program. We intend to offer special retreats, seminars, and consultation gatherings with our Friends on a regular basis. We hope you will join us.
          </p>
        </div>
      </div>
      
      <div id="donation-section" className="bg-white py-16">
        <DonationPage />
      </div>
      
      {/* Quote at bottom of page */}
      <div className="bg-gray-700 text-white text-center py-12">
        <div className="container mx-auto px-4">
          <p className="max-w-3xl mx-auto italic">
            The joy of sharing and serving, living in simplicity, brings abundance. Help us demonstrate solutions that can be emulated globally as we restore our harmony with Nature.
          </p>
        </div>
      </div>
    </div>)
  };
// === ./src/components/donation/DonationPaymentForm.tsx ===
'use client';

import { useState, useEffect, FormEvent } from 'react';
import { formatTilopayDonationData, processPayment } from '@/lib/services/tilopay';

// TypeScript definitions for Tilopay SDK
declare global {
  interface Window {
    Tilopay: {
      Init: (params: any) => Promise<any>;
      startPayment: () => Promise<any>;
      getCardType: () => Promise<string>;
      updateOptions: (params: any) => Promise<any>;
    };
  }
}

// Define the donation category type for type safety
type DonationCategory = 'Broadcasting' | 'Solarization' | 'Greenhouse & Seedbank' | 'Off-Grid' | 'Custom';

interface DonationPaymentFormProps {
  amount: string;
  category: DonationCategory;
  onCancel: () => void;
}

export const DonationPaymentForm: React.FC<DonationPaymentFormProps> = ({
  amount,
  category,
  onCancel,
}) => {
  // Form state
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('');
  const [address2, setAddress2] = useState('');
  const [city, setCity] = useState('');
  const [state, setState] = useState('');
  const [zipCode, setZipCode] = useState('');
  const [country, setCountry] = useState('CR');
  const [message, setMessage] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState('');

  // SDK-specific state
  const [useSDK, setUseSDK] = useState(false);
  const [isSDKLoaded, setIsSDKLoaded] = useState(false);
  const [isSDKInitialized, setIsSDKInitialized] = useState(false);
  const [paymentMethods, setPaymentMethods] = useState<any[]>([]);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState('');
  const [savedCards, setSavedCards] = useState<any[]>([]);
  const [selectedSavedCard, setSelectedSavedCard] = useState('');
  const [cardNumber, setCardNumber] = useState('');
  const [expiryDate, setExpiryDate] = useState('');
  const [cvv, setCvv] = useState('');
  const [cardType, setCardType] = useState('');

  // Load Tilopay SDK when user chooses to use it
  useEffect(() => {
    if (useSDK && !isSDKLoaded) {
      const loadSDK = async () => {
        try {
          // Check if SDK is already loaded
          if (window.Tilopay) {
            setIsSDKLoaded(true);
            return;
          }

          // Create script element
          const script = document.createElement('script');
          script.src = `https://app.tilopay.com/sdk/v2/sdk_tpay.min.js?v=${Date.now()}`;
          script.async = true;
          
          script.onload = () => {
            setTimeout(() => {
              if (window.Tilopay) {
                setIsSDKLoaded(true);
                console.log('Tilopay SDK loaded successfully');
              } else {
                setError('Failed to load payment system');
              }
            }, 500);
          };
          
          script.onerror = () => {
            console.error('Failed to load Tilopay SDK');
            setError('Failed to load payment system');
          };

          document.head.appendChild(script);
        } catch (error) {
          console.error('Error loading SDK:', error);
          setError('Failed to load payment system');
        }
      };

      loadSDK();
    }
  }, [useSDK, isSDKLoaded]);

  // Initialize SDK when it's loaded and form is valid
  const initializeSDK = async () => {
    if (!isSDKLoaded || !window.Tilopay) {
      setError('Payment system not ready');
      return false;
    }

    try {
      setIsProcessing(true);
      setError('');

      console.log('Getting SDK token...');
      // Get SDK token from your backend
      const tokenResponse = await fetch('/api/tilopay/get-sdk-token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!tokenResponse.ok) {
        const errorData = await tokenResponse.json();
        throw new Error(errorData.details || 'Failed to get payment token');
      }

      const tokenData = await tokenResponse.json();
      console.log('Got SDK token, initializing...');

      // Initialize Tilopay SDK with exact parameters from documentation
      const initResponse = await window.Tilopay.Init({
        token: tokenData.token,
        currency: 'USD',
        language: 'en',
        amount: parseFloat(amount),
        billToEmail: email,
        orderNumber: `SATYOGA-DONATION-${category.replace(/\s+/g, '-').toUpperCase()}-${Date.now()}`,
        billToFirstName: firstName,
        billToLastName: lastName,
        billToAddress: address || 'N/A',
        billToAddress2: address2 || '',
        billToCity: city || 'N/A',
        billToState: state || 'N/A',
        billToZipPostCode: zipCode || '00000',
        billToCountry: country || 'CR',
        billToTelephone: phone || '00000000',
        capture: 1,
        redirect: `${window.location.origin}/donate/success`,
        subscription: 0,
        hashVersion: 'V2',
        returnData: btoa(JSON.stringify({
          donationType: 'donation',
          donationCategory: category,
          amount: amount,
          donorName: `${firstName} ${lastName}`,
          donorEmail: email,
          message: message
        }))
      });

      console.log('SDK Init response:', initResponse);

      if (initResponse.error) {
        throw new Error(initResponse.error);
      }

      setPaymentMethods(initResponse.methods || []);
      setSavedCards(initResponse.cards || []);
      setIsSDKInitialized(true);
      
      // Auto-populate hidden form fields
      setTimeout(() => {
        const methodSelect = document.getElementById('tlpy_payment_method') as HTMLSelectElement;
        const cardSelect = document.getElementById('tlpy_saved_cards') as HTMLSelectElement;
        
        if (methodSelect && initResponse.methods?.length > 0) {
          initResponse.methods.forEach((method: any) => {
            const option = document.createElement('option');
            option.value = method.id;
            option.text = method.name;
            methodSelect.appendChild(option);
          });
        }
        
        if (cardSelect && initResponse.cards?.length > 0) {
          initResponse.cards.forEach((card: any) => {
            const option = document.createElement('option');
            option.value = card.id;
            option.text = card.name;
            cardSelect.appendChild(option);
          });
        }
      }, 100);

      return true;

    } catch (error) {
      console.error('Error initializing payment:', error);
      setError(error instanceof Error ? error.message : 'Failed to initialize payment');
      return false;
    } finally {
      setIsProcessing(false);
    }
  };

  // Handle card number change to detect card type
  const handleCardNumberChange = async (value: string) => {
    const formatted = value.replace(/\D/g, '').slice(0, 16);
    setCardNumber(formatted);
    
    // Update the SDK form field
    const cardInput = document.getElementById('tlpy_cc_number') as HTMLInputElement;
    if (cardInput) {
      cardInput.value = formatted;
    }

    // Get card type if we have enough digits
    if (formatted.length >= 6 && window.Tilopay && isSDKInitialized) {
      try {
        const typeResponse: any = await window.Tilopay.getCardType();
        console.log('Card type response:', typeResponse);
        
        // Handle different response formats
        let cardTypeName = '';
        if (typeof typeResponse === 'string') {
          cardTypeName = typeResponse;
        } else if (typeResponse && typeof typeResponse === 'object') {
          cardTypeName = typeResponse.message || typeResponse.type || typeResponse.cardType || '';
        }
        
        setCardType(cardTypeName);
      } catch (error) {
        console.error('Error getting card type:', error);
        setCardType('');
      }
    } else if (formatted.length < 6) {
      setCardType('');
    }
  };

  // Handle expiry date formatting
  const handleExpiryChange = (value: string) => {
    let formatted = value.replace(/\D/g, '');
    if (formatted.length >= 2) {
      formatted = formatted.slice(0, 2) + '/' + formatted.slice(2, 4);
    }
    setExpiryDate(formatted);
    
    const expiryInput = document.getElementById('tlpy_cc_expiration_date') as HTMLInputElement;
    if (expiryInput) {
      expiryInput.value = formatted;
    }
  };

  // Handle CVV change
  const handleCvvChange = (value: string) => {
    const formatted = value.replace(/\D/g, '').slice(0, 4);
    setCvv(formatted);
    
    const cvvInput = document.getElementById('tlpy_cvv') as HTMLInputElement;
    if (cvvInput) {
      cvvInput.value = formatted;
    }
  };

  // Validation function
  const validateForm = () => {
    const requiredFields = {
      firstName: firstName.trim(),
      lastName: lastName.trim(),
      email: email.trim(),
      phone: phone.trim(),
      address: address.trim(),
      city: city.trim(),
      state: state.trim(),
      zipCode: zipCode.trim(),
      country: country.trim(),
      message: message.trim(),
      amount: amount?.trim()
    };

    // Check for empty required fields
    for (const [field, value] of Object.entries(requiredFields)) {
      if (!value) {
        throw new Error(`${field.charAt(0).toUpperCase() + field.slice(1)} is required and cannot be empty`);
      }
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(requiredFields.email)) {
      throw new Error('Please enter a valid email address');
    }

    // Validate amount is a valid number
    const numericAmount = parseFloat(requiredFields.amount);
    if (isNaN(numericAmount) || numericAmount <= 0) {
      throw new Error('Please enter a valid donation amount');
    }

    return requiredFields;
  };

  // Process payment via SDK
  const processSDKPayment = async () => {
    if (!window.Tilopay || !isSDKInitialized) {
      setError('Payment system not ready');
      return;
    }

    try {
      setIsProcessing(true);
      setError('');

      // Validate payment form
      if (!selectedPaymentMethod) {
        throw new Error('Please select a payment method');
      }

      if (!selectedSavedCard && (!cardNumber || !expiryDate || !cvv)) {
        throw new Error('Please enter your card details');
      }

      console.log('Processing SDK payment...');
      
      // Process the payment
      const result = await window.Tilopay.startPayment();
      console.log('SDK Payment result:', result);
      
      if (result.error) {
        throw new Error(result.error);
      }

      // Payment successful - redirect to success page
      window.location.href = `/donate/success?result=${encodeURIComponent(JSON.stringify(result))}`;

    } catch (error) {
      console.error('Payment error:', error);
      setError(error instanceof Error ? error.message : 'Payment failed');
    } finally {
      setIsProcessing(false);
    }
  };

  // Original form submission (redirect to Tilopay)
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();

    // Validate form first
    try {
      validateForm();
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Please fill in all required fields');
      return;
    }

    // If using SDK and it's initialized, process payment directly
    if (useSDK && isSDKInitialized) {
      await processSDKPayment();
      return;
    }

    // If user wants to use SDK but it's not initialized yet
    if (useSDK && !isSDKInitialized) {
      const initialized = await initializeSDK();
      if (!initialized) {
        return; // Error already set in initializeSDK
      }
      return; // User needs to click submit again after initialization
    }

    // Original redirect flow
    setIsProcessing(true);
    setError('');

    try {
      // Validate form data first
      const validatedFields = validateForm();
      
      // Collect form data with validated and trimmed values
      const formData = {
        firstName: validatedFields.firstName,
        lastName: validatedFields.lastName,
        email: validatedFields.email,
        phone: validatedFields.phone,
        address: validatedFields.address,
        address2: address2.trim(), // Optional field
        city: validatedFields.city,
        state: validatedFields.state,
        zipCode: validatedFields.zipCode,
        country: validatedFields.country,
        message: validatedFields.message
      };

      const donationDetails = {
        amount: validatedFields.amount,
        category
      };

      console.log('Form data being sent:', formData);
      console.log('Donation details:', donationDetails);
      
      // Format data for Tilopay using the DONATION-SPECIFIC function
      const tilopayData = formatTilopayDonationData(formData, donationDetails);
      console.log('Tilopay formatted data:', tilopayData);
      
      // Process payment through Tilopay
      const result = await processPayment(tilopayData);
      console.log('Payment result:', result);
      
      // Redirect to Tilopay payment form
      if (result && result.url) {
        window.location.href = result.url;
      } else {
        throw new Error('No payment URL received from Tilopay');
      }
    } catch (error) {
      console.error('Payment error:', error);
      
      // More detailed error handling
      if (error instanceof Error) {
        setError(error.message);
      } else {
        setError('There was an error processing your payment. Please try again.');
      }
      setIsProcessing(false);
    }
  };

  return (
    <>
      {/* Hidden Tilopay form structure required by SDK */}
      {useSDK && (
        <div className="payFormTilopay" style={{ display: 'none' }}>
          <select name="tlpy_payment_method" id="tlpy_payment_method">
            <option value="">Select payment method</option>
          </select>
          
          <div id="tlpy_card_payment_div">
            <select name="tlpy_saved_cards" id="tlpy_saved_cards">
              <option value="">Select card</option>
            </select>
            <input type="text" id="tlpy_cc_number" name="tlpy_cc_number" />
            <input type="text" id="tlpy_cc_expiration_date" name="tlpy_cc_expiration_date" />
            <input type="text" id="tlpy_cvv" name="tlpy_cvv" />
          </div>
          
          <div id="tlpy_phone_number_div" style={{ display: 'none' }}>
            <input type="text" id="tlpy_phone_number" name="tlpy_phone_number" />
          </div>
        </div>
      )}

      <div id="responseTilopay"></div>

      <div className="flex flex-col md:flex-row">
        {/* Left column - Form */}
        <div className="md:w-1/2 p-8">
          <h2 className="text-xl font-bold mb-4">Donate</h2>
          <p className="text-gray-700 mb-6">
            If you recognize the urgency to create a more spiritual and ecological culture, and if you want to be part of the process of human and planetary rebirth, please support this unique and vital project. Enter your donation amount:
          </p>
          
          {error && (
            <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
              <p className="text-red-700">{error}</p>
            </div>
          )}

          {/* Payment Method Selection */}
          <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-md">
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Choose Payment Method:
            </label>
            <div className="space-y-2">
              <label className="flex items-center">
                <input
                  type="radio"
                  name="paymentType"
                  value="redirect"
                  checked={!useSDK}
                  onChange={() => setUseSDK(false)}
                  className="mr-2"
                />
                <span className="text-sm">Secure Hosted Payment (Recommended)</span>
              </label>
              <label className="flex items-center">
                <input
                  type="radio"
                  name="paymentType"
                  value="sdk"
                  checked={useSDK}
                  onChange={() => setUseSDK(true)}
                  className="mr-2"
                />
                <span className="text-sm">Direct Card Payment (Stay on this page)</span>
              </label>
            </div>
          </div>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-gray-700 mb-2" htmlFor="amount">
                Insert amount <span className="text-red-500">*</span>
              </label>
              <div className="flex">
                <div className="inline-flex items-center px-3 border border-r-0 border-gray-300 rounded-l-md bg-white">
                  <select 
                    className="h-full bg-transparent border-none focus:outline-none py-0"
                    defaultValue="USD"
                  >
                    <option value="USD">USD</option>
                  </select>
                </div>
                <input
                  type="text"
                  className="flex-grow px-4 py-2 border border-gray-300 rounded-r-md focus:outline-none"
                  value={amount}
                  disabled
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-gray-700 mb-2" htmlFor="firstName">
                  First Name <span className="text-red-500">*</span>
                </label>
                <input
                  id="firstName"
                  type="text"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  placeholder="First name"
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                  required
                />
              </div>
              
              <div>
                <label className="block text-gray-700 mb-2" htmlFor="lastName">
                  Last Name <span className="text-red-500">*</span>
                </label>
                <input
                  id="lastName"
                  type="text"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  placeholder="Last name"
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                  required
                />
              </div>
            </div>

            <div>
              <label className="block text-gray-700 mb-2" htmlFor="email">
                Email <span className="text-red-500">*</span>
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Your email"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-gray-700 mb-2" htmlFor="phone">
                Phone Number <span className="text-red-500">*</span>
              </label>
              <input
                id="phone"
                type="tel"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                placeholder="Your phone number"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-gray-700 mb-2" htmlFor="address">
                Address <span className="text-red-500">*</span>
              </label>
              <input
                id="address"
                type="text"
                value={address}
                onChange={(e) => setAddress(e.target.value)}
                placeholder="Street address"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                required
              />
            </div>
            
            <div>
              <label className="block text-gray-700 mb-2" htmlFor="address2">
                Address Line 2
              </label>
              <input
                id="address2"
                type="text"
                value={address2}
                onChange={(e) => setAddress2(e.target.value)}
                placeholder="Apartment, suite, etc. (optional)"
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
              />
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-gray-700 mb-2" htmlFor="city">
                  City <span className="text-red-500">*</span>
                </label>
                <input
                  id="city"
                  type="text"
                  value={city}
                  onChange={(e) => setCity(e.target.value)}
                  placeholder="City"
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                  required
                />
              </div>
              
              <div>
                <label className="block text-gray-700 mb-2" htmlFor="state">
                  State/Province <span className="text-red-500">*</span>
                </label>
                <input
                  id="state"
                  type="text"
                  value={state}
                  onChange={(e) => setState(e.target.value)}
                  placeholder="State/Province"
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                  required
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-gray-700 mb-2" htmlFor="zipCode">
                  Postal Code <span className="text-red-500">*</span>
                </label>
                <input
                  id="zipCode"
                  type="text"
                  value={zipCode}
                  onChange={(e) => setZipCode(e.target.value)}
                  placeholder="Postal code"
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                  required
                />
              </div>
              
              <div>
                <label className="block text-gray-700 mb-2" htmlFor="country">
                  Country <span className="text-red-500">*</span>
                </label>
                <select
                  id="country"
                  value={country}
                  onChange={(e) => setCountry(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                  required
                >
                  <option value="CR">Costa Rica</option>
                  <option value="US">United States</option>
                  <option value="CA">Canada</option>
                  <option value="MX">Mexico</option>
                  <option value="GT">Guatemala</option>
                </select>
              </div>
            </div>
            
            <div>
              <label className="block text-gray-700 mb-2" htmlFor="message">
                Message <span className="text-red-500">*</span>
              </label>
              <textarea
                id="message"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Leave us a message..."
                className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none h-32"
                required
              />
            </div>

            {/* SDK Payment Fields */}
            {useSDK && isSDKInitialized && (
              <div className="space-y-4 border-t pt-4">
                <h3 className="text-lg font-medium">Payment Details</h3>
                
                {/* Payment Method Selection */}
                <div>
                  <label className="block text-gray-700 mb-2">
                    Payment Method <span className="text-red-500">*</span>
                  </label>
                  <select
                    value={selectedPaymentMethod}
                    onChange={(e) => {
                      setSelectedPaymentMethod(e.target.value);
                      const hiddenSelect = document.getElementById('tlpy_payment_method') as HTMLSelectElement;
                      if (hiddenSelect) hiddenSelect.value = e.target.value;
                    }}
                    className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                    required
                  >
                    <option value="">Select payment method</option>
                    {paymentMethods.map((method) => (
                      <option key={method.id} value={method.id}>
                        {method.name}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Saved Cards */}
                {savedCards.length > 0 && (
                  <div>
                    <label className="block text-gray-700 mb-2">
                      Saved Cards
                    </label>
                    <select
                      value={selectedSavedCard}
                      onChange={(e) => {
                        setSelectedSavedCard(e.target.value);
                        const hiddenSelect = document.getElementById('tlpy_saved_cards') as HTMLSelectElement;
                        if (hiddenSelect) hiddenSelect.value = e.target.value;
                      }}
                      className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                    >
                      <option value="">Use new card</option>
                      {savedCards.map((card) => (
                        <option key={card.id} value={card.id}>
                          {card.name}
                        </option>
                      ))}
                    </select>
                  </div>
                )}

                {/* New Card Details */}
                {!selectedSavedCard && (
                  <div className="space-y-4">
                    <div>
                      <label className="block text-gray-700 mb-2">
                        Card Number <span className="text-red-500">*</span>
                      </label>
                      <div className="relative">
                        <input
                          type="text"
                          value={cardNumber}
                          onChange={(e) => handleCardNumberChange(e.target.value)}
                          placeholder="1234 5678 9012 3456"
                          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                          required
                        />
                        {cardType && (
                          <span className="absolute right-3 top-2 text-sm text-gray-500">
                            {cardType}
                          </span>
                        )}
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-gray-700 mb-2">
                          Expiry Date <span className="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          value={expiryDate}
                          onChange={(e) => handleExpiryChange(e.target.value)}
                          placeholder="MM/YY"
                          maxLength={5}
                          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-gray-700 mb-2">
                          CVV <span className="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          value={cvv}
                          onChange={(e) => handleCvvChange(e.target.value)}
                          placeholder="123"
                          className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                          required
                        />
                      </div>
                    </div>
                  </div>
                )}

                {/* CVV for saved cards */}
                {selectedSavedCard && (
                  <div>
                    <label className="block text-gray-700 mb-2">
                      CVV <span className="text-red-500">*</span>
                    </label>
                    <input
                      type="text"
                      value={cvv}
                      onChange={(e) => handleCvvChange(e.target.value)}
                      placeholder="123"
                      className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none"
                      required
                    />
                  </div>
                )}
              </div>
            )}
            
            <div className="flex space-x-4 pt-4">
              <button
                type="button"
                onClick={onCancel}
                className="px-5 py-2 bg-white border border-gray-300 rounded-md text-gray-700 font-medium hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-5 py-2 bg-gray-900 text-white rounded-md font-medium hover:bg-gray-800 disabled:opacity-70 disabled:cursor-not-allowed"
                disabled={isProcessing}
              >
                {isProcessing ? 'Processing...' : 
                 useSDK && isSDKInitialized ? `Pay $${amount}` : 
                 useSDK && !isSDKInitialized ? 'Initialize Payment' :
                 'Continue to Payment'}
              </button>
            </div>
          </form>
        </div>
        
        {/* Right column - Donation summary */}
        <div className="md:w-1/2 bg-gray-50 p-8">
          <h3 className="text-lg font-medium mb-4">Products</h3>
          <div className="flex items-center justify-between py-4 border-b border-gray-200">
            <div className="flex items-center">
              <div className="bg-gray-200 w-12 h-12 mr-4 flex items-center justify-center rounded">
                <svg className="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <span className="font-medium">Donation - {category}</span>
            </div>
            <span className="font-medium">${parseFloat(amount).toFixed(2)}</span>
          </div>
          
          <div className="flex justify-between items-center py-4">
            <span className="font-medium text-lg">Subtotal</span>
            <span className="font-medium">${parseFloat(amount).toFixed(2)}</span>
          </div>
          
          <div className="flex justify-between items-center pt-4 pb-6 mb-6 border-b border-gray-200">
            <h3 className="text-xl font-bold">Total</h3>
            <span className="text-xl font-bold">${parseFloat(amount).toFixed(2)}</span>
          </div>
          
          <div className="bg-yellow-50 p-4 rounded border border-yellow-200">
            <p className="text-sm text-gray-700">
              <span className="font-bold">Note:</span> {
                useSDK 
                  ? 'Your payment will be processed securely on this page.'
                  : 'After clicking "Continue to Payment", you will be redirected to our secure payment processor to enter your card details.'
              }
            </p>
          </div>

          {useSDK && (
            <div className="mt-4 p-4 bg-green-50 rounded border border-green-200">
              <p className="text-sm text-green-800">
                <span className="font-bold">Secure:</span> Your payment information is encrypted and processed securely. We never store your card details.
              </p>
            </div>
          )}
        </div>
      </div>
    </>
  );
};
// === ./src/components/donation/DonationPaymentWrapper.tsx ===
'use client';

import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { DonationPaymentForm } from './DonationPaymentForm';

// Define the donation category type for type safety
type DonationCategory = 'Broadcasting' | 'Solarization' | 'Greenhouse & Seedbank' | 'Off-Grid' | 'Custom';

export const DonationPaymentWrapper: React.FC = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  // Get donation details from URL parameters
  const amount = searchParams.get('amount') || '45.00';
  const categoryParam = searchParams.get('category') || 'Broadcasting';
  
  // Type cast the category (with validation)
  const isValidCategory = (category: string): category is DonationCategory => {
    return ['Broadcasting', 'Solarization', 'Greenhouse & Seedbank', 'Off-Grid', 'Custom'].includes(category);
  };
  
  const category = isValidCategory(categoryParam) ? categoryParam : 'Broadcasting';
  
  const handleCancel = () => {
    router.push('/donate');
  };

  return (
    <div className="bg-gray-50 min-h-screen">
      <div className="container mx-auto py-4">
        <Link href="/donate" className="inline-flex items-center text-gray-600 hover:text-gray-900 ml-4">
          <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back
        </Link>
      </div>
      
      <div className="container mx-auto my-8">
        <div className="bg-white rounded-md shadow-sm overflow-hidden">
          <DonationPaymentForm
            amount={amount}
            category={category}
            onCancel={handleCancel}
          />
        </div>
      </div>
    </div>
  );
};
// === ./src/components/donation/DonationSuccessPageComponent.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function DonationSuccessPageComponent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [donationDetails, setDonationDetails] = useState<any>(null);
  const [error, setError] = useState('');
  
  useEffect(() => {
    // Parse the return data from Tilopay and process donation success
    const processDonationSuccess = async () => {
      try {
        const returnData = searchParams.get('returnData');
        const orderCode = searchParams.get('code');
        const orderAuth = searchParams.get('auth');
        const orderNumber = searchParams.get('order');
        const sdkResult = searchParams.get('result');
        
        // Handle SDK payment result (if coming from direct payment)
        if (sdkResult) {
          try {
            const parsedResult = JSON.parse(decodeURIComponent(sdkResult));
            setDonationDetails({
              donationType: 'donation',
              donationCategory: 'Direct Payment',
              amount: parsedResult.amount || '0',
              donorName: 'Anonymous',
              donorEmail: '',
              message: 'Thank you for your donation!',
              orderNumber: parsedResult.orderNumber || parsedResult.transactionId
            });
            setLoading(false);
            return;
          } catch (err) {
            console.error('Error parsing SDK result:', err);
          }
        }
        
        if (!returnData || !orderCode) {
          setError('No donation information found.');
          setLoading(false);
          return;
        }
        
        // Verify payment success from Tilopay response
        if (orderCode !== '1') {
          setError('Donation was not successful. Please contact support if you believe this is an error.');
          setLoading(false);
          return;
        }
        
        // Decode the base64 encoded return data
        const decodedData = atob(returnData);
        const parsedData = JSON.parse(decodedData);
        setDonationDetails(parsedData);
        
        // Optional: Record donation in your system
        const recordDonation = async () => {
          try {
            const response = await fetch('/api/donations/record', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                donationCategory: parsedData.donationCategory,
                amount: parsedData.amount,
                donorName: parsedData.donorName,
                donorEmail: parsedData.donorEmail,
                message: parsedData.message,
                orderNumber: orderNumber,
                orderAuth: orderAuth,
                timestamp: new Date().toISOString()
              }),
            });
            
            if (!response.ok) {
              console.error('Failed to record donation');
              // We don't show this error to the user since payment was successful
              // Just log it and allow the user to continue
            }
          } catch (err) {
            console.error('Error recording donation:', err);
          }
        };
        
        await recordDonation();
        setLoading(false);
        
      } catch (err) {
        console.error('Error processing donation success:', err);
        setError('An error occurred while processing your donation information.');
        setLoading(false);
      }
    };
    
    processDonationSuccess();
  }, [searchParams]);
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-600"></div>
        <p className="mt-4 text-gray-600">Processing your donation...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-md p-8 max-w-md w-full">
          <div className="text-center">
            <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
              <svg className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Something went wrong</h2>
            <p className="text-gray-600 mb-6">{error}</p>
            
            <div className="flex justify-center">
              <Link 
                href="/donate"
                className="bg-green-600 text-white px-4 py-2 rounded-md font-medium hover:bg-green-700"
              >
                Return to Donate Page
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-md p-8 max-w-lg w-full">
        <div className="text-center">
          <div className="mx-auto flex items-center justify-center h-16 w-16 rounded-full bg-green-100 mb-6">
            <svg className="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
          </div>
          
          <h2 className="text-3xl font-bold text-gray-900 mb-4">Thank You for Your Generous Donation!</h2>
          <p className="text-gray-600 mb-6 text-lg">
            Your contribution helps us create a more spiritual and ecological culture. 
            We are deeply grateful for your support in the process of human and planetary rebirth.
          </p>
          
          {donationDetails?.donorEmail && (
            <p className="text-gray-600 mb-6">
              A confirmation email has been sent to{' '}
              <span className="font-medium">{donationDetails.donorEmail}</span> with your donation receipt.
            </p>
          )}
          
          <div className="bg-green-50 border border-green-200 rounded-lg p-6 mb-6">
            <h3 className="text-lg font-semibold text-green-800 mb-4">Donation Details</h3>
            
            <div className="space-y-3 text-left">
              <div className="flex justify-between">
                <span className="text-green-700">Category:</span>
                <span className="font-medium text-green-800">{donationDetails?.donationCategory || 'General Donation'}</span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-green-700">Amount:</span>
                <span className="font-bold text-green-800 text-lg">${parseFloat(donationDetails?.amount || 0).toFixed(2)}</span>
              </div>
              
              {donationDetails?.donorName && donationDetails.donorName !== 'Anonymous' && (
                <div className="flex justify-between">
                  <span className="text-green-700">Donor:</span>
                  <span className="font-medium text-green-800">{donationDetails.donorName}</span>
                </div>
              )}
              
              {donationDetails?.orderNumber && (
                <div className="flex justify-between">
                  <span className="text-green-700">Reference:</span>
                  <span className="font-mono text-sm text-green-800">{donationDetails.orderNumber}</span>
                </div>
              )}
            </div>
          </div>
          
          {donationDetails?.message && (
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <h4 className="text-sm font-semibold text-blue-800 mb-2">Your Message:</h4>
              <p className="text-blue-700 text-sm italic">"{donationDetails.message}"</p>
            </div>
          )}
          
          <div className="border-t border-gray-200 pt-6">
            <p className="text-gray-600 mb-6 text-sm">
              Your donation supports our mission to foster spiritual growth and ecological awareness. 
              Together, we can create positive change in the world.
            </p>
            
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <Link 
                href="/"
                className="bg-gray-900 text-white px-6 py-3 rounded-md font-medium hover:bg-gray-800 transition-colors"
              >
                Return Home
              </Link>
              
              <Link 
                href="/about"
                className="bg-white text-gray-700 border border-gray-300 px-6 py-3 rounded-md font-medium hover:bg-gray-50 transition-colors"
              >
                Learn More About Our Mission
              </Link>
            </div>
          </div>
          
          <div className="mt-8 pt-6 border-t border-gray-200">
            <p className="text-xs text-gray-500">
              For questions about your donation, please contact us at{' '}
              <a href="mailto:support@satyoga.org" className="text-green-600 hover:text-green-700">
                support@satyoga.org
              </a>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
// === ./src/components/faq/FAQ.tsx ===
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';

// Types
export type FAQCategory = 'General questions' | 'Kitchen' | 'Overnight guests' | 'Transportation';

export interface FAQ {
  id: string;
  question: string;
  answer: string;
  category: FAQCategory;
}

// FAQ Search Bar Component
interface FAQSearchBarProps {
  onSearch: (query: string) => void;
}

const FAQSearchBar: React.FC<FAQSearchBarProps> = ({ onSearch }) => {
  const [query, setQuery] = useState('');
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setQuery(value);
    onSearch(value);
  };
  
  return (
    <div className="max-w-xl mx-auto mb-8">
      <div className="relative">
        <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <svg className="w-4 h-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
            <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
          </svg>
        </div>
        <input
          type="search"
          value={query}
          onChange={handleChange}
          className="block w-full p-3 pl-10 text-sm border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent"
          placeholder="Search for answers..."
        />
      </div>
    </div>
  );
};

// FAQ Category Tabs Component
interface FAQCategoryTabsProps {
  categories: FAQCategory[];
  activeCategory: FAQCategory | 'all';
  onCategoryChange: (category: FAQCategory | 'all') => void;
}

const FAQCategoryTabs: React.FC<FAQCategoryTabsProps> = ({
  categories,
  activeCategory,
  onCategoryChange,
}) => {
  return (
    <div className="border-b border-gray-200 mb-8">
      <div className="flex overflow-x-auto">
        <button
          onClick={() => onCategoryChange('all')}
          className={`whitespace-nowrap py-3 px-4 border-b-2 font-medium text-sm ${
            activeCategory === 'all'
              ? 'border-purple-600 text-purple-600'
              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
          }`}
        >
          View all
        </button>
        
        {categories.map((category) => (
          <button
            key={category}
            onClick={() => onCategoryChange(category)}
            className={`whitespace-nowrap py-3 px-4 border-b-2 font-medium text-sm ${
              activeCategory === category
                ? 'border-purple-600 text-purple-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  );
};

// FAQ Item Component
interface FAQItemProps {
  faq: FAQ;
  isOpen: boolean;
  onToggle: () => void;
}

const FAQItem: React.FC<FAQItemProps> = ({ faq, isOpen, onToggle }) => {
  return (
    <div className="border-b border-gray-200 py-4">
      <button
        onClick={onToggle}
        className="flex justify-between items-center w-full text-left focus:outline-none"
      >
        <h3 className="text-lg font-medium text-gray-900">{faq.question}</h3>
        <span className="ml-6 flex-shrink-0">
          <svg
            className={`w-5 h-5 transform ${isOpen ? 'rotate-180' : ''}`}
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fillRule="evenodd"
              d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              clipRule="evenodd"
            />
          </svg>
        </span>
      </button>
      
      {isOpen && (
        <div className="mt-2 text-gray-600">
          <div dangerouslySetInnerHTML={{ __html: faq.answer }} />
        </div>
      )}
    </div>
  );
};

// Main FAQ Page Component
interface FAQPageProps {
  initialFaqs?: FAQ[];
}

export const FAQPage: React.FC<FAQPageProps> = ({ initialFaqs = [] }) => {
  const [faqs, setFaqs] = useState<FAQ[]>(initialFaqs);
  const [filteredFaqs, setFilteredFaqs] = useState<FAQ[]>(initialFaqs);
  const [searchQuery, setSearchQuery] = useState('');
  const [activeCategory, setActiveCategory] = useState<FAQCategory | 'all'>('all');
  const [openFaqId, setOpenFaqId] = useState<string | null>(null);
  
  // Get all unique categories
  const categories: FAQCategory[] = Array.from(
    new Set(faqs.map((faq) => faq.category))
  ) as FAQCategory[];
  
  // Filter FAQs based on search query and category
  useEffect(() => {
    let result = [...faqs];
    
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(
        (faq) =>
          faq.question.toLowerCase().includes(query) ||
          faq.answer.toLowerCase().includes(query)
      );
    }
    
    if (activeCategory !== 'all') {
      result = result.filter((faq) => faq.category === activeCategory);
    }
    
    setFilteredFaqs(result);
  }, [searchQuery, activeCategory, faqs]);
  
  // Handle search
  const handleSearch = (query: string) => {
    setSearchQuery(query);
  };
  
  // Handle category change
  const handleCategoryChange = (category: FAQCategory | 'all') => {
    setActiveCategory(category);
  };
  
  // Handle FAQ toggle
  const handleFaqToggle = (faqId: string) => {
    setOpenFaqId((prevId) => (prevId === faqId ? null : faqId));
  };
  
  // Use mock data if no initialFaqs provided
  useEffect(() => {
    if (initialFaqs.length === 0) {
      // Mock data
      const mockFaqs: FAQ[] = [
        {
          id: '1',
          question: 'Can I come for a day trip?',
          answer: 'We are currently only hosting visitors at the ashram for a minimum stay of one month. Please read more about this program here: <b>Shakti Saturation Program</b>. We strongly encourage you to connect with our community online first to learn more about our approach before visiting.',
          category: 'General questions',
        },
        {
          id: '2',
          question: 'What is the weather like?',
          answer: 'The weather at the Ashram can be quite variable (cool and rainy to hot and humid). Mid-mornings are generally sunny and warm, with fog or no clouds coming in around noon to mid-afternoon that can produce chilly nights and mornings.<br><br>Altitude/elevation: 1500 meters (average)<br><br>All year long (rainy and dry season):<br>Average temp: 20 C° (68 F°)<br>Low temp: 15 C° (59 F°)<br>High temp: 28 C° (83 F°)',
          category: 'General questions',
        },
        {
          id: '3',
          question: 'What is your property like?',
          answer: 'We are located in the mountains of southern Costa Rica. Our land encompasses tropical cloud forests, pastures, springs, cascading rivers, organic gardens, and food forests. The terrain is hilly and forested for large expanses. Specially, we have now well cemented trails, roads, stairways that provide a variety of walking paths.',
          category: 'General questions',
        },
        {
          id: '4',
          question: 'Whom do I contact if I need more information?',
          answer: 'Please contact our Visit Coordinator.',
          category: 'General questions',
        },
        {
          id: '5',
          question: 'What languages are spoken at Sat Yoga Ashram?',
          answer: 'All our classes are offered in English though some classes and retreats will be offered with simultaneous translation into Spanish.',
          category: 'General questions',
        },
        {
          id: '6',
          question: 'How do I get to the Ashram?',
          answer: 'See our Arriving at the Ashram page for more information.',
          category: 'Transportation',
        },
        {
          id: '7',
          question: 'What is the closest airport?',
          answer: 'We recommend you fly into the San Jose Juan Santamaria International Airport (SJO).',
          category: 'Transportation',
        },
        {
          id: '8',
          question: 'Are there any scholarships available?',
          answer: 'We do not generally offer discounts to first time visitors, though we may have partial work trade opportunities for those who extend their visit beyond the first event or returning visitors if you meet the financial requirements and we have spaces available.',
          category: 'General questions',
        },
        {
          id: '9',
          question: 'How can I join the community?',
          answer: 'Joining our residential community is a deeply considered commitment, involving a minimum of two years, the acceptance of our serious seekers, looking to lead a monastic life, to begin with coming to a retreat as the first step. From this point we can discuss, in person, the process of joining our community.',
          category: 'General questions',
        },
        {
          id: '10',
          question: 'Can I bring my own food?',
          answer: 'We provide all meals during your stay. Our kitchen prepares vegetarian meals using organic produce from our garden when possible.',
          category: 'Kitchen',
        },
        {
          id: '11',
          question: 'What should I bring for my stay?',
          answer: 'We recommend bringing comfortable clothing suitable for meditation, yoga, and outdoor activities. The weather can be variable, so layers are recommended. Don\'t forget personal toiletries, a water bottle, and any medications you may need.',
          category: 'Overnight guests',
        },
      ];
      
      setFaqs(mockFaqs);
      setFilteredFaqs(mockFaqs);
    }
  }, [initialFaqs]);
  
  return (
    <div className="bg-gray-100">
      {/* Hero Section */}
      <div className="bg-gray-700 text-white py-16">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl font-bold mb-4">FAQs</h1>
          <FAQSearchBar onSearch={handleSearch} />
        </div>
      </div>
      
      {/* FAQ Content */}
      <div className="container mx-auto px-4 py-8">
        <FAQCategoryTabs
          categories={categories}
          activeCategory={activeCategory}
          onCategoryChange={handleCategoryChange}
        />
        
        <div className="max-w-3xl mx-auto">
          {filteredFaqs.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-500">No FAQs found matching your search criteria.</p>
            </div>
          ) : (
            <div className="space-y-0">
              {filteredFaqs.map((faq) => (
                <FAQItem
                  key={faq.id}
                  faq={faq}
                  isOpen={openFaqId === faq.id}
                  onToggle={() => handleFaqToggle(faq.id)}
                />
              ))}
            </div>
          )}
        </div>
        
        {/* Contact Section */}
        <div className="max-w-lg mx-auto mt-16 text-center">
          <h2 className="text-2xl font-bold mb-4">Still have questions?</h2>
          <p className="text-gray-600 mb-6">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          <Link href="/contact" className="inline-block bg-gray-900 text-white rounded-md px-6 py-3 font-medium hover:bg-gray-800">
            Contact
          </Link>
        </div>
      </div>
    </div>
  );
};


// === ./src/components/forms/application-form.tsx ===
// components/forms/application-form.tsx
'use client'

import { useForm } from "react-hook-form"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Form } from "@/components/ui/form"
import { Progress } from "@/components/ui/progress"
import { useState } from "react"
import { BasicInfoSection, PersonalEssaySection, MembershipSection, HealthSection,
         CovidPolicySection, AshramStaySection, SevadhariSection } from "./basic-info"

import { useToast } from "@/hooks/use-toast"

const sections = [
  "Basic Information",
  "Personal Essay",
  "Membership & Teachings",
  "Health Information",
  "Covid Policy",
  "Ashram Stay",
  "Sevadhari Questions"
]

export function ApplicationForm() {
  const [currentSection, setCurrentSection] = useState(0)
  const { toast } = useToast()
  const [isSubmitting, setIsSubmitting] = useState(false)

  const form = useForm({
    defaultValues: {
      // Basic Info
      email: "",
      firstName: "",
      lastName: "",
      programType: "",
      programDate: "",
      gender: "",
      dateOfBirth: "",
      currentAge: "",
      phone: "",
      maritalStatus: "",
      nationality: "",
      residence: "",
      occupation: "",
      emergencyContact: {
        name: "",
        relationship: "",
        phone: "",
        email: "",
        address: ""
      },
      
      // Personal Essay
      personalEssay: "",
      
      // Membership
      connection: "",
      membershipStatus: "",
      membershipDuration: "",
      hasAttendedOnlineRetreats: "",
      pastOnlineRetreatsDetails: "",
      teachingsFamiliarity: "",
      booksRead: [],
      hasAtmanologySessions: "",
      atmanologySessionsDetails: "",
      spiritualPractice: "",
      
      // Health
      hasHealthConditions: "",
      healthConditionsDetails: "",
      hasMedications: "",
      medicationsDetails: "",
      hasPastSurgeries: "",
      pastSurgeriesDetails: "",
      hasAnaphylaxis: "",
      anaphylaxisDetails: "",
      hasMentalHealthHistory: "",
      mentalHealthDetails: "",
      hasOtherMedicalConcerns: "",
      otherMedicalConcernsDetails: "",
      hasDietaryRestrictions: "",
      dietaryRestrictionsDetails: "",
      hasAllergies: "",
      allergiesDetails: "",
      hasSleepingIssues: "",
      sleepingIssuesDetails: "",
      
      // Covid Policy
      isVaccinated: "",
      hasVaccinatedHousehold: "",
      vaccinatedHouseholdDetails: "",
      hasVaccinatedContact: "",
      vaccinatedContactDetails: "",
      hasMedicalFunds: "",
      hasCurrentDoctor: "",
      doctorContactDetails: "",
      
      // Ashram Stay
      agreesToGuidelines: "",
      guidelinesIssues: "",
      hasSmokingHistory: "",
      smokingHistoryDetails: "",
      hasProgramFunds: "",
      healthInsuranceStatus: "",

      // Sevadhari specific fields (only shown if programType === "sevadhari")
      passportNumber: "",
      sevadhariMotivation: "",
      strengthsWeaknesses: "",
      communityLivingThoughts: "",
      hasPastCommunityExperience: "",
      pastCommunityExperienceDetails: "",
      workSkills: [],
      workExperience: "",
      hasPsychologicalHistory: "",
      psychologicalHistoryDetails: "",
      commitmentLength: "",
      agreesToSchedule: "",
      scheduleIssuesDetails: "",
    }
  })

  const programType = form.watch("programType")
  const isSevadhariProgram = programType === "sevadhari"

  const onSubmit = async (data: any) => {
    if (currentSection < sections.length - 1) {
      setCurrentSection(current => current + 1)
      return
    }

    setIsSubmitting(true)

    try {
      const response = await fetch('/api/submit-application', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })

      if (!response.ok) {
        throw new Error('Failed to submit application')
      }

      toast({
        title: "Success",
        description: "Your application has been submitted successfully.",
      })

      // Optionally reset form or redirect
      // form.reset()
      // router.push('/thank-you')
      
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to submit your application. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }

    // Adjust total sections based on program type
    const totalSections = isSevadhariProgram ? sections.length : sections.length - 1


  const progress = ((currentSection + 1) / sections.length) * 100

  

  return (
    <div className="container mx-auto py-10">
      <Card className="max-w-4xl mx-auto">
        <CardHeader>
          <CardTitle>{sections[currentSection]}</CardTitle>
          <Progress value={progress} className="mt-2" />
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {currentSection === 0 && <BasicInfoSection form={form} />}
              {currentSection === 1 && <PersonalEssaySection form={form} />}
              {currentSection === 2 && <MembershipSection form={form} />}
              {currentSection === 3 && <HealthSection form={form} />}
              {currentSection === 4 && <CovidPolicySection form={form} />}
              {currentSection === 5 && <AshramStaySection form={form} />}
              {isSevadhariProgram && currentSection === 6 && <SevadhariSection form={form} />}

              <div className="flex justify-between mt-6">
                <Button 
                  type="button" 
                  variant="outline"
                  onClick={() => setCurrentSection(current => Math.max(0, current - 1))}
                  disabled={currentSection === 0}
                >
                  Previous
                </Button>
                <Button type="submit" disabled={isSubmitting}>
          {isSubmitting 
            ? 'Submitting...' 
            : currentSection === (isSevadhariProgram ? sections.length - 1 : sections.length - 2)
              ? 'Submit Application' 
              : 'Next'
          }
        </Button>

              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  )
}
// === ./src/components/forms/basic-info.tsx ===
// components/forms/basic-info-section.tsx
import { FormField, FormItem, FormLabel, FormControl, FormMessage } from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "../ui/textarea"
import { UseFormReturn } from "react-hook-form"
import { getProgramDates } from '@/lib/api'
import { useEffect, useState } from "react"

interface ProgramDate {
    id: number
    attributes: {
      start_date: string
      end_date: string
      program: string
    }
  }
  

//import { FormData } from "./application-form" // assuming we put the FormData interface there

/**
 * // types/form.ts

export interface FormData {
  // Basic Info
  email: string
  firstName: string
  lastName: string
  programType: string
  programDate: string
  gender: string
  dateOfBirth: string
  currentAge: number
  phone: string
  maritalStatus: string
  nationality: string
  residence: string
  occupation: string
  emergencyContact: {
    name: string
    relationship: string
    phone: string
    email: string
    address: string
  }
  
  // Personal Essay
  personalEssay: string
  
  // Membership
  connection: string
  membershipStatus: string
  membershipDuration: string
  hasAttendedOnlineRetreats: boolean
  pastOnlineRetreatsDetails: string
  teachingsFamiliarity: string
  booksRead: string[]
  hasAtmanologySessions: boolean
  atmanologySessionsDetails: string
  spiritualPractice: string
  
  // Health
  hasHealthConditions: boolean
  healthConditionsDetails: string
  hasMedications: boolean
  medicationsDetails: string
  hasPastSurgeries: boolean
  pastSurgeriesDetails: string
  hasAnaphylaxis: boolean
  anaphylaxisDetails: string
  hasMentalHealthHistory: boolean
  mentalHealthDetails: string
  hasOtherMedicalConcerns: boolean
  otherMedicalConcernsDetails: string
  hasDietaryRestrictions: boolean
  dietaryRestrictionsDetails: string
  hasAllergies: boolean
  allergiesDetails: string
  hasSleepingIssues: boolean
  sleepingIssuesDetails: string
  
  // Covid Policy
  isVaccinated: boolean
  hasVaccinatedHousehold: boolean
  vaccinatedHouseholdDetails: string
  hasVaccinatedContact: boolean
  vaccinatedContactDetails: string
  hasMedicalFunds: boolean
  hasCurrentDoctor: boolean
  doctorContactDetails: string
  
  // Ashram Stay
  agreesToGuidelines: boolean
  guidelinesIssues: string
  hasSmokingHistory: boolean
  smokingHistoryDetails: string
  hasProgramFunds: boolean
  healthInsuranceStatus: string

  // Sevadhari specific fields
  passportNumber: string
  sevadhariMotivation: string
  strengthsWeaknesses: string
  communityLivingThoughts: string
  hasPastCommunityExperience: boolean
  pastCommunityExperienceDetails: string
  workSkills: string[]
  workExperience: string
  hasPsychologicalHistory: boolean
  psychologicalHistoryDetails: string
  commitmentLength: string
  agreesToSchedule: boolean
  scheduleIssuesDetails: string
}
 */

interface SectionProps {
    form: UseFormReturn<any>
  }

export function BasicInfoSection({ form }: SectionProps) {
    const [programDates, setProgramDates] = useState<ProgramDate[]>([])
    const programType = form.watch('programType')
  
    const formatDate = (isoDate: string) => {
        return new Date(isoDate).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })
      }
      
    useEffect(() => {
      if (programType) {
        getProgramDates(programType)
          .then(data => setProgramDates(data.data))
          .catch(error => console.error('Error:', error))
      }
    }, [programType])
    
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-2 gap-4">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email Address*</FormLabel>
              <FormControl>
                <Input placeholder="your@email.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="firstName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>First Name*</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="lastName"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Last Name*</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="programType"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Program Type*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select a program" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="shakti">Shakti Saturation Month</SelectItem>
                  <SelectItem value="sevadhari">Sevadhari Program</SelectItem>
                  <SelectItem value="darshan">Darshan Retreat</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

<FormField
  control={form.control}
  name="programDate"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Program Date*</FormLabel>
      <Select onValueChange={field.onChange} defaultValue={field.value}>
        <FormControl>
          <SelectTrigger>
            <SelectValue placeholder="Select program dates" />
          </SelectTrigger>
        </FormControl>
        <SelectContent>
          {programDates.map((date) => (
            <SelectItem key={date.id} value={date.id.toString()}>
              {formatDate(date.attributes.start_date)} - {formatDate(date.attributes.end_date)}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      <FormMessage />
    </FormItem>
  )}
/>

        <FormField
          control={form.control}
          name="gender"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Gender*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select gender" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="male">Male</SelectItem>
                  <SelectItem value="female">Female</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="dateOfBirth"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Date of Birth*</FormLabel>
              <FormControl>
                <Input type="date" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="phone"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Phone Number*</FormLabel>
              <FormControl>
                <Input type="tel" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="maritalStatus"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Marital Status*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select status" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="single">Single</SelectItem>
                  <SelectItem value="married">Married</SelectItem>
                  <SelectItem value="widowed">Widowed</SelectItem>
                  <SelectItem value="divorced">Divorced</SelectItem>
                  <SelectItem value="separated">Separated</SelectItem>
                  <SelectItem value="partnership">Partnership</SelectItem>
                  <SelectItem value="celibate">Celibate</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="nationality"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Nationality*</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="residence"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Residence (City, State/Province, Country)*</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="occupation"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Occupation*</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
    </div>
  )
}

// components/forms/personal-essay-section.tsx
export function PersonalEssaySection({ form }: SectionProps) {
  return (
    <div className="space-y-6">
      <FormField
        control={form.control}
        name="personalEssay"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Please tell us why you wish to participate in a Sat Yoga Ashram event*</FormLabel>
            <FormControl>
              <Textarea 
                placeholder="Write simply and from the heart, without worrying about language or style. You can give us a snapshot of your current life situation and how you envision your visit can be of benefit to you."
                className="min-h-[200px]"
                {...field} 
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  )
}

// components/forms/membership-section.tsx
export function MembershipSection({ form }: SectionProps) {
  return (
    <div className="space-y-6">
      <FormField
        control={form.control}
        name="connection"
        render={({ field }) => (
          <FormItem>
            <FormLabel>How did you hear about us?*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select source" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                <SelectItem value="past_visitor">Past Visitor</SelectItem>
                <SelectItem value="word_of_mouth">Word of Mouth</SelectItem>
                <SelectItem value="internet_search">Internet Search</SelectItem>
                <SelectItem value="newsletter">Newsletter</SelectItem>
                <SelectItem value="youtube">YouTube</SelectItem>
                <SelectItem value="facebook">Facebook</SelectItem>
                <SelectItem value="twitter">Twitter</SelectItem>
                <SelectItem value="instagram">Instagram</SelectItem>
                <SelectItem value="podcast">Podcast</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="membershipStatus"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Are you currently a Sat Yoga online member?*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select membership status" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                <SelectItem value="free_trial">Yes, I am on a free trial</SelectItem>
                <SelectItem value="gyani">Yes, I am a Gyani Member</SelectItem>
                <SelectItem value="vigyani">Yes, I am a Vigyani Member</SelectItem>
                <SelectItem value="pragyani">Yes, I am a Pragyani Member</SelectItem>
                <SelectItem value="none">No, I am not currently an online member</SelectItem>
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      <FormField
        control={form.control}
        name="hasAttendedOnlineRetreats"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Have you attended any of our past online retreats?*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select yes or no" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                <SelectItem value="yes">Yes</SelectItem>
                <SelectItem value="no">No</SelectItem>
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      {form.watch('hasAttendedOnlineRetreats') === 'yes' && (
        <FormField
          control={form.control}
          name="pastOnlineRetreatsDetails"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Please specify which retreats and dates</FormLabel>
              <FormControl>
                <Textarea {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      )}

      <FormField
        control={form.control}
        name="teachingsFamiliarity"
        render={({ field }) => (
          <FormItem>
            <FormLabel>How familiar are you with Shunyamurti's teachings?*</FormLabel>
            <FormControl>
              <Textarea 
                placeholder="Have you watched Shunyamurti's teachings online? What drew you to them and how have they helped you in your life?"
                {...field} 
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </div>
  )
}

// components/forms/health-section.tsx
export function HealthSection({ form }: SectionProps) {
  return (
    <div className="space-y-6">
      <FormField
        control={form.control}
        name="hasHealthConditions"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Do you have any medical/health conditions?*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select yes or no" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                <SelectItem value="yes">Yes</SelectItem>
                <SelectItem value="no">No</SelectItem>
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      {form.watch('hasHealthConditions') === 'yes' && (
        <FormField
          control={form.control}
          name="healthConditionsDetails"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Please describe your health conditions</FormLabel>
              <FormControl>
                <Textarea {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      )}

      <FormField
        control={form.control}
        name="hasMedications"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Are you currently taking any medications?*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select yes or no" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                <SelectItem value="yes">Yes</SelectItem>
                <SelectItem value="no">No</SelectItem>
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      {form.watch('hasMedications') === 'yes' && (
        <FormField
          control={form.control}
          name="medicationsDetails"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Please list your medications</FormLabel>
              <FormControl>
                <Textarea {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      )}

      <FormField
        control={form.control}
        name="hasDietaryRestrictions"
        render={({ field }) => (
          <FormItem>
            <FormLabel>Do you have any dietary restrictions?*</FormLabel>
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <FormControl>
                <SelectTrigger>
                  <SelectValue placeholder="Select yes or no" />
                </SelectTrigger>
              </FormControl>
              <SelectContent>
                <SelectItem value="yes">Yes</SelectItem>
                <SelectItem value="no">No</SelectItem>
              </SelectContent>
            </Select>
            <FormMessage />
          </FormItem>
        )}
      />

      {form.watch('hasDietaryRestrictions') === 'yes' && (
        <FormField
          control={form.control}
          name="dietaryRestrictionsDetails"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Please describe your dietary restrictions</FormLabel>
              <FormControl>
                <Textarea {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      )}
    </div>
  )
}

// components/forms/covid-policy-section.tsx (continued)
export function CovidPolicySection({ form }: SectionProps) {
    return (
      <div className="space-y-6">
        <div className="bg-muted p-4 rounded-lg mb-6">
          <p className="text-sm mb-2">Our Ashram's Policy Regarding Those Who Received an Injection:</p>
          <p className="text-sm mb-2">
            The welfare of every soul is precious to us. We have a responsibility to provide the healthiest 
            environment possible for our community and all our visitors.
          </p>
          <p className="text-sm">
            Until we discover sufficient credible contradictory evidence, or an antidote, our duty requires 
            protecting our uninjected community and retreatants.
          </p>
        </div>
  
        <FormField
          control={form.control}
          name="isVaccinated"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Have you received any version of the covid injection?*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select your status" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="no">No, I have not taken the shot nor am planning to take it</SelectItem>
                  <SelectItem value="yes">Yes, I have taken the shot or have planned to do so</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="hasVaccinatedHousehold"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Have you been living with anyone who has had the injection?*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select yes or no" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="yes">Yes</SelectItem>
                  <SelectItem value="no">No</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
  
        {form.watch('hasVaccinatedHousehold') === 'yes' && (
          <FormField
            control={form.control}
            name="vaccinatedHouseholdDetails"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Please provide details about duration and relationship</FormLabel>
                <FormControl>
                  <Textarea {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        )}
      </div>
    )
  }
  
  // components/forms/ashram-stay-section.tsx
  export function AshramStaySection({ form }: SectionProps) {
    return (
      <div className="space-y-6">
        <FormField
          control={form.control}
          name="agreesToGuidelines"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Do you agree to follow our Ashram Guidelines during your stay?*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select your answer" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="yes">Yes, I have read and agree to follow the Ashram Guidelines</SelectItem>
                  <SelectItem value="no">No, I will have trouble following the Ashram Guidelines</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
  
        {form.watch('agreesToGuidelines') === 'no' && (
          <FormField
            control={form.control}
            name="guidelinesIssues"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Please explain what issues you may have with the guidelines</FormLabel>
                <FormControl>
                  <Textarea {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        )}
  
        <FormField
          control={form.control}
          name="hasSmokingHistory"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Do you have any smoking history?*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select yes or no" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="yes">Yes</SelectItem>
                  <SelectItem value="no">No</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
  
        {form.watch('hasSmokingHistory') === 'yes' && (
          <FormField
            control={form.control}
            name="smokingHistoryDetails"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Please provide details about your smoking history</FormLabel>
                <FormControl>
                  <Textarea 
                    placeholder="Include if you are currently trying to quit or using nicotine patches/gum"
                    {...field} 
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        )}
  
        <FormField
          control={form.control}
          name="hasProgramFunds"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Do you have funds available to cover the program contribution?*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select yes or no" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="yes">Yes</SelectItem>
                  <SelectItem value="no">No</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="healthInsuranceStatus"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Do you have international health insurance?*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select your insurance status" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="yes">Yes</SelectItem>
                  <SelectItem value="no">No</SelectItem>
                  <SelectItem value="will_get">Not currently, but I would be able to get insurance if accepted</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
    )
  }
  
  export function SevadhariSection({ form }: SectionProps) {
    return (
      <div className="space-y-6">
        <FormField
          control={form.control}
          name="passportNumber"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Passport Number*</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="sevadhariMotivation"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Why do you desire to study and serve at the Sat Yoga Ashram?*</FormLabel>
              <FormControl>
                <Textarea 
                  placeholder="What do you hope to gain from your experience?"
                  className="min-h-[100px]"
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="strengthsWeaknesses"
          render={({ field }) => (
            <FormItem>
              <FormLabel>How would you describe your strengths and weaknesses?*</FormLabel>
              <FormControl>
                <Textarea 
                  placeholder="Please tell us about your interpersonal skills, how you deal with challenges, characteristics, talents, etc."
                  className="min-h-[100px]"
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="communityLivingThoughts"
          render={({ field }) => (
            <FormItem>
              <FormLabel>What does it mean for you to live in community?*</FormLabel>
              <FormControl>
                <Textarea 
                  placeholder="How would it challenge you? How would it help you grow? Are you comfortable with living and working in close quarters with others?"
                  className="min-h-[100px]"
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="commitmentLength"
          render={({ field }) => (
            <FormItem>
              <FormLabel>How long are you able to commit for?*</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select commitment length" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="three_months">3 months</SelectItem>
                  <SelectItem value="six_months">6 months</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="workSkills"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Areas you are most qualified to work in:*</FormLabel>
              <Select onValueChange={(value) => field.onChange([...field.value, value])} defaultValue="">
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select skills" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="administration">Administration</SelectItem>
                  <SelectItem value="agriculture">Agriculture</SelectItem>
                  <SelectItem value="fundraising">Fundraising</SelectItem>
                  <SelectItem value="gardens">Gardens & Landscaping</SelectItem>
                  <SelectItem value="healing">Healing & Healthcare</SelectItem>
                  <SelectItem value="housekeeping">Housekeeping & Hospitality</SelectItem>
                  <SelectItem value="infrastructure">Infrastructure & Construction</SelectItem>
                  <SelectItem value="kitchen">Kitchen & Food Processing</SelectItem>
                  <SelectItem value="media">Media & IT</SelectItem>
                  <SelectItem value="outreach">Outreach & Publications</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />
  
        <FormField
          control={form.control}
          name="workExperience"
          render={({ field }) => (
            <FormItem>
              <FormLabel>What experience, training, or certifications do you have in the areas you chose?*</FormLabel>
              <FormControl>
                <Textarea 
                  className="min-h-[100px]"
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
      </div>
    )
  }
  
// === ./src/components/homepage/Homepage.tsx ===
import React from 'react';
import Link from 'next/link';
import Image from 'next/image';
import Hero from '@/components/sections/Hero';
import ContentSection from '@/components/sections/ContentSection';
import CtaSection from '@/components/sections/CtaSection';
import LearningTabs from '@/components/sections/LearningTabs';
import BlogSection from '@/components/sections/BlogSection';

export default function HomePage({ data }: any) {
  // Structure the data from Strapi
  const {
    hero,
    shunyamurtiSection,
    aboutSection,
    learningOptions,
    membershipCta,
    blogPosts
  } = data;
  
  return (
    <>
      {/* Hero Section */}
      <Hero
        heading={hero.heading}
        content={hero.content}
        buttonText={hero.buttonText}
        buttonLink={hero.buttonLink}
        darkMode={true}
        backgroundImage={hero.backgroundImage?.url || "/placeholder.png"}
      />
      
      {/* Path to Freedom Section */}
      <ContentSection
        eyebrow={aboutSection.eyebrow}
        heading={aboutSection.heading}
        content={aboutSection.content}
        buttons={[
          { label: "Discover Sat Yoga", url: "/about", primary: true }
        ]}
        imagePosition="left"
        imageUrl={aboutSection.image?.url || "/placeholder.png"}
      />
      
      {/* Shunyamurti Section */}
      <ContentSection
        eyebrow={shunyamurtiSection.eyebrow}
        heading={shunyamurtiSection.heading}
        content={shunyamurtiSection.content}
        buttons={[
          { label: "Learn more", url: "/about/shunyamurti", primary: true }
        ]}
        imagePosition="right"
        imageUrl={shunyamurtiSection.image?.url || "/placeholder.png"}
      />
      
      {/* Learning Tabs Section */}
      <LearningTabs
        title={learningOptions.title}
        description={learningOptions.description}
        tabs={learningOptions.tabs}
      />
      
      {/* Stay Connected Section */}
      <ContentSection
        eyebrow="A Seamless Experience Across Devices"
        heading="Stay Connected to Wisdom Anytime, Anywhere"
        content="Whether on your phone, tablet, or desktop, our platform adapts to your lifestyle. Enjoy a fully responsive experience that lets you engage with courses, live sessions, and community discussions without interruption."
        buttons={[
          { label: "Start the journey", url: "/signup", primary: true }
        ]}
        imagePosition="left"
        imageUrl="/placeholder.png"
      />
      
      {/* Membership CTA */}
      <CtaSection
        eyebrow={membershipCta.eyebrow}
        heading={membershipCta.heading}
        description={membershipCta.description}
        primaryButtonText={membershipCta.primaryButtonText}
        primaryButtonLink={membershipCta.primaryButtonLink}
        secondaryButtonText={membershipCta.secondaryButtonText}
        secondaryButtonLink={membershipCta.secondaryButtonLink}
      />
      
      {/* Blog Section */}
      <BlogSection 
        posts={blogPosts}
        title="Welcome to our blog"
        description="Explore transformative insights from Sat Yoga, including deep reflections, spiritual guidance, and practical wisdom to support your journey of self-discovery and liberation."
        viewAllLink="/blog"
      />
    </>
  );
}
// === ./src/components/layout/Footer.tsx ===
'use client';

import { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';

interface FooterProps {
  // Any props you might want to pass to the footer
  newsletterEnabled?: boolean;
}

const Footer: React.FC<FooterProps> = ({ newsletterEnabled = true }) => {
  const [email, setEmail] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle the newsletter subscription logic here
    console.log('Subscribing email:', email);
    // TODO: Connect to your API or email service
    setEmail('');
  };

  const currentYear = new Date().getFullYear();

  return (
    <footer className="bg-[#300001] text-white pt-12 pb-6">
      <div className="container mx-auto px-4">
        {/* Newsletter Section */}
        {newsletterEnabled && (
          <>
            <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-12 gap-8">
              <div className="max-w-md">
                <h2 
                  className="text-xl font-bold mb-2"
                  style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
                >
                  Be a part of our community
                </h2>
                <p 
                  className="text-[#FAF8F1] opacity-80"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Sign Up for our Newsletter
                </p>
              </div>
              
              <form onSubmit={handleSubmit} className="w-full md:w-auto flex flex-col md:flex-row gap-3">
                <input
                  type="email"
                  placeholder="Enter your email"
                  className="px-4 py-3 bg-transparent border border-[#FAF8F1] border-opacity-30 rounded-md text-[#FAF8F1] placeholder-[#FAF8F1] placeholder-opacity-60 w-full md:w-auto min-w-[320px] focus:outline-none focus:ring-2 focus:ring-[#FAF8F1] focus:border-transparent"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                />
                <button
                  type="submit"
                  className="px-6 py-3 bg-[#FAF8F1] text-[#300001] rounded-md font-medium hover:bg-white transition-colors"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Subscribe
                </button>
              </form>
            </div>
            
            <hr className="border-[#FAF8F1] border-opacity-20 mb-12" />
          </>
        )}
        
        {/* Footer Links */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8 mb-12">
          {/* About */}
          <div>
            <h3 
              className="text-lg font-bold mb-4"
              style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
            >
              About
            </h3>
            <ul className="space-y-2">
              <li>
                <Link 
                  href="/about/shunyamurti" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Shunyamurti
                </Link>
              </li>
              <li>
                <Link 
                  href="/about/asharam" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Sat Yoga
                </Link>
              </li>
              <li>
                <Link 
                  href="/about/community" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Our Ashram
                </Link>
              </li>
            </ul>
          </div>
          
          {/* Retreats */}
          <div>
            <h3 
              className="text-lg font-bold mb-4"
              style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
            >
              Retreats
            </h3>
            <ul className="space-y-2">
              <li>
                <Link 
                  href="/retreats/onsite" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Ashram Retreats
                </Link>
              </li>
              <li>
                <Link 
                  href="/retreats/online" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Online retreats
                </Link>
              </li>
              <li>
                <Link 
                  href="/retreats/faq" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  FAQs
                </Link>
              </li>
            </ul>
          </div>
          
          {/* Learn Online */}
          <div>
            <h3 
              className="text-lg font-bold mb-4"
              style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
            >
              Learn Online
            </h3>
            <ul className="space-y-2">
              <li>
                <Link 
                  href="/teachings" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Free Teachings Library
                </Link>
              </li>
              <li>
                <Link 
                  href="/learn/courses" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Courses
                </Link>
              </li>
              <li>
                <Link 
                  href="/learn/more" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  More Online Learning Options
                </Link>
              </li>
            </ul>
          </div>
          
          {/* Membership */}
          <div>
            <h3 
              className="text-lg font-bold mb-4"
              style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
            >
              Membership
            </h3>
            <ul className="space-y-2">
              <li>
                <Link 
                  href="/calendar" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Calendar
                </Link>
              </li>
              <li>
                <Link 
                  href="/store" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Store
                </Link>
              </li>
              <li>
                <Link 
                  href="/blog" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Blog
                </Link>
              </li>
              <li>
                <Link 
                  href="/donate" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Donate
                </Link>
              </li>
              <li>
                <Link 
                  href="/contact" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  Contact us
                </Link>
              </li>
            </ul>
          </div>
          
          {/* Social Media */}
          <div>
            <h3 
              className="text-lg font-bold mb-4"
              style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
            >
              Follow Us
            </h3>
            <ul className="space-y-2">
              <li>
                <Link 
                  href="https://youtube.com" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity flex items-center"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />
                  </svg>
                  Youtube
                </Link>
              </li>
              <li>
                <Link 
                  href="https://instagram.com" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity flex items-center"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path fillRule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z" clipRule="evenodd" />
                  </svg>
                  Instagram
                </Link>
              </li>
              <li>
                <Link 
                  href="https://facebook.com" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity flex items-center"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path fillRule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clipRule="evenodd" />
                  </svg>
                  Facebook
                </Link>
              </li>
              <li>
                <Link 
                  href="https://spotify.com" 
                  className="text-[#FAF8F1] opacity-80 hover:opacity-100 transition-opacity flex items-center"
                  style={{ fontFamily: 'Avenir Next, sans-serif' }}
                >
                  <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.48.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.42 1.56-.301.421-1.02.599-1.559.3z"/>
                  </svg>
                  Spotify
                </Link>
              </li>
            </ul>
          </div>
        </div>
        
        {/* Footer Bottom */}
        <div className="border-t border-[#FAF8F1] border-opacity-20 pt-6 flex flex-col md:flex-row justify-between items-center">
          <div className="flex items-center mb-4 md:mb-0">
            <Image
              src="/logo.png"
              alt="SAT YOGA"
              width={100}
              height={32}
              className="h-6 w-auto mr-4"
            />
            <span 
              className="text-[#FAF8F1] opacity-60"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
            >
              © {currentYear} Satyoga. All rights reserved.
            </span>
          </div>
          
          <div className="flex space-x-6">
            <Link 
              href="/privacy" 
              className="text-[#FAF8F1] opacity-60 hover:opacity-100 transition-opacity"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
            >
              Privacy Policy
            </Link>
            <Link 
              href="/booking" 
              className="text-[#FAF8F1] opacity-60 hover:opacity-100 transition-opacity"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
            >
              Booking Policy
            </Link>
            <Link 
              href="/guidelines" 
              className="text-[#FAF8F1] opacity-60 hover:opacity-100 transition-opacity"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
            >
              Guidelines
            </Link>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;
// === ./src/components/layout/Header.tsx ===
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { usePathname } from 'next/navigation';
import { XMarkIcon } from '@heroicons/react/24/outline';
import UserNavigation from './UserNavigation';

interface MenuItem {
  label: string;
  url: string;
  children?: {
    title: string;
    description: string;
    url: string;
    icon?: string;
  }[];
}

interface HeaderProps {
  navigation?: MenuItem[];
}

const Header: React.FC<HeaderProps> = ({ navigation }) => {
  const [showBanner, setShowBanner] = useState(true);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeDropdown, setActiveDropdown] = useState<string | null>(null);
  const pathname = usePathname();

  // Default navigation if none provided
  const defaultNavigation: MenuItem[] = [
    {
      label: 'Home',
      url: '/',
    },
    {
      label: 'About',
      url: '/about',
      children: [
        {
          title: 'Shunyamurti',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/about/shunyamurti',
          icon: 'CubeIcon',
        },
        {
          title: 'The Asharam',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/about/asharam',
          icon: 'CubeIcon',
        },
        {
          title: 'The community',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/about/community',
          icon: 'CubeIcon',
        },
      ],
    },
    {
      label: 'Retreats',
      url: '/retreats',
      children: [
        {
          title: 'Online retreats',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/retreats/online',
          icon: 'CubeIcon',
        },
        {
          title: 'Onsite retreats',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/retreats/onsite',
          icon: 'CubeIcon',
        },
        {
          title: 'FAQs',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/retreats/faqs',
          icon: 'CubeIcon',
        },
      ],
    },
    {
      label: 'Learn Online',
      url: '/learn-online',
      children: [
        {
          title: 'Teachings (SatYoga Tube)',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/teachings',
          icon: 'CubeIcon',
        },
        {
          title: 'Courses',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/learn-online/courses',
          icon: 'CubeIcon',
        },
        {
          title: 'More',
          description: 'Lorem ipsum dolor sit amet consectetur elit',
          url: '/learn-online/more',
          icon: 'CubeIcon',
        },
      ],
    },
    {
      label: 'Membership',
      url: '/membership',
    },
    {
      label: 'Calendar',
      url: '/calendar',
    },
    {
      label: 'Store',
      url: '/store',
    },
    {
      label: 'Blog',
      url: '/blog',
    },
  ];

  const navItems = navigation || defaultNavigation;

  // Close mobile menu when route changes
  useEffect(() => {
    setIsMenuOpen(false);
  }, [pathname]);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      // Only close if clicking outside the navigation area
      if (!event.target || !(event.target as Element).closest('nav')) {
        setActiveDropdown(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Toggle dropdown menu
  const handleDropdownToggle = (label: string) => {
    setActiveDropdown(prevState => (prevState === label ? null : label));
  };

  // Function to render the dropdown chevron
  const renderDropdownIcon = (label: string) => {
    const isOpen = activeDropdown === label;
    return (
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        className={`h-4 w-4 ml-1 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
        viewBox="0 0 20 20" 
        fill="currentColor"
      >
        <path 
          fillRule="evenodd" 
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" 
          clipRule="evenodd" 
        />
      </svg>
    );
  };

  // Function to render the cube icon
  const renderIcon = (iconName?: string) => {
    if (iconName === 'CubeIcon') {
      return (
        <svg
          className="w-6 h-6 text-gray-800"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={1.5}
            d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"
          />
        </svg>
      );
    }
    return null;
  };

  return (
    <header className="relative z-30">
      {/* Promotional Banner */}
      {showBanner && (
        <div className="relative bg-[#300001] text-center py-3 px-4 border-b border-[#4a0002]">
          <p className="text-sm font-medium text-[#FAF8F1]" style={{ fontFamily: 'Montserrat, sans-serif' }}>
            Free Meditation Course <Link href="/courses" className="font-bold underline ml-1 text-[#FAF8F1]">Enroll Now</Link>
          </p>
          <button
            type="button"
            className="absolute right-4 top-1/2 -translate-y-1/2 text-[#FAF8F1] hover:text-white"
            onClick={() => setShowBanner(false)}
          >
            <XMarkIcon className="h-5 w-5" aria-hidden="true" />
          </button>
        </div>
      )}

      {/* Main Navigation */}
      <div className="bg-[#FAF8F1] border-b border-gray-200 py-4">
        <div className="container mx-auto px-4 flex items-center justify-between">
          {/* Logo */}
          <Link href="/" className="flex-shrink-0">
            <Image
              src="/logo.png"
              alt="SAT YOGA"
              width={120}
              height={40}
              className="h-8 w-auto"
            />
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-8">
            {navItems.map((item) => (
              <div key={item.label} className="relative">
                {item.children ? (
                  // Item with dropdown
                  <button
                    onClick={() => handleDropdownToggle(item.label)}
                    className={`flex items-center py-2 text-sm font-medium transition-colors ${
                      activeDropdown === item.label || pathname.startsWith(item.url)
                        ? 'text-[#300001]'
                        : 'text-[#300001] hover:text-[#4a0002]'
                    }`}
                    style={{ fontFamily: 'Avenir Next, sans-serif' }}
                    aria-expanded={activeDropdown === item.label}
                  >
                    {item.label}
                    {renderDropdownIcon(item.label)}
                  </button>
                ) : (
                  // Regular link
                  <Link
                    href={item.url}
                    className={`py-2 text-sm font-medium transition-colors ${
                      pathname === item.url
                        ? 'text-[#300001]'
                        : 'text-[#300001] hover:text-[#4a0002]'
                    }`}
                    style={{ fontFamily: 'Avenir Next, sans-serif' }}
                  >
                    {item.label}
                  </Link>
                )}
              </div>
            ))}
          </nav>

          {/* Right Side Actions */}
          <div className="flex items-center space-x-4">
            {/* Search Button */}
            <button 
              className="p-2 text-[#300001] hover:text-[#4a0002] transition-colors" 
              aria-label="Search"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
            
            {/* User Navigation (Login/Logout/Profile) */}
            <UserNavigation />
            
            {/* Mobile Menu Button */}
            <button 
              className="md:hidden p-2 text-[#300001] hover:text-[#4a0002] transition-colors" 
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              aria-label="Menu"
              aria-expanded={isMenuOpen}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      {/* Dropdown Menus - Full Width */}
      {activeDropdown && (
        <div className="absolute left-0 right-0 bg-[#FAF8F1] border-b border-gray-200 shadow-sm z-40">
          <div className="container mx-auto px-4 py-8">
            <div className="grid grid-cols-3 gap-12">
              {navItems.find(item => item.label === activeDropdown)?.children?.map((child, index) => (
                <Link 
                  key={index} 
                  href={child.url}
                  className="flex items-start gap-4 group"
                  onClick={() => setActiveDropdown(null)}
                >
                  <div className="flex-shrink-0 mt-1">
                    {renderIcon(child.icon)}
                  </div>
                  <div>
                    <p className="font-medium text-[#300001] group-hover:text-[#4a0002] transition-colors" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
                      {child.title}
                    </p>
                    {child.description && (
                      <p className="text-sm text-gray-600 mt-1" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
                        {child.description}
                      </p>
                    )}
                  </div>
                </Link>
              ))}
            </div>
            
            {/* Sign Up Banner inside dropdown */}
            <div className="mt-8 pt-6 border-t border-gray-200 text-center">
              <p className="text-sm" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
                Ready to get started? <Link href="/signup" className="font-medium text-[#300001] hover:text-[#4a0002] transition-colors">Sign up for free</Link>
              </p>
            </div>
          </div>
        </div>
      )}
        
      {/* Mobile Menu */}
      {isMenuOpen && (
        <div className="md:hidden bg-[#FAF8F1] border-t border-gray-200 z-30">
          <nav className="flex flex-col px-4 py-3 space-y-3">
            {navItems.map((item) => (
              <div key={item.label}>
                {item.children ? (
                  <>
                    <button
                      onClick={() => handleDropdownToggle(item.label)}
                      className="flex items-center justify-between w-full py-2 text-left text-[#300001]"
                      style={{ fontFamily: 'Avenir Next, sans-serif' }}
                      aria-expanded={activeDropdown === item.label}
                    >
                      <span className={activeDropdown === item.label ? 'text-[#4a0002]' : 'text-[#300001]'}>
                        {item.label}
                      </span>
                      {renderDropdownIcon(item.label)}
                    </button>
                    {activeDropdown === item.label && (
                      <div className="pl-4 mt-2 mb-2 space-y-3 border-l border-gray-300">
                        {item.children.map((child, index) => (
                          <Link
                            key={index}
                            href={child.url}
                            className="flex py-2 text-gray-600 hover:text-[#300001] transition-colors"
                            style={{ fontFamily: 'Avenir Next, sans-serif' }}
                            onClick={() => setIsMenuOpen(false)}
                          >
                            <div>
                              <p className="font-medium">{child.title}</p>
                              {child.description && (
                                <p className="text-sm text-gray-500 mt-1">
                                  {child.description}
                                </p>
                              )}
                            </div>
                          </Link>
                        ))}
                      </div>
                    )}
                  </>
                ) : (
                  <Link
                    href={item.url}
                    className={`block py-2 transition-colors ${
                      pathname === item.url ? 'text-[#300001]' : 'text-[#300001] hover:text-[#4a0002]'
                    }`}
                    style={{ fontFamily: 'Avenir Next, sans-serif' }}
                    onClick={() => setIsMenuOpen(false)}
                  >
                    {item.label}
                  </Link>
                )}
              </div>
            ))}
            
            <div className="flex space-x-2 pt-3 border-t border-gray-300">
              <Link 
                href="/donate" 
                className="bg-white text-[#300001] border border-[#300001] rounded-md px-4 py-2 text-sm font-medium hover:bg-[#300001] hover:text-white transition-colors flex-1 text-center"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                Donate
              </Link>
              <Link 
                href="/login" 
                className="bg-[#300001] text-white rounded-md px-4 py-2 text-sm font-medium hover:bg-[#4a0002] transition-colors flex-1 text-center"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                Login
              </Link>
            </div>
          </nav>
        </div>
      )}
    </header>
  );
};

export default Header;
// === ./src/components/layout/LayoutWrapper.tsx ===
'use client';

import { usePathname } from 'next/navigation';
import Header from './Header';
import Footer from './Footer';

export default function LayoutWrapper({ children }: { children: React.ReactNode }) {
  const pathname = usePathname();
  
  // Check if the current path is a auth page
  const isAuthPage = 
    pathname === '/login' || 
    pathname === '/signup' || 
    pathname === '/forgot-password' ||
    pathname === '/reset-password' ||
    pathname.startsWith('/dashboard');
  
  return (
    <>
      {!isAuthPage && <Header />}
      <main className="flex-grow">
        {children}
      </main>
      {!isAuthPage && <Footer />}
    </>
  );
}
// === ./src/components/layout/UserNavigation.tsx ===
'use client';

import { useState } from 'react';
import Link from 'next/link';
import { useSession, signOut } from 'next-auth/react';
import Image from 'next/image';

export default function UserNavigation() {
  const { data: session, status } = useSession();
  const [showUserMenu, setShowUserMenu] = useState(false);
  
  const isAuthenticated = status === 'authenticated';
  const isLoading = status === 'loading';
  
  if (isLoading) {
    return (
      <div className="flex items-center space-x-4">
        <div className="h-10 w-24 bg-gray-200 animate-pulse rounded-md"></div>
      </div>
    );
  }
   
  if (!isAuthenticated) {
    return (
      <div className="flex items-center space-x-4">
        <Link 
          href="/donate" 
          className="hidden md:block bg-white text-[#300001] border border-[#300001] rounded-md px-4 py-2 text-sm font-medium hover:bg-[#300001] hover:text-white transition-colors"
          style={{ fontFamily: 'Avenir Next, sans-serif' }}
        >
          Donate
        </Link>
        
        <Link 
          href="/login" 
          className="hidden md:block bg-[#300001] text-white rounded-md px-4 py-2 text-sm font-medium hover:bg-[#4a0002] transition-colors"
          style={{ fontFamily: 'Avenir Next, sans-serif' }}
        >
          Login
        </Link>
      </div>
    );
  }
  
  // If authenticated, show user menu
  return (
    <div className="flex items-center space-x-4">
      <Link 
        href="/donate" 
        className="hidden md:block bg-white text-[#300001] border border-[#300001] rounded-md px-4 py-2 text-sm font-medium hover:bg-[#300001] hover:text-white transition-colors"
        style={{ fontFamily: 'Avenir Next, sans-serif' }}
      >
        Donate
      </Link>
      
      <div className="relative">
        <button
          type="button"
          className="flex items-center gap-2 rounded-full bg-white p-1 text-[#300001] hover:text-[#4a0002] focus:outline-none transition-colors"
          onClick={() => setShowUserMenu(!showUserMenu)}
        >
          <span className="hidden md:block text-sm font-medium" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
            {session?.user?.name || 'My Account'}
          </span>
          <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center overflow-hidden">
            {session?.user?.image ? (
              <Image 
                src={session.user.image}
                alt="Profile"
                width={32}
                height={32}
                className="h-full w-full object-cover"
              />
            ) : (
              <span className="text-sm font-medium text-gray-600" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
                {session?.user?.name?.charAt(0) || session?.user?.email?.charAt(0) || 'U'}
              </span>
            )}
          </div>
        </button>
        
        {showUserMenu && (
          <div className="absolute right-0 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50">
            {session?.user?.role === 'admin' && (
              <Link
                href="/dashboard/admin"
                className="block px-4 py-2 text-sm text-[#300001] hover:bg-gray-100 transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
                onClick={() => setShowUserMenu(false)}
              >
                Admin Dashboard
              </Link>
            )}
            <Link
              href="/dashboard"
              className="block px-4 py-2 text-sm text-[#300001] hover:bg-gray-100 transition-colors"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
              onClick={() => setShowUserMenu(false)}
            >
              Dashboard
            </Link>
            <Link
              href="/dashboard/settings"
              className="block px-4 py-2 text-sm text-[#300001] hover:bg-gray-100 transition-colors"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
              onClick={() => setShowUserMenu(false)}
            >
              Settings
            </Link>
            <button
              className="block w-full px-4 py-2 text-left text-sm text-[#300001] hover:bg-gray-100 transition-colors"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
              onClick={() => {
                setShowUserMenu(false);
                signOut({ callbackUrl: '/' });
              }}
            >
              Sign out
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
// === ./src/components/membership/MembershipCheckoutClient.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { useSession, signIn } from 'next-auth/react';
import { formatTilopayData, processPayment, processRecurrentPayment } from '@/lib/services/tilopay';

// Import components
import AccountSection from './checkout/AccountSection';
import PlanSelectionSection from './checkout/PlanSelectionSection';
import PaymentInfoSection from './checkout/PaymentInfoSection';
import InvoiceInfoSection from './checkout/InvoiceInfoSection';
import DonationSection from './checkout/DonationSection';
import OrderSummary from './checkout/OrderSummary';
import SuccessModal from './checkout/SuccessModal';

// Types for checkout form data
interface CheckoutFormData {
  email: string;
  password: string;
  confirmPassword: string;
  cardNumber: string;
  expiryDate: string;
  cvv: string;
  firstName: string;
  lastName: string;
  country: string;
  address: string;
  city: string;
  state: string;
  postalCode: string;
  donationAmount: string;
  acceptTerms: boolean;
  acceptNewsletter: boolean;
  [key: string]: string | boolean; // Add this index signature
}

interface CheckoutErrors {
  email?: string;
  password?: string;
  confirmPassword?: string;
  cardNumber?: string;
  expiryDate?: string;
  cvv?: string;
  firstName?: string;
  lastName?: string;
  acceptTerms?: string;
  [key: string]: string | undefined; // Add this index signature
}

// Main checkout component
export default function MembershipCheckoutClient() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { data: session, status } = useSession();
  const isLoggedIn = status === 'authenticated';

  // Get plan and billing info from URL
  const planParam = searchParams.get('plan') || 'gyani';
  const billingParam = searchParams.get('billing') || 'monthly';
  const isMonthly = billingParam === 'monthly';

  // State
  const [showLogin, setShowLogin] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [selectedPlan, setSelectedPlan] = useState(planParam);
  const [processing, setProcessing] = useState(false);
  const [error, setError] = useState('');
  const [accountCreated, setAccountCreated] = useState(false);
  const [discountCode, setDiscountCode] = useState('');
  const [discountApplied, setDiscountApplied] = useState(false);
  
  // Form data and validation
  const [formData, setFormData] = useState<CheckoutFormData>({
    email: '',
    password: '',
    confirmPassword: '',
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    firstName: '',
    lastName: '',
    country: 'CR',
    address: '',
    city: '',
    state: '',
    postalCode: '',
    donationAmount: '0',
    acceptTerms: false,
    acceptNewsletter: false
  });
  
  const [errors, setErrors] = useState<CheckoutErrors>({});
  
  // Membership plans data
  const membershipPlans = [
    {
      id: 'gyani',
      title: 'Gyani',
      monthlyPrice: 20,
      yearlyPrice: 15,
      annualSavings: 60,
      tagline: 'Key to the Treasure House: Deep Teachings, Meditations & Community Connection',
      features: [
        'Custom dashboard available on your phone, tablet and desktop',
        'Exclusive Wisdom Library with 1,000+ publications',
        'New Weekly Teachings'
      ],
      hasTrial: true,
      trialDays: 10
    },
    {
      id: 'pragyani',
      title: 'Pragyani',
      monthlyPrice: 100,
      yearlyPrice: 83,
      annualSavings: 200,
      tagline: 'Virtual Ashram Experience: Exclusive Teachings, Livestream Gatherings & Community Support',
      popular: true,
      features: [
        'Custom dashboard available on your phone, tablet and desktop',
        'Exclusive Wisdom Library with 1,000+ publications',
        'Your Questions Prioritized during ALL live events with Shunyamurti'
      ]
    },
    {
      id: 'pragyani-plus',
      title: 'Pragyani+',
      monthlyPrice: 142,
      yearlyPrice: 142,
      annualSavings: 1170,
      tagline: 'Unlock the Ultimate Experience: Lifetime Retreats & Direct Access to Shunyamurti',
      features: [
        'Custom dashboard available on your phone, tablet and desktop',
        'Exclusive Wisdom Library with 1,000+ publications',
        'Lifetime Access to All Online Retreats (Valued at $1,970 per year)'
      ]
    }
  ];
  
  // Find the selected plan
  const currentPlan = membershipPlans.find(plan => plan.id === selectedPlan) || membershipPlans[0];
  
  // Calculate order summary
  const calculateOrderSummary = () => {
    const planPrice = isMonthly ? currentPlan.monthlyPrice : currentPlan.yearlyPrice;
    let discount = 0;
    
    // Apply discount if code is present and valid
    if (discountApplied && discountCode === 'freetrial') {
      discount = planPrice;
    }
    
    const subtotal = planPrice;
    const total = Math.max(0, subtotal - discount);
    
    return {
      subtotal,
      discount,
      tax: 0,
      total,
      discountCode: discountApplied ? discountCode : undefined,
      trial: currentPlan.hasTrial ? { days: currentPlan.trialDays || 10 } : undefined
    };
  };
  
  // Handle form field changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    // Clear error when field is edited
    if (errors[name as keyof CheckoutErrors]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name as keyof CheckoutErrors];
        return newErrors;
      });
    }
  };
  
  // Handle discount code application
  const handleApplyDiscount = () => {
    if (!discountCode) return;
    
    // In a real app, you would validate the code with an API call
    // For now, just accept 'freetrial' as a valid code
    if (discountCode.toLowerCase() === 'freetrial') {
      setDiscountApplied(true);
    } else {
      setError('Invalid discount code');
      setTimeout(() => setError(''), 3000);
    }
  };
  
  // Handle discount removal
  const handleRemoveDiscount = () => {
    setDiscountCode('');
    setDiscountApplied(false);
  };
  
  // Handle social login
  const handleSocialLogin = (provider: string) => {
    signIn(provider, { callbackUrl: window.location.href });
  };
  
  // Handle login form submission
  const handleLoginSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.email || !formData.password) {
      setErrors({
        ...errors,
        email: !formData.email ? 'Email is required' : undefined,
        password: !formData.password ? 'Password is required' : undefined
      });
      return;
    }
    
    try {
      const result = await signIn('credentials', {
        redirect: false,
        email: formData.email,
        password: formData.password
      });
      
      if (result?.error) {
        setError('Invalid login credentials');
      }
    } catch (err) {
      setError('An error occurred during login');
    }
  };
  
  // Handle account creation
  const handleCreateAccount = async () => {
    // Validate form fields for account creation
    const newErrors: CheckoutErrors = {};
    
    if (!formData.email) newErrors.email = 'Email is required';
    if (!formData.password) newErrors.password = 'Password is required';
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }
    if (formData.password && formData.password.length < 8) {
      newErrors.password = 'Password must be at least 8 characters';
    }
    
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return false;
    }
    
    try {
      // Create user account in Strapi
      const registerRes = await fetch(`${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/auth/local/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: `${formData.firstName} ${formData.lastName}`,
          email: formData.email,
          password: formData.password
        })
      });
      
      if (!registerRes.ok) {
        const errorData = await registerRes.json();
        setError(errorData.error?.message || 'Error creating account');
        return false;
      }
      
      const userData = await registerRes.json();
      
      // Sign in the user after account creation
      await signIn('credentials', {
        redirect: false,
        email: formData.email,
        password: formData.password
      });
      
      setAccountCreated(true);
      return true;
    } catch (err) {
      console.error('Account creation error:', err);
      setError('An error occurred while creating your account');
      return false;
    }
  };
  
  // Handle payment submission
const handlePaymentSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  setProcessing(true);
  setError('');
  
  try {
    // If not logged in, create account first
    if (!isLoggedIn) {
      const accountSuccess = await handleCreateAccount();
      if (!accountSuccess) {
        setProcessing(false);
        return;
      }
    }
    
    // Validate required fields
    const newErrors: CheckoutErrors = {};
    
    if (!formData.firstName) newErrors.firstName = 'First name is required';
    if (!formData.lastName) newErrors.lastName = 'Last name is required';
    if (!formData.cardNumber) newErrors.cardNumber = 'Card number is required';
    if (!formData.expiryDate) newErrors.expiryDate = 'Expiry date is required';
    if (!formData.cvv) newErrors.cvv = 'CVV is required';
    if (!formData.acceptTerms) newErrors.acceptTerms = 'You must accept the terms of service';
    
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      setProcessing(false);
      return;
    }
    
    // Format data for Tilopay
    const orderSummary = calculateOrderSummary();
    const subscriptionType = isMonthly ? 'monthly' : 'yearly';
    
    const membershipDetails = {
      planId: currentPlan.id,
      planName: currentPlan.title,
      amount: orderSummary.total.toString(),
      billingType: subscriptionType,
      hasTrial: !!currentPlan.hasTrial,
      trialDays: currentPlan.trialDays || 0
    };
    
    // Format Tilopay data
    const tilopayData = formatTilopayData(formData, membershipDetails);
    
    // Extract card data for direct API
    const cardData = {
      cardNumber: formData.cardNumber.replace(/\s+/g, ''),
      expiryDate: formData.expiryDate,
      cvv: formData.cvv
    };
    
    // Process payment through Tilopay's direct API
    const result = await processRecurrentPayment(tilopayData, cardData);
    
    if (result) {
      // Handle successful payment
      const transactionId = result.transactionId || 'unknown';
      
      // Update user membership status in our backend
      await fetch('/api/membership/update-status', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          membershipPlan: membershipDetails.planName,
          membershipType: membershipDetails.billingType,
          amount: membershipDetails.amount,
          hasTrial: membershipDetails.hasTrial,
          trialDays: membershipDetails.trialDays,
          memberEmail: formData.email || session?.user?.email,
          orderNumber: tilopayData.orderNumber,
          orderAuth: transactionId,
          donationAmount: formData.donationAmount || '0'
        }),
      });
      
      // Redirect to success page
      router.push(`/membership/success?code=1&description=Payment+Successful&auth=${transactionId}&order=${tilopayData.orderNumber}&returnData=${tilopayData.returnData}`);
    } else {
      throw new Error('Failed to process payment');
    }
    
  } catch (err: any) {
    console.error('Payment error:', err);
    setError(err.message || 'There was an error processing your payment. Please try again.');
    setProcessing(false);
  }
};
  // Initialize form data with user info if logged in
  useEffect(() => {
    if (isLoggedIn && session?.user?.email) {
      setFormData(prev => ({
        ...prev,
        email: session.user?.email || ''
      }));
    }
  }, [isLoggedIn, session]);
  
  return (
    <div className="bg-gray-50 min-h-screen">
      {/* Header with back button */}
      <div className="bg-white border-b">
        <div className="container mx-auto px-4 py-4">
          <Link href="/membership" className="inline-flex items-center text-gray-500 hover:text-gray-800">
            <svg className="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back
          </Link>
        </div>
      </div>
      
      {/* Main content */}
      <div className="container mx-auto px-4 py-8">
        {error && (
          <div className="mb-6 bg-red-50 border-l-4 border-red-500 p-4">
            <div className="flex">
              <div className="flex-shrink-0">
                <svg className="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
              </div>
              <div className="ml-3">
                <p className="text-sm text-red-700">{error}</p>
              </div>
            </div>
          </div>
        )}
        
        <div className="grid md:grid-cols-3 gap-8">
          {/* Left Column - Form */}
          <div className="md:col-span-2">
            <form onSubmit={handlePaymentSubmit}>
              {/* Account Section */}
              <AccountSection 
                isLoggedIn={isLoggedIn}
                userEmail={session?.user?.email}
                formData={formData}
                errors={errors}
                onChange={handleChange}
                onContinue={() => {}}
                showLogin={showLogin}
                setShowLogin={setShowLogin}
                onSocialLogin={handleSocialLogin}
                onLoginSubmit={handleLoginSubmit}
                accountCreated={accountCreated}
              />
              
              {/* Plan Selection Section */}
              <PlanSelectionSection
                plans={membershipPlans}
                selectedPlan={selectedPlan}
                isMonthly={isMonthly}
                onSelectPlan={setSelectedPlan}
                onToggleBilling={() => router.push(`/membership/checkout?plan=${selectedPlan}&billing=${isMonthly ? 'yearly' : 'monthly'}`)}
              />
              
              {/* Payment Information Section */}
              <PaymentInfoSection
                formData={formData}
                errors={errors}
                onChange={handleChange}
                processing={processing}
              />
              
              {/* Invoice Information Section */}
              <InvoiceInfoSection
                formData={formData}
                errors={errors}
                onChange={handleChange}
              />
              
              {/* Donation Section */}
              <DonationSection
                donationAmount={formData.donationAmount}
                onChange={(amount) => setFormData(prev => ({ ...prev, donationAmount: amount }))}
              />
              
              {/* Submit buttons */}
              <div className="mt-8 flex justify-end space-x-4">
                <button
                  type="button"
                  onClick={() => router.back()}
                  className="px-6 py-3 border border-gray-300 rounded-md text-gray-700 font-medium"
                  disabled={processing}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-6 py-3 bg-gray-900 text-white rounded-md font-medium hover:bg-gray-800 disabled:opacity-70"
                  disabled={processing}
                >
                  {processing ? 'Processing...' : 'Confirm payment'}
                </button>
              </div>
            </form>
          </div>
          
          {/* Right Column - Order Summary */}
          <div>
            <OrderSummary
              plan={currentPlan}
              isMonthly={isMonthly}
              orderSummary={calculateOrderSummary()}
              discountCode={discountCode}
              onDiscountChange={setDiscountCode}
              onApplyDiscount={handleApplyDiscount}
              onRemoveDiscount={handleRemoveDiscount}
              formData={formData}
            />
          </div>
        </div>
      </div>
      
      {/* Success Modal - only used when not redirecting to Tilopay */}
      {showSuccessModal && (
        <SuccessModal 
          onClose={() => setShowSuccessModal(false)}
          onSignUp={() => router.push('/dashboard')}
        />
      )}
    </div>
  );
}
// === ./src/components/membership/MembershipPageClient.tsx ===
'use client';

import { useState } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useSession } from 'next-auth/react';

// Types for membership plans
interface MembershipPlan {
  id: string;
  title: string;
  monthlyPrice: number;
  yearlyPrice: number;
  annualSavings: number;
  tagline: string;
  popular?: boolean;
  features: string[];
  specialFeatures?: Array<{
    text: string;
    bullets?: string[];
  }>;
  valueAddedFeature?: {
    text: string;
    value: string;
  };
  ctaText?: string;
  hasTrial?: boolean;
  trialDays?: number;
}

// Types for benefit
interface Benefit {
  icon: string;
  title: string;
  description: string;
}

// Types for feature details
interface FeatureDetail {
  id: string;
  title: string;
  description: string;
}

// Membership Plan Card Component
const MembershipPlanCard: React.FC<{
  plan: MembershipPlan;
  isMonthly: boolean;
  isSelected?: boolean;
  onSelect?: (id: string) => void;
}> = ({ plan, isMonthly, isSelected, onSelect }) => {
  const { data: session } = useSession();
  const isLoggedIn = !!session?.user;
  
  const price = isMonthly ? plan.monthlyPrice : plan.yearlyPrice;
  const billingPeriod = isMonthly ? 'mo' : 'mo';
  const billingLabel = isMonthly 
    ? 'Billed Monthly' 
    : `Billed Annually (Save ${plan.annualSavings}$)`;
  
  const handleClick = () => {
    if (onSelect) {
      onSelect(plan.id);
    }
  };
  
  return (
    <div className={`bg-white rounded-lg border ${plan.popular ? 'border-purple-200' : 'border-gray-200'} overflow-hidden flex flex-col h-full relative ${isSelected ? 'ring-2 ring-purple-500' : ''}`}>
      {plan.popular && (
        <div className="bg-purple-100 text-purple-600 text-center text-sm font-medium py-1">
          Most recommended
        </div>
      )}
      
      {plan.hasTrial && (
        <div className="absolute top-2 right-2 text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded-full">
          {plan.trialDays} days free trial
        </div>
      )}
      
      <div className="p-6 flex-grow flex flex-col">
        <h3 className="text-lg font-medium text-purple-600 mb-1">{plan.title}</h3>
        <div className="mb-1">
          <span className="text-4xl font-bold">${price}</span>
          <span className="text-gray-500">/{billingPeriod}</span>
        </div>
        <div className="text-sm text-gray-500 mb-4">{billingLabel}</div>
        
        <div className="border-t border-gray-100 pt-4 mb-4">
          <p className="font-medium mb-2">{plan.tagline}</p>
        </div>
        
        <div className="mb-4">
          <p className="font-medium mb-2">Includes:</p>
          <div className="space-y-3">
            {plan.features.map((feature, index) => (
              <div key={index} className="flex items-start">
                <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <span className="text-sm text-gray-700">{feature}</span>
              </div>
            ))}
            
            {plan.specialFeatures && plan.specialFeatures.map((feature, index) => (
              <div key={`special-${index}`} className="flex items-start">
                <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <div>
                  <span className="text-sm text-gray-700">{feature.text}</span>
                  {feature.bullets && (
                    <ul className="ml-6 mt-1">
                      {feature.bullets.map((bullet, i) => (
                        <li key={i} className="text-xs text-gray-600 list-disc">
                          {bullet}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              </div>
            ))}
            
            {plan.valueAddedFeature && (
              <div className="flex items-start">
                <svg className="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <div>
                  <span className="text-sm text-purple-600 font-medium">{plan.valueAddedFeature.text}</span>
                  <span className="text-xs text-purple-500 block">{plan.valueAddedFeature.value}</span>
                </div>
              </div>
            )}
          </div>
        </div>
        
        <div className="mt-auto">
          <Link 
            href={isLoggedIn ? `/membership/checkout?plan=${plan.id}${isMonthly ? '&billing=monthly' : '&billing=yearly'}` : `/membership/register?plan=${plan.id}${isMonthly ? '&billing=monthly' : '&billing=yearly'}`}
            className="block w-full bg-purple-600 text-white text-center rounded-md py-3 font-medium hover:bg-purple-700"
            onClick={handleClick}
          >
            {plan.hasTrial ? 'Start free trial' : 'Sign up'}
          </Link>
          
          <button className="w-full text-sm text-gray-600 mt-3 hover:text-purple-600">
            More details
          </button>
        </div>
      </div>
    </div>
  );
};

// Feature Accordion Component
const FeatureAccordion: React.FC<{
  features: FeatureDetail[];
}> = ({ features }) => {
  const [openFeature, setOpenFeature] = useState<string | null>(null);
  
  const toggleFeature = (id: string) => {
    setOpenFeature(openFeature === id ? null : id);
  };
  
  return (
    <div className="mt-8">
      <h2 className="text-2xl font-bold mb-6">Details</h2>
      
      <div className="space-y-1">
        {features.map((feature) => (
          <div key={feature.id} className="border-b border-gray-100">
            <button
              className="w-full py-4 flex justify-between items-center text-left"
              onClick={() => toggleFeature(feature.id)}
            >
              <h3 className="text-lg font-medium">{feature.title}</h3>
              <svg
                className={`w-5 h-5 transform transition-transform ${openFeature === feature.id ? 'rotate-180' : ''}`}
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            
            {openFeature === feature.id && (
              <div className="pb-4 text-gray-700">
                <p>{feature.description}</p>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

// Not Ready Section Component
const NotReadySection: React.FC = () => {
  return (
    <div className="bg-white py-16">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row items-center">
          <div className="md:w-1/2 mb-8 md:mb-0">
            <h2 className="text-3xl font-bold mb-4">Not ready for membership?</h2>
            <p className="text-gray-700 mb-6">
              Sign up to explore our Free Library and gain access to exclusive content and a free meditation course.
            </p>
            <Link 
              href="/signup"
              className="inline-block bg-purple-600 text-white rounded-md px-6 py-3 font-medium hover:bg-purple-700"
            >
              Sign up for free
            </Link>
          </div>
          <div className="md:w-1/2">
            <div className="bg-gray-200 rounded-lg aspect-video relative">
              {/* Placeholder for image */}
              <div className="absolute inset-0 flex items-center justify-center">
                <svg className="h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Benefits Section Component
const BenefitsSection: React.FC<{
  benefits: Benefit[];
}> = ({ benefits }) => {
  return (
    <div className="bg-white py-16 border-t border-gray-100">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <p className="text-purple-600 text-sm font-medium mb-2">Membership</p>
          <h2 className="text-3xl font-bold mb-8">Join our online Wisdom School</h2>
          
          <div className="grid md:grid-cols-3 gap-8">
            {benefits.map((benefit, index) => (
              <div key={index} className="text-center">
                <div className="bg-gray-200 w-16 h-16 mx-auto mb-4 rounded-md flex items-center justify-center">
                  {/* Placeholder for icon */}
                </div>
                <h3 className="font-bold mb-2">{benefit.title}</h3>
                <p className="text-gray-600 text-sm">{benefit.description}</p>
              </div>
            ))}
          </div>
        </div>
        
        {/* Main image placeholder */}
        <div className="bg-gray-200 rounded-lg aspect-video w-full max-w-4xl mx-auto">
          <div className="flex items-center justify-center h-full">
            <svg className="h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main Membership Page Client Component
export default function MembershipPageClient() {
  const [isMonthly, setIsMonthly] = useState(true);
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);
  
  // Sample membership plans data
  const membershipPlans: MembershipPlan[] = [
    {
      id: 'gyani',
      title: 'Gyani',
      monthlyPrice: 20,
      yearlyPrice: 15,
      annualSavings: 60,
      tagline: 'Key to the Treasure House: Deep Teachings, Meditations & Community Connection',
      features: [
        'Custom dashboard available on your phone, tablet and desktop',
        'Exclusive Wisdom Library with 1,000+ publications',
        'New Weekly Teachings',
        'Shunyamurti Book Study',
        'Shunyamurti Recommendations to Deepen Your Knowledge',
        'Community Forum',
        'Live Sunday Group Meditation',
      ],
      specialFeatures: [
        {
          text: 'Exclusive Gyani Discounts',
          bullets: [
            '5% off Onsite Retreats',
            '10% off all Digital Products'
          ]
        }
      ],
      hasTrial: true,
      trialDays: 10,
      ctaText: 'Start free trial'
    },
    {
      id: 'pragyani',
      title: 'Pragyani',
      monthlyPrice: 100,
      yearlyPrice: 83,
      annualSavings: 200,
      tagline: 'Virtual Ashram Experience: Exclusive Teachings, Livestream Gatherings & Community Support',
      popular: true,
      features: [
        'Custom dashboard available on your phone, tablet and desktop',
        'Exclusive Wisdom Library with 1,000+ publications',
        'New Weekly Teachings',
        'Shunyamurti Book Study',
        'Shunyamurti Recommendations to Deepen Your Knowledge',
        'Community Forum',
        'Live Sunday Group Meditation',
        'Live Surprise Satsangs with Shunyamurti',
        'Live Sunday Study Group with Radha Ma',
        'Live Monthly Teaching Discussions',
        'Book Groups',
        'Pragyani Exclusive Teachings',
        'Study Group Review',
        'Ask Shunyamurti',
      ],
      specialFeatures: [
        {
          text: 'Your Questions Prioritized during ALL live events with Shunyamurti'
        },
        {
          text: 'Exclusive Pragyani Discounts',
          bullets: [
            '30% off all Digital Products',
            '10% off Onsite Retreats'
          ]
        }
      ],
      ctaText: 'Sign up'
    },
    {
      id: 'pragyani-plus',
      title: 'Pragyani+',
      monthlyPrice: 142,
      yearlyPrice: 142,
      annualSavings: 1170,
      tagline: 'Unlock the Ultimate Experience: Lifetime Retreats & Direct Access to Shunyamurti',
      features: [
        'Custom dashboard available on your phone, tablet and desktop',
        'Exclusive Wisdom Library with 1,000+ publications',
        'New Weekly Teachings',
        'Shunyamurti Book Study',
        'Shunyamurti Recommendations to Deepen Your Knowledge',
        'Community Forum',
        'Live Sunday Group Meditation',
        'Live Surprise Satsangs with Shunyamurti',
        'Live Sunday Study Group with Radha Ma',
        'Live Monthly Teaching Discussions',
        'Book Groups',
        'Pragyani Exclusive Teachings',
        'Study Group Review',
        'Ask Shunyamurti',
      ],
      specialFeatures: [
        {
          text: 'Your Questions Prioritized during ALL live events with Shunyamurti'
        },
        {
          text: 'Exclusive Pragyani Discounts',
          bullets: [
            '30% off all Digital Products',
            '10% off Onsite Retreats'
          ]
        }
      ],
      valueAddedFeature: {
        text: 'Lifetime Access to All Online Retreats',
        value: '(Valued at $1,970 per year)'
      },
      ctaText: 'Sign up'
    }
  ];
  
  // Sample feature details data
  const featureDetails: FeatureDetail[] = [
    {
      id: 'wisdom-library',
      title: 'Exclusive Wisdom Library with 1,000+ Publications',
      description: 'Gain access to an exclusive collection of full-length teachings not available on YouTube, guided meditations, Q&A sessions with Shunyamurti, and profound essays—specially selected and easily searchable to accelerate your spiritual awakening.'
    },
    {
      id: 'new-publications',
      title: 'New Publications Added Weekly',
      description: 'Stay engaged with fresh content added to the Wisdom Library every week, including full-length video teachings, audio recordings, transcripts, guided meditations, and insightful Q&A sessions with Shunyamurti.'
    },
    {
      id: 'book-study',
      title: 'Shunyamurti Book Study',
      description: 'Study Shunyamurti\'s books alongside the author himself, unraveling the intricate layers of meaning in The Dao of the Final Days. Further your exploration of the psychological dimensions of his teachings with Radha Ma, who leads an in-depth study of Coming Full Circle: The Secret of the Singularity, revealing its transformative insights.'
    },
    {
      id: 'recommendations',
      title: 'Recommendations to Deepen Your Knowledge',
      description: 'Take a peek into Shunyamurti\'s personal library and get recommendations on books to deepen your knowledge across a vast variety of topics. Follow along with the Ashram\'s studies and explore documentary films screened with the Sangha—each chosen to support your journey of higher knowledge and spiritual realization.'
    },
    {
      id: 'community-forum',
      title: 'Community Forum',
      description: 'Engage in deep, meaningful discussions with a global community of truth seekers. Share insights, ask questions, and express your creative spirit in an uplifting space dedicated to spiritual growth and exploration.'
    },
    {
      id: 'sunday-meditation',
      title: 'Live Sunday Group Meditation',
      description: 'Join the Sat Yoga Ashram Sangha every Sunday for a collective meditation that amplifies your energy field, deepens your inner stillness, and aligns your consciousness with the divine presence.'
    },
    {
      id: 'surprise-satsangs',
      title: 'Live Surprise Satsangs with Shunyamurti',
      description: 'Be present for spontaneous, live transmissions from Shunyamurti! You\'ll have the opportunity to join live teachings and Q&A sessions, receiving wisdom directly from the source.'
    },
    {
      id: 'study-group',
      title: 'Live Sunday Study Group with Radha Ma',
      description: 'Deepen your understanding of Shunyamurti\'s teachings with Radha Ma, who offers advanced explanations and guidance on integrating these profound insights into your spiritual practice.'
    },
    {
      id: 'teaching-discussions',
      title: 'Live Monthly Teaching Discussions',
      description: 'Join the Sat Yoga Teaching Team for an in-depth exploration of Shunyamurti\'s teachings. Each session begins with a selected video teaching or essay, serving as a springboard for profound study and discussion. Engage in meaningful dialogue and expand your understanding in a supportive group setting.'
    },
    {
      id: 'book-groups',
      title: 'Book Groups',
      description: 'Join Shunyamurti for fourteen transformative classes (each over 90 minutes long) as he unpacks and expands upon The Flight of the Garuda, a profound series of Dzogchen poems. Or explore the psychological and spiritual dimensions of Overcoming Narcissism in an illuminating 11-class series led by Radha Ma, offering deep insights and powerful tools for transformation.'
    },
    {
      id: 'exclusive-teachings',
      title: 'Pragyani Exclusive Teachings',
      description: 'Gain access to rare and advanced teachings designed for the most dedicated seekers. Immerse yourself in profound transmissions and become part of the spiritual renaissance unfolding at the Ashram.'
    },
    {
      id: 'study-review',
      title: 'Study Group Review',
      description: 'Embark on a profound journey through some of Shunyamurti\'s most essential yet rarely explored teachings. Radha Ma carefully revisits and unpacks these classical transmissions. With over 22 classes, this series delves into four key units: Transforming the Imaginary, Cultivating the Will, Potencies, and The Structure of Experience.'
    },
    {
      id: 'ask-shunyamurti',
      title: 'Ask Shunyamurti',
      description: 'A dedicated space for Pragyani and Pragyani+ members to submit personal questions via email and receive direct, insightful responses from Shunyamurti, offering guidance and clarity on the spiritual path.'
    }
  ];
  
  // Sample benefits data
  const benefits: Benefit[] = [
    {
      icon: 'globe',
      title: 'Join a Global Community',
      description: 'Take part in this global alliance of spiritual revolutionaries, bringing clarity to a world clouded with disinformation. Sat Yoga is more than a school—it is a family of seekers committed to the restoration of divine order.'
    },
    {
      icon: 'wisdom',
      title: 'Transformational Wisdom',
      description: 'Take part in this global alliance of spiritual revolutionaries, bringing clarity to a world clouded with disinformation. Sat Yoga is more than a school—it is a family of seekers committed to the restoration of divine order.'
    },
    {
      icon: 'support',
      title: 'Support the Mission!',
      description: 'Take part in this global alliance of spiritual revolutionaries, bringing clarity to a world clouded with disinformation. Sat Yoga is more than a school—it is a family of seekers committed to the restoration of divine order.'
    }
  ];
  
  // Handle billing period toggle
  const handleBillingToggle = () => {
    setIsMonthly(!isMonthly);
  };
  
  // Handle plan selection
  const handleSelectPlan = (planId: string) => {
    setSelectedPlan(planId);
  };

  return (
    <div>
      {/* Benefits Section */}
      <BenefitsSection benefits={benefits} />
      
      {/* Pricing Section */}
      <div className="py-16">
        <div className="container mx-auto px-4">
          <div className="flex justify-center mb-8">
            <div className="inline-flex items-center bg-gray-100 rounded-full p-1">
              <button
                onClick={() => setIsMonthly(true)}
                className={`px-4 py-2 rounded-full text-sm font-medium ${
                  isMonthly ? 'bg-white shadow' : 'text-gray-700'
                }`}
              >
                Monthly
              </button>
              <button
                onClick={() => setIsMonthly(false)}
                className={`px-4 py-2 rounded-full text-sm font-medium ${
                  !isMonthly ? 'bg-white shadow' : 'text-gray-700'
                }`}
              >
                Yearly (save 25%)
              </button>
            </div>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            {membershipPlans.map((plan) => (
              <MembershipPlanCard
                key={plan.id}
                plan={plan}
                isMonthly={isMonthly}
                isSelected={selectedPlan === plan.id}
                onSelect={handleSelectPlan}
              />
            ))}
          </div>
               {/* Not Ready Section */}
      <NotReadySection />
          {/* Feature Details */}
          <div className="max-w-3xl mx-auto mt-16">
            <FeatureAccordion features={featureDetails} />
          </div>
        </div>
      </div>
      
 
    </div>
  );
}
// === ./src/components/membership/MembershipRegisterComponent.tsx ===
// MembershipSuccessPage.tsx - Updated version
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function MembershipSuccessPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [orderDetails, setOrderDetails] = useState<any>(null);
  const [error, setError] = useState('');
  const [apiCallCompleted, setApiCallCompleted] = useState(false);
  
  useEffect(() => {
    // Parse the return data from Tilopay and update user membership in Strapi
    const processPaymentSuccess = async () => {
      try {
        // Prevent multiple API calls
        if (apiCallCompleted) return;
        
        const returnData = searchParams.get('returnData');
        const orderCode = searchParams.get('code');
        const orderAuth = searchParams.get('auth');
        const orderNumber = searchParams.get('order');
        
        if (!returnData || !orderCode) {
          setError('No order information found.');
          setLoading(false);
          return;
        }
        
        // Verify payment success from Tilopay response
        if (orderCode !== '1') {
          setError('Payment was not successful. Please contact support.');
          setLoading(false);
          return;
        }
        
        // Decode the base64 encoded return data
        let parsedData;
        try {
          const decodedData = atob(returnData);
          parsedData = JSON.parse(decodedData);
          setOrderDetails(parsedData);
        } catch (e) {
          console.error('Error parsing return data:', e);
          setError('Error processing order information.');
          setLoading(false);
          return;
        }
        
        // Mark API call as started to prevent duplicates
        setApiCallCompleted(true);
        
        // Update user membership in Strapi
        try {
          const response = await fetch('/api/membership/update-status', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              membershipPlan: parsedData.membershipPlan,
              membershipType: parsedData.membershipType,
              amount: parsedData.amount,
              hasTrial: parsedData.hasTrial,
              trialDays: parsedData.trialDays,
              memberEmail: parsedData.memberEmail,
              orderNumber: orderNumber,
              orderAuth: orderAuth,
              donationAmount: parsedData.donationAmount
            }),
          });
          
          if (!response.ok) {
            console.error('Failed to update membership status');
            // We don't show this error to the user since payment was successful
            // Just log it and allow the user to continue
          }
        } catch (err) {
          console.error('Error updating membership:', err);
        }
        
        setLoading(false);
        
      } catch (err) {
        console.error('Error processing payment success:', err);
        setError('An error occurred while processing your order information.');
        setLoading(false);
      }
    };
    
    processPaymentSuccess();
  }, [searchParams, apiCallCompleted]);
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-600"></div>
        <p className="mt-4 text-gray-600">Processing your order...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-md p-8 max-w-md w-full">
          <div className="text-center">
            <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
              <svg className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Something went wrong</h2>
            <p className="text-gray-600 mb-6">{error}</p>
            
            <div className="flex justify-center">
              <Link 
                href="/membership"
                className="bg-purple-600 text-white px-4 py-2 rounded-md font-medium hover:bg-purple-700"
              >
                Return to Membership Page
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  // Safe rendering of order details
  const planName = orderDetails?.membershipPlan || 'Membership';
  const memberEmail = orderDetails?.memberEmail || '';
  const hasTrial = orderDetails?.hasTrial || false;
  const trialDays = orderDetails?.trialDays || 0;
  const amount = parseFloat(orderDetails?.amount || 0);
  const donationAmount = parseFloat(orderDetails?.donationAmount || 0);
  
  // Format dates safely
  const trialEndDate = hasTrial && trialDays 
    ? new Date(Date.now() + trialDays * 24 * 60 * 60 * 1000).toLocaleDateString()
    : '';
  
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-md p-8 max-w-md w-full">
        <div className="text-center">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
            <svg className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Welcome to {planName}!</h2>
          <p className="text-gray-600 mb-6">
            Thank you for your subscription. We have sent a confirmation email to{' '}
            <span className="font-medium">{memberEmail}</span> with details about your membership.
          </p>
          
          {hasTrial && trialDays > 0 && (
            <div className="bg-blue-50 p-4 rounded-md text-blue-700 mb-6">
              <p>
                Your {trialDays}-day free trial has started. You won't be charged until{' '}
                {trialEndDate}.
              </p>
            </div>
          )}
          
          <div className="border-t border-b border-gray-200 py-4 my-6">
            <div className="flex justify-between mb-2">
              <span className="text-gray-600">Plan:</span>
              <span className="font-medium">{planName} ({orderDetails?.membershipType || 'subscription'})</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">Amount:</span>
              <span className="font-medium">${amount.toFixed(2)}/mo</span>
            </div>
            
            {donationAmount > 0 && (
              <div className="flex justify-between mt-2">
                <span className="text-gray-600">Donation:</span>
                <span className="font-medium">${donationAmount.toFixed(2)}</span>
              </div>
            )}
          </div>
          
          <div className="flex justify-center space-x-4">
            <Link 
              href="/dashboard"
              className="bg-gray-900 text-white px-4 py-2 rounded-md font-medium hover:bg-gray-800"
            >
              Go to Dashboard
            </Link>
            
            <Link 
              href="/"
              className="bg-white text-gray-700 border border-gray-300 px-4 py-2 rounded-md font-medium hover:bg-gray-50"
            >
              Return Home
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
// === ./src/components/membership/SuccessPage.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';

export default function MembershipSuccessPageComponent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [loading, setLoading] = useState(true);
  const [orderDetails, setOrderDetails] = useState<any>(null);
  const [error, setError] = useState('');
  
  useEffect(() => {
    // Parse the return data from Tilopay and update user membership in Strapi
    const processPaymentSuccess = async () => {
      try {
        const returnData = searchParams.get('returnData');
        const orderCode = searchParams.get('code');
        const orderAuth = searchParams.get('auth');
        const orderNumber = searchParams.get('order');
        
        if (!returnData || !orderCode) {
          setError('No order information found.');
          setLoading(false);
          return;
        }
        
        // Verify payment success from Tilopay response
        if (orderCode !== '1') {
          setError('Payment was not successful. Please contact support.');
          setLoading(false);
          return;
        }
        
        // Decode the base64 encoded return data
        const decodedData = atob(returnData);
        const parsedData = JSON.parse(decodedData);
        setOrderDetails(parsedData);
        
        // Update user membership in Strapi
        const updateMembershipStatus = async () => {
          try {
            const response = await fetch('/api/membership/update-status', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                membershipPlan: parsedData.membershipPlan,
                membershipType: parsedData.membershipType,
                amount: parsedData.amount,
                hasTrial: parsedData.hasTrial,
                trialDays: parsedData.trialDays,
                memberEmail: parsedData.memberEmail,
                orderNumber: orderNumber,
                orderAuth: orderAuth,
                donationAmount: parsedData.donationAmount
              }),
            });
            
            if (!response.ok) {
              console.error('Failed to update membership status');
              // We don't show this error to the user since payment was successful
              // Just log it and allow the user to continue
            }
          } catch (err) {
            console.error('Error updating membership:', err);
          }
        };
        
        await updateMembershipStatus();
        setLoading(false);
        
      } catch (err) {
        console.error('Error processing payment success:', err);
        setError('An error occurred while processing your order information.');
        setLoading(false);
      }
    };
    
    processPaymentSuccess();
  }, [searchParams]);
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-purple-600"></div>
        <p className="mt-4 text-gray-600">Processing your order...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-md p-8 max-w-md w-full">
          <div className="text-center">
            <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
              <svg className="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Something went wrong</h2>
            <p className="text-gray-600 mb-6">{error}</p>
            
            <div className="flex justify-center">
              <Link 
                href="/membership"
                className="bg-purple-600 text-white px-4 py-2 rounded-md font-medium hover:bg-purple-700"
              >
                Return to Membership Page
              </Link>
            </div>
          </div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-md p-8 max-w-md w-full">
        <div className="text-center">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
            <svg className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Welcome to {orderDetails?.membershipPlan}!</h2>
          <p className="text-gray-600 mb-6">
            Thank you for your subscription. We have sent a confirmation email to{' '}
            <span className="font-medium">{orderDetails?.memberEmail}</span> with details about your membership.
          </p>
          
          {orderDetails?.hasTrial && (
            <div className="bg-blue-50 p-4 rounded-md text-blue-700 mb-6">
              <p>
                Your {orderDetails.trialDays}-day free trial has started. You won't be charged until{' '}
                {new Date(Date.now() + orderDetails.trialDays * 24 * 60 * 60 * 1000).toLocaleDateString()}.
              </p>
            </div>
          )}
          
          <div className="border-t border-b border-gray-200 py-4 my-6">
            <div className="flex justify-between mb-2">
              <span className="text-gray-600">Plan:</span>
              <span className="font-medium">{orderDetails?.membershipPlan} ({orderDetails?.membershipType})</span>
            </div>
            
            <div className="flex justify-between">
              <span className="text-gray-600">Amount:</span>
              <span className="font-medium">${parseFloat(orderDetails?.amount || 0).toFixed(2)}/mo</span>
            </div>
            
            {parseFloat(orderDetails?.donationAmount || 0) > 0 && (
              <div className="flex justify-between mt-2">
                <span className="text-gray-600">Donation:</span>
                <span className="font-medium">${parseFloat(orderDetails?.donationAmount || 0).toFixed(2)}</span>
              </div>
            )}
          </div>
          
          <div className="flex justify-center space-x-4">
            <Link 
              href="/dashboard"
              className="bg-gray-900 text-white px-4 py-2 rounded-md font-medium hover:bg-gray-800"
            >
              Go to Dashboard
            </Link>
            
            <Link 
              href="/"
              className="bg-white text-gray-700 border border-gray-300 px-4 py-2 rounded-md font-medium hover:bg-gray-50"
            >
              Return Home
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
// === ./src/components/membership/checkout/AccountSection.tsx ===
'use client';

import { useState } from 'react';

interface FormData {
    email: string;
    password: string;
    confirmPassword: string;
    [key: string]: string | boolean;
  }
  
  interface Errors {
    email?: string;
    password?: string;
    confirmPassword?: string;
    [key: string]: string | undefined;
  }
  
  interface AccountSectionProps {
    isLoggedIn: boolean;
    userEmail?: string | null;  // Add null here to match session?.user?.email type
    formData: FormData;
    errors: Errors;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    onContinue: () => void;
    showLogin: boolean;
    setShowLogin: (show: boolean) => void;
    onSocialLogin: (provider: string) => void;
    onLoginSubmit: (e: React.FormEvent) => void;
    accountCreated?: boolean;
  }
  
export default function AccountSection({
  isLoggedIn,
  userEmail,
  formData,
  errors,
  onChange,
  onContinue,
  showLogin,
  setShowLogin,
  onSocialLogin,
  onLoginSubmit,
  accountCreated
}: AccountSectionProps) {
  
  // Render when logged in
  if (isLoggedIn) {
    return (
      <div className="mb-8">
        <h2 className="text-purple-600 text-lg font-medium mb-4">1. Create account or login</h2>
        <div className="flex items-center justify-between bg-gray-50 p-3 rounded border border-gray-200">
          <div className="flex items-center">
            <span className="text-sm font-medium">Logged in as:</span>
            <span className="ml-2 text-sm">{userEmail}</span>
            <span className="ml-2 text-green-500">
              <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </span>
          </div>
          <button
            type="button"
            onClick={() => window.location.href = '/api/auth/signout'}
            className="text-sm text-gray-600 hover:text-gray-900"
          >
            Logout
          </button>
        </div>
        {accountCreated && (
          <div className="mt-2 text-sm text-green-600">
            Account successfully created
          </div>
        )}
      </div>
    );
  }

  // Render login/signup form
  return (
    <div className="mb-8">
      <h2 className="text-purple-600 text-lg font-medium mb-4">1. Create account or login</h2>
      
      {/* Login/Signup Tabs */}
      <div className="flex border-b border-gray-200 mb-6">
        <button
          type="button"
          className={`py-2 px-4 ${!showLogin ? 'border-b-2 border-purple-600 font-medium text-gray-900' : 'text-gray-500'}`}
          onClick={() => setShowLogin(false)}
        >
          Sign up
        </button>
        <button
          type="button"
          className={`py-2 px-4 ${showLogin ? 'border-b-2 border-purple-600 font-medium text-gray-900' : 'text-gray-500'}`}
          onClick={() => setShowLogin(true)}
        >
          Log in
        </button>
      </div>
      
      {/* Social Login Buttons */}
      <div className="flex space-x-2 mb-4">
        <button
          type="button"
          onClick={() => onSocialLogin('google')}
          className="flex-1 py-2 px-3 border border-gray-300 rounded-md flex justify-center items-center hover:bg-gray-50"
        >
          <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972a6.033 6.033 0 110-12.064 5.963 5.963 0 014.23 1.74l2.694-2.689A9.99 9.99 0 0012.545 2.001a10.089 10.089 0 00-9.286 6.255 10.034 10.034 0 003.7 12.66 10.003 10.003 0 005.586 1.694c7.058 0 11.668-5.736 10.924-12.01l-10.924-.36z"
            />
          </svg>
          <span>Google</span>
        </button>
        <button
          type="button"
          onClick={() => onSocialLogin('facebook')}
          className="flex-1 py-2 px-3 border border-gray-300 rounded-md flex justify-center items-center hover:bg-gray-50"
        >
          <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M20.007 3H3.993A.993.993 0 003 3.993v16.014c0 .549.444.993.993.993h8.628v-6.961h-2.343v-2.813h2.343V9.312c0-2.325 1.42-3.591 3.494-3.591.993 0 1.847.073 2.096.106v2.43h-1.44c-1.125 0-1.345.532-1.345 1.315v1.723h2.689l-.35 2.813h-2.339V21h4.573a.993.993 0 00.993-.993V3.993A.993.993 0 0020.007 3z"
            />
          </svg>
          <span>Facebook</span>
        </button>
        <button
          type="button"
          onClick={() => onSocialLogin('apple')}
          className="flex-1 py-2 px-3 border border-gray-300 rounded-md flex justify-center items-center hover:bg-gray-50"
        >
          <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
            <path
              fill="currentColor"
              d="M17.05 20.28c-.98.95-2.05.88-3.08.45-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.47C2.79 15.22 3.51 7.89 8.42 7.56c1.57.05 2.62 1.06 3.54 1.1 1.35-.18 2.63-1.16 4.11-1.22.7.01 2.65.27 3.91 2.08-3.34 2.13-2.79 6.17.55 7.83-2.25 3.96-4.51 4.13-3.86 2.44.41-1.08 1.67-1.72 1.67-1.72-1.5-.92-1.82-3.32-1.29-4.79zM12.03 7.28c-.19-2.15 1.76-4 4.1-4.16.25 2.41-2.16 4.2-4.1 4.16z"
            />
          </svg>
          <span>Apple</span>
        </button>
      </div>
      
      <div className="my-4 flex items-center">
        <div className="flex-grow border-t border-gray-200"></div>
        <span className="px-4 text-sm text-gray-500">OR</span>
        <div className="flex-grow border-t border-gray-200"></div>
      </div>
      
      {/* Login Form */}
      {showLogin ? (
        <form onSubmit={onLoginSubmit}>
          <div className="mb-4">
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={onChange}
              className={`w-full px-3 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
              placeholder="Enter your email"
            />
            {errors.email && <p className="mt-1 text-sm text-red-500">{errors.email}</p>}
          </div>
          
          <div className="mb-4">
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={onChange}
              className={`w-full px-3 py-2 border ${errors.password ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
              placeholder="Enter your password"
            />
            {errors.password && <p className="mt-1 text-sm text-red-500">{errors.password}</p>}
          </div>
          
          <button
            type="submit"
            className="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 transition-colors"
          >
            Login
          </button>
        </form>
      ) : (
        /* Sign Up Form */
        <>
          <div className="mb-4">
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={onChange}
              className={`w-full px-3 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
              placeholder="Enter your email"
            />
            {errors.email && <p className="mt-1 text-sm text-red-500">{errors.email}</p>}
          </div>
          
          <div className="mb-4">
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
              Password
            </label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={onChange}
              className={`w-full px-3 py-2 border ${errors.password ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
              placeholder="Create a password"
            />
            {errors.password && <p className="mt-1 text-sm text-red-500">{errors.password}</p>}
            <p className="mt-1 text-xs text-gray-500">Must be at least 8 characters</p>
          </div>
          
          <div className="mb-4">
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">
              Confirm password
            </label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={onChange}
              className={`w-full px-3 py-2 border ${errors.confirmPassword ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
              placeholder="Confirm password"
            />
            {errors.confirmPassword && <p className="mt-1 text-sm text-red-500">{errors.confirmPassword}</p>}
          </div>
          
          <button
            type="button"
            onClick={onContinue}
            className="w-full bg-gray-900 text-white py-2 px-4 rounded-md hover:bg-gray-800 transition-colors"
          >
            Continue
          </button>
        </>
      )}
    </div>
  );
}
// === ./src/components/membership/checkout/DonationSection.tsx ===
'use client';

interface DonationSectionProps {
  donationAmount: string;
  onChange: (amount: string) => void;
}

export default function DonationSection({
  donationAmount,
  onChange
}: DonationSectionProps) {
  // Predefined donation amounts
  const predefinedAmounts = ['45.00', '50.00', '55.00', '60.00'];
  
  // For custom amount input
  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    // Remove any non-numeric characters except decimal point
    const formattedAmount = e.target.value.replace(/[^0-9.]/g, '');
    
    // Ensure only one decimal point
    const parts = formattedAmount.split('.');
    if (parts.length > 2) {
      const sanitizedAmount = parts[0] + '.' + parts.slice(1).join('');
      onChange(sanitizedAmount);
      return;
    }
    
    onChange(formattedAmount);
  };
  
  // For predefined amount selection
  const handlePredefinedAmount = (amount: string) => {
    onChange(amount);
  };
  
  // Format currency for display
  const formatCurrency = (value: string) => {
    if (!value) return '$0.00';
    
    try {
      const numericValue = parseFloat(value);
      return `$${numericValue.toFixed(2)}`;
    } catch {
      return '$0.00';
    }
  };
  
  return (
    <div className="mb-8">
      <h2 className="text-purple-600 text-lg font-medium mb-4">5. Donate to the general fund</h2>
      
      <p className="text-gray-700 mb-4">
        We will continue to capture, produce, archive, and disseminate this transformative wisdom 
        that has the power to change our collective destiny. This requires improving the quality of our 
        media and broadcasting infrastructure to ensure our long-term connectivity: upgrading our 
        cameras, microphones, mixers and editing equipment, fiber optic cables, hard drives, and 
        storage capacities.
      </p>
      
      {/* Predefined amounts */}
      <div className="grid grid-cols-4 gap-2 mb-4">
        {predefinedAmounts.map((amount) => (
          <button
            key={amount}
            type="button"
            onClick={() => handlePredefinedAmount(amount)}
            className={`py-2 border rounded-md text-center text-sm font-medium transition-colors ${
              donationAmount === amount
                ? 'bg-gray-900 text-white border-gray-900'
                : 'border-gray-300 text-gray-700 hover:bg-gray-50'
            }`}
          >
            ${amount}
          </button>
        ))}
      </div>
      
      {/* Custom amount */}
      <div className="flex items-center mb-4">
        <div className="flex-grow border-t border-gray-200"></div>
        <span className="px-4 text-sm text-gray-500">Or</span>
        <div className="flex-grow border-t border-gray-200"></div>
      </div>
      
      <div className="flex items-center">
        <div className="relative flex-grow">
          <select 
            className="absolute left-0 top-0 h-full py-0 pl-3 pr-7 bg-transparent border-none focus:outline-none text-gray-700"
            defaultValue="USD"
          >
            <option value="USD">USD</option>
          </select>
          <input
            type="text"
            value={donationAmount}
            onChange={handleAmountChange}
            className="w-full pl-16 pr-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500"
            placeholder="Type your amount"
            inputMode="decimal"
          />
        </div>
        
        <select 
          className="ml-2 px-3 py-2 border border-gray-300 rounded-md bg-white focus:outline-none focus:ring-1 focus:ring-purple-500"
          defaultValue="one-time"
        >
          <option value="one-time">One time</option>
        </select>
        
        <button
          type="button"
          onClick={() => onChange(donationAmount || '0')}
          className="ml-2 px-4 py-2 bg-white border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
        >
          Accept
        </button>
      </div>
    </div>
  );
}
// === ./src/components/membership/checkout/InvoiceInfoSection.tsx ===
'use client';

// Types for form data
interface FormData {
    firstName: string;
    lastName: string;
    country: string;
    address: string;
    city: string;
    state: string;
    postalCode: string;
    acceptTerms: boolean;
    acceptNewsletter: boolean;
    [key: string]: string | boolean;
  }
  
  interface Errors {
    firstName?: string;
    lastName?: string;
    acceptTerms?: string;
    [key: string]: string | undefined;
  }
  
  interface InvoiceInfoSectionProps {
    formData: FormData;
    errors: Errors;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  }

// List of countries for dropdown
const countries = [
  { code: 'CR', name: 'Costa Rica' },
  { code: 'US', name: 'United States' },
  { code: 'CA', name: 'Canada' },
  { code: 'MX', name: 'Mexico' },
  { code: 'UK', name: 'United Kingdom' },
  { code: 'ES', name: 'Spain' },
  { code: 'BR', name: 'Brazil' },
  { code: 'AR', name: 'Argentina' },
  { code: 'CL', name: 'Chile' },
  { code: 'CO', name: 'Colombia' },
  { code: 'PE', name: 'Peru' },
];

export default function InvoiceInfoSection({
  formData,
  errors,
  onChange
}: InvoiceInfoSectionProps) {
  
  // Handle country selection
  const handleCountryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const syntheticEvent = {
      target: {
        name: 'country',
        value: e.target.value,
        type: 'select'
      }
    } as React.ChangeEvent<HTMLInputElement>;
    
    onChange(syntheticEvent);
  };
  
  return (
    <div className="mb-8">
      <h2 className="text-purple-600 text-lg font-medium mb-4">4. Invoice information</h2>
      
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">
            First name <span className="text-red-500">*</span>
          </label>
          <input
            id="firstName"
            name="firstName"
            type="text"
            value={formData.firstName}
            onChange={onChange}
            className={`w-full px-3 py-2 border ${errors.firstName ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
            placeholder="First name"
          />
          {errors.firstName && <p className="mt-1 text-sm text-red-500">{errors.firstName}</p>}
        </div>
        
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">
            Last name <span className="text-red-500">*</span>
          </label>
          <input
            id="lastName"
            name="lastName"
            type="text"
            value={formData.lastName}
            onChange={onChange}
            className={`w-full px-3 py-2 border ${errors.lastName ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
            placeholder="Last name"
          />
          {errors.lastName && <p className="mt-1 text-sm text-red-500">{errors.lastName}</p>}
        </div>
      </div>
      
      <div className="mb-4">
        <label htmlFor="country" className="block text-sm font-medium text-gray-700 mb-1">
          Country
        </label>
        <select
          id="country"
          value={formData.country}
          onChange={handleCountryChange}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500 appearance-none"
        >
          <option value="">Select one...</option>
          {countries.map((country) => (
            <option key={country.code} value={country.code}>
              {country.name}
            </option>
          ))}
        </select>
      </div>
      
      <div className="mb-4">
        <label htmlFor="address" className="block text-sm font-medium text-gray-700 mb-1">
          Street address
        </label>
        <input
          id="address"
          name="address"
          type="text"
          value={formData.address}
          onChange={onChange}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500"
          placeholder="Insert address"
        />
      </div>
      
      <div className="mb-4">
        <label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-1">
          City
        </label>
        <input
          id="city"
          name="city"
          type="text"
          value={formData.city}
          onChange={onChange}
          className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500"
          placeholder="Insert city"
        />
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label htmlFor="state" className="block text-sm font-medium text-gray-700 mb-1">
            State / Province
          </label>
          <input
            id="state"
            name="state"
            type="text"
            value={formData.state}
            onChange={onChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500"
            placeholder="Insert state"
          />
        </div>
        
        <div>
          <label htmlFor="postalCode" className="block text-sm font-medium text-gray-700 mb-1">
            ZIP / Postal code
          </label>
          <input
            id="postalCode"
            name="postalCode"
            type="text"
            value={formData.postalCode}
            onChange={onChange}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500"
            placeholder="Insert postal code"
          />
        </div>
      </div>
      
      <div className="mt-4">
        <label className="flex items-center">
          <input
            type="checkbox"
            name="acceptTerms"
            checked={formData.acceptTerms as boolean}
            onChange={onChange}
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <span className="ml-2 text-sm text-gray-700">
            I accept the <a href="/terms" className="text-purple-600 hover:text-purple-500">Terms of Service</a> for Sat Yoga and confirm that I have reviewed the <a href="/privacy" className="text-purple-600 hover:text-purple-500">Privacy Policy</a>.
          </span>
        </label>
        {errors.acceptTerms && <p className="mt-1 text-sm text-red-500">{errors.acceptTerms}</p>}
      </div>
      
      <div className="mt-2">
        <label className="flex items-center">
          <input
            type="checkbox"
            name="acceptNewsletter"
            checked={formData.acceptNewsletter as boolean}
            onChange={onChange}
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <span className="ml-2 text-sm text-gray-700">
            I accept receiving the newsletter.
          </span>
        </label>
      </div>
    </div>
  );
}
// === ./src/components/membership/checkout/OrderSummary.tsx ===
'use client';

// Types for membership plan
interface MembershipPlan {
  id: string;
  title: string;
  monthlyPrice: number;
  yearlyPrice: number;
  tagline: string;
  features: string[];
  hasTrial?: boolean;
  trialDays?: number;
}

// Types for order summary
interface OrderSummaryData {
  subtotal: number;
  discount: number;
  tax: number;
  total: number;
  discountCode?: string;
  trial?: {
    days: number;
  };
}

// Types for form data
interface FormData {
    acceptTerms: boolean;
    acceptNewsletter: boolean;
    [key: string]: string | boolean;
  }
  
  interface OrderSummaryProps {
    plan: MembershipPlan;
    isMonthly: boolean;
    orderSummary: OrderSummaryData;
    discountCode: string;
    onDiscountChange: (code: string) => void;
    onApplyDiscount: () => void;
    onRemoveDiscount: () => void;
    formData: FormData;
  }

export default function OrderSummary({
  plan,
  isMonthly,
  orderSummary,
  discountCode,
  onDiscountChange,
  onApplyDiscount,
  onRemoveDiscount,
  formData
}: OrderSummaryProps) {
  
  const price = isMonthly ? plan.monthlyPrice : plan.yearlyPrice;
  
  return (
    <div className="bg-white p-6 rounded-lg border border-gray-200 sticky top-4">
      <h2 className="text-xl font-bold mb-4">{plan.title}</h2>
      
      <div className="mb-6">
        <div className="text-3xl font-bold">${orderSummary.total}<span className="text-lg font-normal text-gray-500">/mo</span></div>
        {plan.hasTrial && (
          <div className="text-sm text-gray-500 mt-1">{plan.trialDays} days free trial</div>
        )}
      </div>
      
      <div className="mb-6">
        <h3 className="font-medium mb-2">Includes:</h3>
        <ul className="space-y-2">
          {plan.features.map((feature, index) => (
            <li key={index} className="flex items-center">
              <svg className="h-5 w-5 text-gray-900 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
              <span className="text-gray-700">{feature}</span>
            </li>
          ))}
        </ul>
        <button className="text-purple-600 text-sm font-medium mt-3">View all details</button>
      </div>
      
      <div className="mb-6">
        <h3 className="font-medium mb-2">Discount code</h3>
        {orderSummary.discountCode ? (
          <div className="flex items-center justify-between bg-gray-50 p-2 rounded">
            <span className="font-medium">"{orderSummary.discountCode}"</span>
            <button 
              onClick={onRemoveDiscount} 
              className="text-purple-600 font-medium"
            >
              Remove
            </button>
          </div>
        ) : (
          <div className="relative">
            <input 
              type="text" 
              value={discountCode}
              onChange={(e) => onDiscountChange(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
              placeholder="Enter discount code"
            />
            <button 
              onClick={onApplyDiscount}
              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium"
            >
              Apply
            </button>
          </div>
        )}
      </div>
      
      <div className="border-t border-gray-200 pt-4 mb-4">
        <div className="flex justify-between mb-2">
          <span>Subtotal</span>
          <span>${orderSummary.subtotal.toFixed(2)}</span>
        </div>
        {orderSummary.discount > 0 && (
          <div className="flex justify-between text-green-600 mb-2">
            <span>Discount {orderSummary.discountCode && `"${orderSummary.discountCode}"`}</span>
            <span>-${orderSummary.discount.toFixed(2)}</span>
          </div>
        )}
        {orderSummary.tax > 0 && (
          <div className="flex justify-between mb-2">
            <span>Tax</span>
            <span>${orderSummary.tax.toFixed(2)}</span>
          </div>
        )}
      </div>
      
      <div className="flex justify-between font-bold text-lg mb-6">
        <span>Total</span>
        <span>${orderSummary.total.toFixed(2)}</span>
      </div>
      
      <div className="text-sm text-gray-700 mb-4">
        Your subscription will automatically renew. After the {plan.hasTrial ? `${plan.trialDays} days free trial` : 'initial period'}, you will be charged ${price}/mo, plus applicable taxes, on each renewal until you cancel your subscription.
      </div>
      
      <div className="space-y-2">
        <label className="flex items-center">
          <input
            type="checkbox"
            checked={formData.acceptTerms as boolean}
            readOnly
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <span className="ml-2 text-sm text-gray-700">
            I accept the <a href="/terms" className="text-purple-600 hover:text-purple-500">Terms of Service</a> for Sat Yoga and confirm that I have reviewed the <a href="/privacy" className="text-purple-600 hover:text-purple-500">Privacy Policy</a>.
          </span>
        </label>
        
        <label className="flex items-center">
          <input
            type="checkbox"
            checked={formData.acceptNewsletter as boolean}
            readOnly
            className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
          />
          <span className="ml-2 text-sm text-gray-700">
            I accept receiving the newsletter.
          </span>
        </label>
      </div>
      
      <div className="mt-6">
        <button
          type="button"
          className="w-full py-2 px-4 text-center text-blue-600 hover:text-blue-700 text-sm"
        >
          Need help? Chat with us!
        </button>
      </div>
    </div>
  )};
// === ./src/components/membership/checkout/PaymentInfoSection.tsx ===
'use client';

// Types for form data
interface FormData {
    cardNumber: string;
    expiryDate: string;
    cvv: string;
    [key: string]: string | boolean;
  }
  
  interface Errors {
    cardNumber?: string;
    expiryDate?: string;
    cvv?: string;
    [key: string]: string | undefined;
  }
  
  interface PaymentInfoSectionProps {
    formData: FormData;
    errors: Errors;
    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
    processing: boolean;
  }
export default function PaymentInfoSection({
  formData,
  errors,
  onChange,
  processing
}: PaymentInfoSectionProps) {
  
  // Format card number with spaces after every 4 digits
  const formatCardNumber = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const formattedValue = value.match(/.{1,4}/g)?.join(' ') || value;
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        name: 'cardNumber',
        value: formattedValue
      }
    };
    
    onChange(syntheticEvent);
  };
  
  // Format expiry date as MM/YY
  const formatExpiryDate = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    let formattedValue = value;
    
    if (value.length > 2) {
      formattedValue = `${value.substring(0, 2)}/${value.substring(2, 4)}`;
    }
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        name: 'expiryDate',
        value: formattedValue
      }
    };
    
    onChange(syntheticEvent);
  };
  
  // Allow only numbers for CVV
  const formatCVV = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value.replace(/\D/g, '');
    
    const syntheticEvent = {
      ...e,
      target: {
        ...e.target,
        name: 'cvv',
        value
      }
    };
    
    onChange(syntheticEvent);
  };
  
  return (
    <div className="mb-8">
      <h2 className="text-purple-600 text-lg font-medium mb-4">3. Payment information</h2>
      
      <div className="mb-4">
        <label htmlFor="cardNumber" className="block text-sm font-medium text-gray-700 mb-1">
          Card number <span className="text-red-500">*</span>
        </label>
        <div className="relative">
          <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
            <svg className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
            </svg>
          </div>
          <input
            id="cardNumber"
            type="text"
            value={formData.cardNumber}
            onChange={formatCardNumber}
            disabled={processing}
            className={`w-full pl-10 pr-3 py-2 border ${errors.cardNumber ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
            placeholder="0000 0000 0000 0000"
            maxLength={19}
          />
        </div>
        {errors.cardNumber && <p className="mt-1 text-sm text-red-500">{errors.cardNumber}</p>}
      </div>
      
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label htmlFor="expiryDate" className="block text-sm font-medium text-gray-700 mb-1">
            Expiry <span className="text-red-500">*</span>
          </label>
          <input
            id="expiryDate"
            type="text"
            value={formData.expiryDate}
            onChange={formatExpiryDate}
            disabled={processing}
            className={`w-full px-3 py-2 border ${errors.expiryDate ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
            placeholder="MM/YY"
            maxLength={5}
          />
          {errors.expiryDate && <p className="mt-1 text-sm text-red-500">{errors.expiryDate}</p>}
        </div>
        
        <div>
          <label htmlFor="cvv" className="block text-sm font-medium text-gray-700 mb-1">
            CVV <span className="text-red-500">*</span>
          </label>
          <input
            id="cvv"
            type="text"
            value={formData.cvv}
            onChange={formatCVV}
            disabled={processing}
            className={`w-full px-3 py-2 border ${errors.cvv ? 'border-red-500' : 'border-gray-300'} rounded-md focus:outline-none focus:ring-1 focus:ring-purple-500`}
            placeholder="000"
            maxLength={4}
          />
          {errors.cvv && <p className="mt-1 text-sm text-red-500">{errors.cvv}</p>}
        </div>
      </div>
      
      <div className="mt-4 bg-yellow-50 border-l-4 border-yellow-400 p-4">
        <div className="flex items-start">
          <div className="flex-shrink-0">
            <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
          </div>
          <div className="ml-3">
            <p className="text-sm text-yellow-700">
              For this demo, you can enter any card details. No actual payment will be processed.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
// === ./src/components/membership/checkout/PlanSelectionSection.tsx ===
'use client';

// Types for membership plans
interface MembershipPlan {
  id: string;
  title: string;
  monthlyPrice: number;
  yearlyPrice: number;
  annualSavings: number;
  tagline: string;
  features: string[];
  hasTrial?: boolean;
  trialDays?: number;
  popular?: boolean;
}

interface PlanSelectionSectionProps {
  plans: MembershipPlan[];
  selectedPlan: string;
  isMonthly: boolean;
  onSelectPlan: (planId: string) => void;
  onToggleBilling: () => void;
}

export default function PlanSelectionSection({
  plans,
  selectedPlan,
  isMonthly,
  onSelectPlan,
  onToggleBilling
}: PlanSelectionSectionProps) {
  return (
    <div className="mb-8">
      <h2 className="text-purple-600 text-lg font-medium mb-4">2. Choose your plan</h2>
      <p className="text-gray-700 mb-4">Select a membership plan that best suits your spiritual journey.</p>
      
      {/* Billing toggle */}
      <div className="flex justify-center mb-6">
        <div className="inline-flex items-center bg-gray-100 rounded-full p-1">
          <button
            type="button"
            onClick={() => isMonthly ? null : onToggleBilling()}
            className={`px-4 py-2 rounded-full text-sm font-medium ${
              isMonthly ? 'bg-white shadow' : 'text-gray-700'
            }`}
          >
            Monthly
          </button>
          <button
            type="button"
            onClick={() => isMonthly ? onToggleBilling() : null}
            className={`px-4 py-2 rounded-full text-sm font-medium ${
              !isMonthly ? 'bg-white shadow' : 'text-gray-700'
            }`}
          >
            Yearly (save 25%)
          </button>
        </div>
      </div>
      
      {/* Plan options */}
      <div className="space-y-4">
        {plans.map((plan) => {
          const price = isMonthly ? plan.monthlyPrice : plan.yearlyPrice;
          const billingLabel = isMonthly 
            ? 'Billed Monthly' 
            : `Billed Annually (Save ${plan.annualSavings}$)`;
          
          return (
            <div
              key={plan.id}
              className={`border rounded-lg p-4 ${
                selectedPlan === plan.id
                  ? 'border-purple-500 bg-purple-50'
                  : 'border-gray-200 hover:border-gray-300'
              } ${plan.popular ? 'relative' : ''}`}
            >
              {plan.popular && (
                <div className="absolute top-0 right-0 bg-purple-100 text-purple-600 text-xs font-medium px-2 py-1 rounded-bl-lg">
                  Most recommended
                </div>
              )}
              
              <label className="flex items-center cursor-pointer">
                <input
                  type="radio"
                  className="form-radio h-5 w-5 text-purple-600 focus:ring-purple-500"
                  checked={selectedPlan === plan.id}
                  onChange={() => onSelectPlan(plan.id)}
                />
                
                <div className="ml-4 flex-grow">
                  <div className="flex flex-wrap items-baseline">
                    <h3 className="text-lg font-medium mr-2">{plan.title}</h3>
                    <div className="flex items-center">
                      <span className="text-2xl font-bold">${price}</span>
                      <span className="text-gray-500 ml-1">/mo</span>
                    </div>
                  </div>
                  
                  <p className="text-sm text-gray-500 mb-1">{billingLabel}</p>
                  
                  {plan.hasTrial && (
                    <div className="text-sm text-gray-700 mb-2">
                      {plan.trialDays} days free trial
                    </div>
                  )}
                  
                  <p className="text-gray-700 font-medium mt-2">{plan.tagline}</p>
                </div>
              </label>
            </div>
          );
        })}
      </div>
    </div>
  );
}
// === ./src/components/membership/checkout/SuccessModal.tsx ===
'use client';

interface SuccessModalProps {
  onClose: () => void;
  onSignUp: () => void;
}

export default function SuccessModal({ onClose, onSignUp }: SuccessModalProps) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg max-w-md w-full p-6">
        <div className="text-center">
          <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
            <svg className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          
          <h3 className="text-lg font-medium text-gray-900 mb-2">Purchase completed!</h3>
          <p className="text-sm text-gray-600 mb-4">
            You will receive an email with your receipt and access instructions.
          </p>
          
          <div className="mt-4 flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"
            >
              Close
            </button>
            <button
              type="button"
              onClick={onSignUp}
              className="bg-gray-900 py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-gray-800"
            >
              Sign up
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
// === ./src/components/reports/pivot-table.tsx ===
'use client'

import { useState } from 'react'
import PivotTableUI from 'react-pivottable/PivotTableUI'
import TableRenderers from 'react-pivottable/TableRenderers'
import Plot from 'react-plotly.js'
import createPlotlyRenderers from 'react-pivottable/PlotlyRenderers'
import 'react-pivottable/pivottable.css'

// Create Plotly renderers
const PlotlyRenderers = createPlotlyRenderers(Plot)

interface PivotTableProps {
  data: any[]
}

export function PivotTable({ data }: PivotTableProps) {
  const formattedData = data.map(item => ({
    ...item.attributes,
    id: item.id,
    applicationDate: new Date(item.attributes.createdAt).toLocaleDateString(),
  }))

  const [pivotState, setPivotState] = useState({})

  return (
    <div className="mt-4 overflow-auto">
      {/* @ts-ignore */}
      <PivotTableUI 
        data={formattedData}
        onChange={s => setPivotState(s)}
        renderers={Object.assign({}, TableRenderers, PlotlyRenderers)}
        {...pivotState}
      />
    </div>
  )
}
// === ./src/components/sections/BlogSection.tsx ===
'use client';

import { useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';

// Types
export interface Author {
  name: string;
  imageUrl?: string;
}

export interface BlogPost {
  title: string;
  excerpt: string;
  category: string;
  author: Author;
  date: string;
  slug: string;
  imageUrl?: string;
  readTime: number;
}

interface BlogCardProps {
  post: BlogPost;
}

export const BlogCard: React.FC<BlogCardProps> = ({ post }) => {
  const { title, excerpt, category, author, date, slug, imageUrl, readTime } = post;
  
  return (
    <div className="bg-white rounded-lg overflow-hidden border border-gray-100 transition-shadow hover:shadow-md">
      {/* Image Container */}
      <div className="relative aspect-w-16 aspect-h-9 bg-gray-200">
        {imageUrl ? (
          <Image
            src={imageUrl}
            alt={title}
            fill
            className="object-cover"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center">
            <svg
              className="h-12 w-12 text-gray-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={1}
                d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
              />
            </svg>
          </div>
        )}
        
        {/* Bookmark Button */}
        <button 
          className="absolute top-3 right-3 w-8 h-8 rounded-full bg-white shadow flex items-center justify-center text-gray-500 hover:text-gray-900"
          aria-label="Bookmark article"
          type="button"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
          </svg>
        </button>
      </div>
      
      {/* Content */}
      <div className="p-5">
        {/* Category */}
        <p className="text-sm font-medium text-gray-600 mb-2">
          {category}
        </p>
        
        {/* Title */}
        <h3 className="text-xl font-bold mb-2 line-clamp-2">
          <Link href={`/blog/${slug}`} className="hover:text-purple-700">
            {title}
          </Link>
        </h3>
        
        {/* Excerpt */}
        <p className="text-gray-600 mb-4 line-clamp-3">
          {excerpt}
        </p>
        
        {/* Author and Date */}
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-full bg-gray-200 mr-3 flex-shrink-0">
            {author.imageUrl ? (
              <Image
                src={author.imageUrl}
                alt={author.name}
                width={32}
                height={32}
                className="rounded-full"
              />
            ) : (
              <div className="w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center">
                <span className="text-sm font-medium text-purple-700">
                  {author.name.charAt(0)}
                </span>
              </div>
            )}
          </div>
          <div>
            <p className="text-sm font-medium">{author.name}</p>
            <p className="text-xs text-gray-500">
              {date} • {readTime} min read
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

interface BlogSectionProps {
  title?: string;
  description?: string;
  posts: BlogPost[];
  viewAllLink?: string;
}

const BlogSection: React.FC<BlogSectionProps> = ({
  title = "Welcome to our blog",
  description = "Explore transformative insights from Sat Yoga, including deep reflections, spiritual guidance, and practical wisdom to support your journey of self-discovery and liberation.",
  posts = [],
  viewAllLink = "/blog",
}) => {
  const [currentPage, setCurrentPage] = useState(0);
  
  // Logic for pagination dots
  const itemsPerPage = 3;
  const totalPages = Math.ceil(posts.length / itemsPerPage);
  
  const handlePrevPage = () => {
    setCurrentPage((prev) => (prev > 0 ? prev - 1 : prev));
  };
  
  const handleNextPage = () => {
    setCurrentPage((prev) => (prev < totalPages - 1 ? prev + 1 : prev));
  };
  
  const visiblePosts = posts.slice(
    currentPage * itemsPerPage,
    (currentPage + 1) * itemsPerPage
  );
  
  return (
    <section className="py-16 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-12">
          <div className="max-w-2xl mb-6 md:mb-0">
            <p className="text-purple-600 font-medium mb-2">Latest blog</p>
            <h2 className="text-3xl md:text-4xl font-bold mb-4">{title}</h2>
            <p className="text-gray-600">{description}</p>
          </div>
          
          <Link 
            href={viewAllLink}
            className="inline-flex items-center font-medium text-gray-900 hover:text-purple-700"
          >
            View all
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </Link>
        </div>
        
        {/* Blog Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8">
          {visiblePosts.map((post, index) => (
            <BlogCard key={index} post={post} />
          ))}
        </div>
        
        {/* Pagination Controls */}
        {totalPages > 1 && (
          <div className="flex justify-center items-center mt-10">
            {/* Prev Button */}
            <button
              onClick={handlePrevPage}
              disabled={currentPage === 0}
              className="w-10 h-10 rounded-full flex items-center justify-center border border-gray-300 mr-4 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Previous page"
              type="button"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
              </svg>
            </button>
            
            {/* Pagination Dots */}
            <div className="flex space-x-2">
              {Array.from({ length: totalPages }).map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentPage(index)}
                  className={`w-2 h-2 rounded-full ${
                    currentPage === index ? 'bg-gray-800' : 'bg-gray-300'
                  }`}
                  aria-label={`Go to page ${index + 1}`}
                  type="button"
                />
              ))}
            </div>
            
            {/* Next Button */}
            <button
              onClick={handleNextPage}
              disabled={currentPage === totalPages - 1}
              className="w-10 h-10 rounded-full flex items-center justify-center border border-gray-300 ml-4 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Next page"
              type="button"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
        )}
      </div>
    </section>
  );
};

export default BlogSection;
// === ./src/components/sections/ContentSection.tsx ===
'use client';

import Image from 'next/image';
import Link from 'next/link';

interface Button {
  label: string;
  url?: string;
  primary?: boolean;
}

interface Subheading {
  title: string;
  content: string;
}

interface ContentSectionProps {
  eyebrow?: string;
  heading?: string;
  content?: string;
  bulletPoints?: string[];
  buttons?: Button[];
  imageUrl?: string;
  imageAlt?: string;
  imagePosition?: 'left' | 'right';
  subheadings?: Subheading[];
}

const ContentSection: React.FC<ContentSectionProps> = ({
  eyebrow,
  heading = "Medium length section heading goes here",
  content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat.",
  bulletPoints = [],
  buttons = [],
  imageUrl = "/placeholder.png",
  imageAlt = "Section image",
  imagePosition = "right", 
  subheadings = [],
}) => {
  return (
    <section className="py-16 md:py-24">
      <div className="container mx-auto px-4">
        <div className={`flex flex-col ${imagePosition === 'right' ? 'md:flex-row' : 'md:flex-row-reverse'} items-center md:gap-12 lg:gap-20`}>
          {/* Content Side */}
          <div className="w-full md:w-1/2 mb-10 md:mb-0">
            {eyebrow && (
              <p className="text-purple-600 font-medium mb-3">{eyebrow}</p>
            )}
            
            <h2 className="text-3xl md:text-4xl font-bold mb-6">
              {heading}
            </h2>
            
            <div className="text-gray-700 mb-6">
              <p>{content}</p>
            </div>
            
            {bulletPoints.length > 0 && (
              <ul className="space-y-3 mb-8">
                {bulletPoints.map((point, index) => (
                  <li key={index} className="flex items-start">
                    <svg 
                      className="h-5 w-5 text-purple-600 mr-2 mt-0.5" 
                      fill="none" 
                      viewBox="0 0 24 24" 
                      stroke="currentColor"
                    >
                      <path 
                        strokeLinecap="round" 
                        strokeLinejoin="round" 
                        strokeWidth={2} 
                        d="M9 12l2 2 4-4" 
                      />
                    </svg>
                    <span>{point}</span>
                  </li>
                ))}
              </ul>
            )}
            
            {subheadings.length > 0 && (
              <div className="grid md:grid-cols-2 gap-6 mb-8">
                {subheadings.map((subheading, index) => (
                  <div key={index}>
                    <h3 className="text-xl font-bold mb-2">{subheading.title}</h3>
                    <p className="text-gray-700">{subheading.content}</p>
                  </div>
                ))}
              </div>
            )}
            
            {buttons.length > 0 && (
              <div className="flex flex-wrap gap-4">
                {buttons.map((button, index) => (
                  <Link 
                    key={index}
                    href={button.url || '#'}
                    className={`px-6 py-3 rounded-md font-medium ${
                      button.primary
                        ? 'bg-gray-900 text-white hover:bg-gray-800'
                        : 'border border-gray-300 hover:bg-gray-50'
                    }`}
                  >
                    {button.label}
                  </Link>
                ))}
              </div>
            )}
          </div>
          
          {/* Image Side */}
          <div className="w-full md:w-1/2">
            <div className="aspect-w-4 aspect-h-3 bg-gray-200 rounded-lg overflow-hidden">
              {imageUrl ? (
                <Image 
                  src={imageUrl} 
                  alt={imageAlt}
                  width={500}
                  height={500}
                  className="object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center bg-gray-200">
                  <svg 
                    className="h-16 w-16 text-gray-400" 
                    fill="none" 
                    viewBox="0 0 24 24" 
                    stroke="currentColor"
                  >
                    <path 
                      strokeLinecap="round" 
                      strokeLinejoin="round" 
                      strokeWidth={1} 
                      d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" 
                    />
                  </svg>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ContentSection;
// === ./src/components/sections/CtaSection.tsx ===
'use client';

import Link from 'next/link';

interface CtaSectionProps {
  eyebrow?: string;
  heading?: string;
  description?: string;
  primaryButtonText?: string;
  primaryButtonLink?: string;
  secondaryButtonText?: string;
  secondaryButtonLink?: string;
  centered?: boolean;
  backgroundClass?: string;
}

const CtaSection: React.FC<CtaSectionProps> = ({
  eyebrow = "Become a member",
  heading = "Short heading here",
  description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique.",
  primaryButtonText = "Button",
  primaryButtonLink = "#",
  secondaryButtonText = "",
  secondaryButtonLink = "#",
  centered = true,
  backgroundClass = "bg-white",
}) => {
  return (
    <section className={`py-16 ${backgroundClass}`}>
      <div className="container mx-auto px-4">
        <div className={`max-w-3xl ${centered ? 'mx-auto text-center' : ''}`}>
          {eyebrow && (
            <p className="text-purple-600 font-medium mb-3">{eyebrow}</p>
          )}
          
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            {heading}
          </h2>
          
          <p className="text-gray-700 mb-8">
            {description}
          </p>
          
          <div className={`flex flex-wrap gap-4 ${centered ? 'justify-center' : ''}`}>
            <Link 
              href={primaryButtonLink}
              className="bg-gray-900 text-white rounded-md px-6 py-3 font-medium hover:bg-gray-800"
            >
              {primaryButtonText}
            </Link>
            
            {secondaryButtonText && (
              <Link 
                href={secondaryButtonLink}
                className="bg-white text-gray-700 border border-gray-300 rounded-md px-6 py-3 font-medium hover:bg-gray-50"
              >
                {secondaryButtonText}
              </Link>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default CtaSection;
// === ./src/components/sections/Hero.tsx ===
'use client';

import Link from 'next/link';
import Image from 'next/image';

interface HeroProps {
  heading: string;
  content: string;
  buttonText: string;
  buttonLink: string;
  darkMode?: boolean;
  backgroundImage?: string;
  alignContent?: 'center' | 'left' | 'right';
  size?: 'small' | 'medium' | 'large';
}

const Hero: React.FC<HeroProps> = ({ 
  heading = "Medium length hero heading goes here",
  content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse varius enim in eros elementum tristique. Duis cursus, mi quis viverra ornare, eros dolor interdum nulla, ut commodo diam libero vitae erat.",
  buttonText = "Button",
  buttonLink = "#",
  darkMode = true,
  backgroundImage,
  alignContent = 'center',
  size = 'medium'
}) => {
  // Determine padding based on size
  const paddingClasses = {
    small: 'py-12',
    medium: 'py-20',
    large: 'py-32'
  };
  
  // Determine text alignment
  const alignmentClasses = {
    center: 'text-center mx-auto',
    left: 'text-left mr-auto',
    right: 'text-right ml-auto'
  };
  
  return (
    <section className={`relative ${paddingClasses[size]} ${darkMode ? 'text-white' : 'text-gray-900'}`}>
      {/* Background color or image */}
      {backgroundImage ? (
        <div className="absolute inset-0 z-0">
          <Image 
            src={backgroundImage}
            alt="Hero background"
            fill
            priority
            className="object-cover"
            sizes="100vw"
          />
          <div className={`absolute inset-0 bg-black ${darkMode ? 'opacity-60' : 'opacity-30'}`}></div>
        </div>
      ) : (
        <div className={`absolute inset-0 z-0 ${darkMode ? 'bg-gray-800' : 'bg-white'}`}></div>
      )}
      
      {/* Content */}
      <div className="container relative z-10 mx-auto px-4">
        <div className={`max-w-3xl ${alignmentClasses[alignContent]}`}>
          <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold mb-6">
            {heading}
          </h1>
          
          <p className="text-lg md:text-xl mb-8 opacity-90">
            {content}
          </p>
          
          <Link 
            href={buttonLink}
            className={`inline-block rounded-md px-6 py-3 font-medium transition-colors ${
              darkMode 
                ? 'bg-white text-gray-900 hover:bg-gray-100' 
                : 'bg-gray-900 text-white hover:bg-gray-800'
            }`}
          >
            {buttonText}
          </Link>
        </div>
      </div>
    </section>
  );
};

export default Hero;
// === ./src/components/sections/LearningTabs.tsx ===
'use client';

import { useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';

interface TabContent {
  id: string;
  label: string;
  title: string;
  description: string;
  buttonText: string;
  buttonLink: string;
  imageUrl?: string;
}

interface TabContentProps {
  content: TabContent;
  isActive: boolean;
}

const TabContent: React.FC<TabContentProps> = ({ content, isActive }) => {
  if (!isActive) return null;
  
  return (
    <div className="p-6 bg-white rounded-b-lg border-t border-gray-100">
      <div className="grid md:grid-cols-2 gap-8 items-start">
        <div>
          <p className="text-purple-600 font-medium mb-3">{content.label}</p>
          <h3 className="text-3xl font-bold mb-4">{content.title}</h3>
          <p className="text-gray-700 mb-6">{content.description}</p>
          
          <Link 
            href={content.buttonLink} 
            className="inline-block bg-gray-900 text-white rounded-md px-6 py-3 font-medium hover:bg-gray-800"
          >
            {content.buttonText}
          </Link>
        </div>
        
        <div className="bg-gray-200 rounded-lg aspect-w-4 aspect-h-3">
          {content.imageUrl ? (
            <Image 
              src={content.imageUrl} 
              alt={content.title} 
              fill
              className="object-cover rounded-lg"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <svg 
                className="h-16 w-16 text-gray-400" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={1} 
                  d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" 
                />
              </svg>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

interface LearningTabsProps {
  title?: string;
  description?: string;
  tabs?: TabContent[];
}

const LearningTabs: React.FC<LearningTabsProps> = ({
  title = "How to learn online with Sat Yoga?",
  description = "Sat Yoga offers a range of online learning options to support your growth, including immersive retreats, a personalized membership with tailored content, and resources available in our store. Learn at your own pace, wherever you are.",
  tabs = [
    {
      id: 'free-teachings',
      label: 'Free teachings',
      title: 'Start Your Journey with Free Wisdom',
      description: 'Explore our selection of free teachings and get a taste of the transformative content offered at Sat Yoga. These accessible resources are designed to introduce you to key principles of healing, mindfulness, and personal growth, helping you begin or deepen your journey.',
      buttonText: 'Browse teachings',
      buttonLink: '/learn/free-teachings',
      imageUrl: '',
    },
    {
      id: 'membership',
      label: 'Membership Section',
      title: 'Personalized Content for Your Path',
      description: 'Subscribe to our membership and gain access to exclusive content tailored to your unique journey. Enjoy custom lessons, guided practices, and resources that evolve with your needs, all in a supportive community environment.',
      buttonText: 'View memberships',
      buttonLink: '/membership',
      imageUrl: '',
    },
    {
      id: 'retreats',
      label: 'Online Retreats',
      title: 'Transformative Learning from Home',
      description: 'Join our immersive online retreats and experience the wisdom of Sat Yoga\'s teachings. These retreats provide a deep, healing journey, accessible from anywhere, designed to support your personal growth and spiritual awakening.',
      buttonText: 'Browse Retreats',
      buttonLink: '/retreats/online',
      imageUrl: '',
    },
    {
      id: 'courses',
      label: 'Courses',
      title: 'Structured Guidance for Deeper Understanding',
      description: 'Our courses offer comprehensive exploration of specific spiritual topics and practices. Each course includes video teachings, guided meditations, and practical exercises to integrate the wisdom into your daily life.',
      buttonText: 'Explore courses',
      buttonLink: '/learn/courses',
      imageUrl: '',
    },
    {
      id: 'store',
      label: 'Store',
      title: 'Tools to Enhance Your Practice',
      description: 'Browse our curated collection of items in the Sat Yoga store, including books, meditation tools, and healing resources. Each item is carefully selected to support your ongoing learning and spiritual development.',
      buttonText: 'Go to store',
      buttonLink: '/store',
      imageUrl: '',
    },
  ],
}) => {
  const [activeTab, setActiveTab] = useState(tabs[0]?.id || '');
  
  const handleTabClick = (tabId: string) => {
    setActiveTab(tabId);
  };
  
  const activeContent = tabs.find(tab => tab.id === activeTab);
  
  return (
    <section className="py-16 bg-gray-50">
      <div className="container mx-auto px-4">
        {/* Section Header */}
        <div className="text-center max-w-3xl mx-auto mb-12">
          <p className="text-purple-600 font-medium mb-3">More Online Learning Options</p>
          <h2 className="text-3xl md:text-4xl font-bold mb-6">{title}</h2>
          <p className="text-gray-700">{description}</p>
        </div>
        
        {/* Tabs Navigation */}
        <div className="rounded-lg overflow-hidden mb-8 border border-gray-200">
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                className={`py-4 px-4 text-center font-medium transition ${
                  activeTab === tab.id
                    ? 'text-gray-900 border-b-2 border-purple-600 bg-white'
                    : 'text-gray-700 hover:text-gray-900 bg-gray-50 hover:bg-gray-100 border-b border-gray-200'
                }`}
                onClick={() => handleTabClick(tab.id)}
                type="button"
              >
                {tab.label}
              </button>
            ))}
          </div>
          
          {/* Tab Content */}
          {tabs.map((tab) => (
            <TabContent
              key={tab.id}
              content={tab}
              isActive={activeTab === tab.id}
            />
          ))}
        </div>
      </div>
    </section>
  );
};

export default LearningTabs;
// === ./src/components/teachings/TeachingDetail.tsx ===
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import VideoPlayer from '@/components/videoPlayer/VideoPlayer';

import { teachings as dump } from '@/lib/json_dump';
import type { Teaching } from '@/lib/types';

interface Props {
  params: { slug: string };
}

const TeachingDetailPage: React.FC<Props> = ({ params }) => {
  const { data: session } = useSession();
  const router = useRouter();
  const [mounted, setMounted] = useState(false);
  const [showLoginOverlay, setShowLoginOverlay] = useState(false);

  useEffect(() => setMounted(true), []);

  /* ───── find the requested post ───── */
  const teaching = dump.find((t) => t.slug === params.slug) as Teaching | undefined;

  if (!teaching) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center">
        <p className="text-xl text-red-600 mb-6">Teaching not found.</p>
        <button onClick={() => router.back()} className="px-4 py-2 bg-gray-800 text-white rounded-md">
          Go back
        </button>
      </div>
    );
  }

  const requiresAuth = teaching.type === 'membership';

  /* ───── helpers to render media blocks ───── */
  const renderVideo = () => {
    if (teaching.videoPlatform === 'none' || !teaching.videoId) return null;

    if (teaching.videoPlatform === 'cloudflare') {
      return (
        <VideoPlayer
          videoId={teaching.videoId}
          isFreePreview={teaching.type === 'free'}
          previewDuration={60}
        />
      );
    }

    const src =
      teaching.videoPlatform === 'youtube'
        ? `https://www.youtube.com/embed/${teaching.videoId}`
        : teaching.videoPlatform === 'rumble'
        ? `https://rumble.com/embed/${teaching.videoId}/`
        : teaching?.videoUrl; // fallback

    return (
      <iframe
        className="w-full aspect-video"
        src={src || ""}
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        allowFullScreen
      />
    );
  };

  const renderAudio = () =>
    teaching.audioUrl && (
      <audio className="w-full my-6" controls src={teaching.audioUrl}>
        Your browser does not support the audio element.
      </audio>
    );

  /* ───── UI starts here ───── */
  return (
    <div className="bg-white min-h-screen">
      <div className="container mx-auto px-4 py-12 max-w-4xl">
        {/* breadcrumbs */}
        <div className="flex items-center text-sm text-gray-600 mb-6">
          <Link href="/teachings" className="hover:text-gray-900">
            Teachings
          </Link>
          <svg
            className="w-4 h-4 mx-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            strokeWidth={2}
          >
            <path d="M9 18l6-6-6-6" />
          </svg>
          <span className="font-medium text-gray-900">{teaching.title}</span>
        </div>

        {/* membership gate */}
        {requiresAuth && !session ? (
          <div className="bg-gray-100 p-6 rounded-lg text-center">
            <h2 className="text-xl font-bold mb-2">Membership Required</h2>
            <p className="mb-6">
              This content is only available to members. Please log in or sign up to access it.
            </p>
            <div className="flex justify-center gap-4">
              <Link href="/login" className="px-4 py-2 bg-gray-800 text-white rounded-md hover:bg-gray-700">
                Log In
              </Link>
              <Link href="/signup" className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700">
                Sign Up
              </Link>
            </div>
          </div>
        ) : (
          <>
            {/* media */}
            {renderVideo()}
            {renderAudio()}

            {/* title & meta */}
            <div className="mt-6 mb-4">
              <div className="flex items-center text-gray-600 text-sm mb-2 gap-x-4">
                {teaching.date && <span>{teaching.date}</span>}
                {teaching.duration && (
                  <span className="flex items-center">
                    <svg
                      className="w-4 h-4 mr-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                      strokeWidth={2}
                    >
                      <circle cx="12" cy="12" r="10" />
                      <path d="M12 6v6l4 2" />
                    </svg>
                    {teaching.duration}
                  </span>
                )}
              </div>

              <h1 className="text-3xl font-bold mb-4">{teaching.title}</h1>

              <div className="prose max-w-none">
                {teaching.summary && <p>{teaching.summary}</p>}
                {!teaching.summary && teaching.description && <p>{teaching.description}</p>}

                {/* simple text body for essays or text posts */}
                {Array.isArray(teaching.content) && teaching.content.length > 0 && (
                  <div className="space-y-4">
                    {teaching.content.map((block: any, i: number) => (
                      <p key={i}>{block}</p>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </>
        )}
      </div>

      {/* free-preview overlay handled inside <VideoPlayer> */}
      {showLoginOverlay && !session && (
        <div className="fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-md w-full p-6 relative">
            <button
              onClick={() => setShowLoginOverlay(false)}
              className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>

            <h2 className="text-2xl font-bold mb-4">Preview Ended</h2>
            <p className="text-gray-600 mb-6">
              Sign up for a free account or log in to continue watching this teaching and access our entire
              library.
            </p>

            <div className="space-y-3 mb-6">
              <a
                href="/login?provider=google"
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972a6.033 6.033 0 110-12.064 5.963 5.963 0 014.23 1.74l2.694-2.689A9.99 9.99 0 0012.545 2.001a10.089 10.089 0 00-9.286 6.255 10.034 10.034 0 003.7 12.66 10.003 10.003 0 005.586 1.694c7.058 0 11.668-5.736 10.924-12.01l-10.924-.36z" />
                </svg>
                Sign in with Google
              </a>
              {/* replicate FB / Apple / email links if you want */}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TeachingDetailPage;

// === ./src/components/teachings/Teachings.tsx ===
'use client';

import React, { useState, useEffect, useMemo } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';

import { teachings as dump } from '@/lib/json_dump';
import type { Teaching } from '@/lib/types';

/* ─────────── constants ─────────── */
const contentTypes = [
  'Teachings',
  'Guided Meditations',
  'Q&A with Shunyamurti',
  'Essay',
] as const;

/* ─────────── UI: hero banner ────── */
const LibraryHero: React.FC = () => (
  <div className="relative bg-[#300001] text-white mb-12" style={{ height: '85vh' }}>
    {/* Background image centered */}
    <div className="absolute inset-0 z-0 flex items-center justify-center">
      <div 
        className="border-2 border-[#D4AF37] p-8"
        style={{ 
          width: '480px', 
          height: '480px',
          maxWidth: '90vw',
          maxHeight: '90vh',
          aspectRatio: '1/1'
        }}
      >
        <div className="relative w-full h-full">
          <Image
            src="/spiral.png"
            alt="Inner Labyrinth"
            fill
            className="object-contain"
            priority
          />
        </div>
      </div>
    </div>
    
    {/* Dark gradient overlay - from bottom with emphasis on bottom left */}
    <div 
      className="absolute inset-0 z-5"
      style={{
        background: 'radial-gradient(ellipse 120% 60% at 40% 100%, rgba(0,0,0,0.95) 0%, rgba(0,0,0,0.8) 30%, rgba(0,0,0,0.4) 50%, transparent 70%)'
      }}
    />
    
    {/* Text content in absolute bottom left corner */}
    <div className="absolute bottom-0 left-0 z-10 p-6 pl-10">
      <div className="max-w-2xl">
        <p 
          className="text-sm md:text-base font-bold mb-4 tracking-wide"
          style={{ 
            fontFamily: 'Montserrat, sans-serif',
            fontWeight: 700,
            background: 'linear-gradient(to bottom, #ffffff, #999999)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            backgroundClip: 'text'
          }}
        >
          FREE TEACHINGS LIBRARY
        </p>
        <h1 
          className="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 text-white"
          style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
        >
          Unlock Your Inner Genius
        </h1>
        <p 
          className="text-base md:text-lg leading-relaxed opacity-70"
          style={{ fontFamily: 'Avenir Next, sans-serif', fontWeight: 500, color: '#FAF8F1' }}
        >
          Explore a curated collection of teachings—videos, guided meditations, and essays—from our public offerings, along with a small taste of the exclusive content reserved for our Members Section.
        </p>
      </div>
    </div>
  </div>
);

/* ─────────── UI: login overlay ──── */
const LoginOverlay: React.FC<{ onClose: () => void }> = ({ onClose }) => (
  <div className="fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4">
    <div className="bg-white rounded-lg max-w-md w-full p-6 relative">
      <button
        onClick={onClose}
        className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
        aria-label="Close"
      >
        <svg
          className="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <h2 className="text-2xl font-bold mb-4" style={{ fontFamily: 'Optima, sans-serif' }}>
        Continue browsing our free library
      </h2>
      <p className="text-gray-600 mb-6" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
        Gain access to 500+ publications, exclusive content, and a free
        meditation course
      </p>

      <div className="space-y-3 mb-6">
        <a
          href="/login?provider=google"
          className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
          style={{ fontFamily: 'Avenir Next, sans-serif' }}
        >
          <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972a6.033 6.033 0 110-12.064 5.963 5.963 0 014.23 1.74l2.694-2.689A9.99 9.99 0 0012.545 2.001a10.089 10.089 0 00-9.286 6.255 10.034 10.034 0 003.7 12.66 10.003 10.003 0 005.586 1.694c7.058 0 11.668-5.736 10.924-12.01l-10.924-.36z" />
          </svg>
          Sign in with Google
        </a>

        <a
          href="/login?provider=facebook"
          className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
          style={{ fontFamily: 'Avenir Next, sans-serif' }}
        >
          <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
            <path d="M20.007 3H3.993A.993.993 0 003 3.993v16.014c0 .549.444.993.993.993h8.628v-6.961h-2.343v-2.813h2.343V9.312c0-2.325 1.42-3.591 3.494-3.591.993 0 1.847.073 2.096.106v2.43h-1.44c-1.125 0-1.345.532-1.345 1.315v1.723h2.689l-.35 2.813h-2.339V21h4.573a.993.993 0 00.993-.993V3.993A.993.993 0 0020.007 3z" />
          </svg>
          Sign in with Facebook
        </a>

        <a
          href="/login?provider=apple"
          className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
          style={{ fontFamily: 'Avenir Next, sans-serif' }}
        >
          <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
            <path d="M17.05 20.28c-.98.95-2.05.88-3.08.45-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.47C2.79 15.22 3.51 7.89 8.42 7.56c1.57.05 2.62 1.06 3.54 1.1 1.35-.18 2.63-1.16 4.11-1.22.7.01 2.65.27 3.91 2.08-3.34 2.13-2.79 6.17.55 7.83-2.25 3.96-4.51 4.13-3.86 2.44.41-1.08 1.67-1.72 1.67-1.72-1.5-.92-1.82-3.32-1.29-4.79zM12.03 7.28c-.19-2.15 1.76-4 4.1-4.16.25 2.41-2.16 4.2-4.1 4.16z" />
          </svg>
          Sign in with Apple
        </a>
      </div>

      <div className="flex items-center justify-center my-4">
        <div className="flex-grow border-t border-gray-200"></div>
        <span className="px-4 text-gray-500 text-sm" style={{ fontFamily: 'Avenir Next, sans-serif' }}>OR</span>
        <div className="flex-grow border-t border-gray-200"></div>
      </div>

      <a
        href="/signup"
        className="block text-center text-[#300001] font-medium hover:text-[#4a0002] transition-colors"
        style={{ fontFamily: 'Avenir Next, sans-serif' }}
      >
        Continue with email
      </a>
    </div>
  </div>
);

/* ─────────── UI: teaching card ──── */
const TeachingCard: React.FC<{
  teaching: Teaching;
  onBookmark: (id: string | null) => void;
}> = ({ teaching, onBookmark }) => {
  const router = useRouter();
  const [mounted, setMounted] = useState(false);
  useEffect(() => setMounted(true), []);

  const open = () => router.push(`/teachings/${teaching.slug}`);

  return (
    <div className="rounded-lg overflow-hidden bg-white shadow-sm border border-gray-200 h-full">
      <div className="relative aspect-video bg-gray-200">
        {mounted && (
          <Image
            src={teaching.imageUrl || '/placeholder-video.jpg'}
            alt={teaching.title}
            fill
            className="object-cover cursor-pointer"
            unoptimized
            onClick={open}
          />
        )}

        <div className="absolute inset-0 flex items-center justify-center">
          <button
            onClick={open}
            className="w-16 h-16 rounded-full bg-white bg-opacity-90 flex items-center justify-center shadow-lg hover:bg-opacity-100 transition-all"
          >
            <svg
              className="w-8 h-8 text-[#300001] ml-1"
              viewBox="0 0 24 24"
              fill="currentColor"
            >
              <path d="M8 5v14l11-7z" />
            </svg>
          </button>
        </div>

        <div className="absolute top-3 left-3">
          <span 
            className={`px-3 py-1 rounded-md text-xs font-medium ${
              teaching.type === 'free' 
                ? 'bg-white text-[#300001]' 
                : 'bg-[#300001] text-white'
            }`}
            style={{ fontFamily: 'Avenir Next, sans-serif' }}
          >
            {teaching.type === 'free' ? 'Free' : 'Membership'}
          </span>
        </div>

        <button
          onClick={(e) => {
            e.stopPropagation();
            onBookmark(teaching.id);
          }}
          className="absolute top-3 right-3 w-10 h-10 rounded-full bg-white bg-opacity-90 shadow-lg flex items-center justify-center hover:bg-opacity-100 transition-all"
        >
          <svg
            className="w-5 h-5 text-gray-600"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth={2}
          >
            <path d="M19 21l-7-5-7 5V5a2 2 0 012-2h10a2 2 0 012 2v16z" />
          </svg>
        </button>
      </div>

      <div className="p-6">
        <div className="flex items-center text-gray-500 text-sm mb-3" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
          <svg
            className="w-4 h-4 mr-2"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth={2}
          >
            <circle cx="12" cy="12" r="10" />
            <path d="M12 6v6l4 2" />
          </svg>
          <span>{teaching.duration}</span>
        </div>

        <h3 
          className="text-lg font-medium mb-2 line-clamp-2 text-[#300001]"
          style={{ fontFamily: 'Avenir Next, sans-serif' }}
        >
          {teaching.title}
        </h3>
        <p 
          className="text-sm text-gray-600 line-clamp-3"
          style={{ fontFamily: 'Avenir Next, sans-serif' }}
        >
          {teaching.description}
        </p>
      </div>
    </div>
  );
};

/* ─────────── main component ─────── */
const TeachingLibraryPage: React.FC = () => {
  const { data: session } = useSession();
  const router = useRouter();

  const [activeFilter, setActiveFilter] =
    useState<(typeof contentTypes)[number]>('Teachings');
  const [bookmarks, setBookmarks] = useState<string[]>([]);
  const [showLoginOverlay, setShowLoginOverlay] = useState(false);

  /* The local dump never changes, so memo is fine */
  const featured = dump[0];
  const visible = useMemo(
    () => dump.filter((t) => t.contentType === activeFilter),
    [activeFilter]
  );

  const toggleBookmark = (id: string | null) => {
    if (!id) return;
    if (session) {
      setBookmarks((prev) =>
        prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
      );
    } else {
      setShowLoginOverlay(true);
    }
  };

  return (
    <div className="bg-[#FAF8F1] min-h-screen pb-20">
      <LibraryHero />

      <div className="container mx-auto px-4">
        {/* Latest / featured */}
        {featured && (
          <>
            <div className="flex justify-between items-center mb-8">
              <h2 
                className="text-3xl font-bold text-[#300001]"
                style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
              >
                Latest Teaching
              </h2>
              <Link
                href="/teachings"
                className="bg-[#300001] text-white px-6 py-3 rounded-md text-sm font-medium hover:bg-[#4a0002] transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                View all
              </Link>
            </div>
            <div className="mb-16">
              <div className="bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200">
                <div className="flex flex-col md:flex-row min-h-80">
                  {/* Left side - Image */}
                  <div className="md:w-1/2 relative">
                    <div className="relative h-80 md:h-full bg-gray-200">
                      <Image
                        src={featured.imageUrl || '/placeholder-video.jpg'}
                        alt={featured.title}
                        fill
                        className="object-cover"
                        unoptimized
                      />
                      
                      {/* Play button overlay */}
                      <div className="absolute inset-0 flex items-center justify-center">
                        <button
                          onClick={() => router.push(`/teachings/${featured.slug}`)}
                          className="w-20 h-20 rounded-full bg-white bg-opacity-90 flex items-center justify-center shadow-lg hover:bg-opacity-100 transition-all"
                        >
                          <svg
                            className="w-10 h-10 text-[#300001] ml-1"
                            viewBox="0 0 24 24"
                            fill="currentColor"
                          >
                            <path d="M8 5v14l11-7z" />
                          </svg>
                        </button>
                      </div>

                      {/* Type badge */}
                      <div className="absolute top-4 left-4">
                        <span 
                          className={`px-3 py-1 rounded-md text-xs font-medium ${
                            featured.type === 'free' 
                              ? 'bg-white text-[#300001]' 
                              : 'bg-[#300001] text-white'
                          }`}
                          style={{ fontFamily: 'Avenir Next, sans-serif' }}
                        >
                          {featured.type === 'free' ? 'Free' : 'Membership'}
                        </span>
                      </div>

                      {/* Bookmark button */}
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleBookmark(featured.id);
                        }}
                        className="absolute top-4 right-4 w-10 h-10 rounded-full bg-white bg-opacity-90 shadow-lg flex items-center justify-center hover:bg-opacity-100 transition-all"
                      >
                        <svg
                          className="w-5 h-5 text-gray-600"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth={2}
                        >
                          <path d="M19 21l-7-5-7 5V5a2 2 0 012-2h10a2 2 0 012 2v16z" />
                        </svg>
                      </button>
                    </div>
                  </div>

                  {/* Right side - Content */}
                  <div className="md:w-1/2 p-6 flex flex-col">
                    <div className="flex-1">
                      {/* Date - fallback if no publishedDate */}
                      <div className="inline-flex items-center px-3 py-1 rounded-full bg-gray-100 text-gray-600 text-sm mb-4">
                        <span style={{ fontFamily: 'Avenir Next, sans-serif' }}>
                          {featured.date 
                            ? new Date(featured.date).toLocaleDateString('en-US', { 
                                year: 'numeric', 
                                month: 'short', 
                                day: 'numeric' 
                              })
                            : 'Nov 26, 2024'
                          }
                        </span>
                      </div>

                      {/* Duration */}
                      <div className="flex items-center text-gray-500 text-sm mb-3" style={{ fontFamily: 'Avenir Next, sans-serif' }}>
                        <svg
                          className="w-4 h-4 mr-2"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth={2}
                        >
                          <circle cx="12" cy="12" r="10" />
                          <path d="M12 6v6l4 2" />
                        </svg>
                        <span>Duration: {featured.duration}</span>
                      </div>

                      {/* Title */}
                      <h3 
                        className="text-xl font-medium mb-3 text-[#300001] leading-tight"
                        style={{ fontFamily: 'Avenir Next, sans-serif' }}
                      >
                        {featured.title}
                      </h3>

                      {/* Description */}
                      <p 
                        className="text-gray-600 text-sm leading-relaxed"
                        style={{ fontFamily: 'Avenir Next, sans-serif' }}
                      >
                        {featured.description}
                      </p>
                    </div>

                    {/* View button */}
                    <div className="flex justify-end mt-4 pt-4">
                      <button
                        onClick={() => router.push(`/teachings/${featured.slug}`)}
                        className="bg-[#300001] text-white px-8 py-3 rounded-md text-sm font-medium hover:bg-[#4a0002] transition-colors"
                        style={{ fontFamily: 'Avenir Next, sans-serif' }}
                      >
                        View
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </>
        )}

        {/* Tabs */}
        <div className="border-b border-gray-300 mb-8">
          <div className="flex overflow-x-auto">
            {contentTypes.map((ct) => (
              <button
                key={ct}
                onClick={() => setActiveFilter(ct)}
                className={`px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 transition-colors ${
                  activeFilter === ct
                    ? 'text-[#300001] border-[#300001]'
                    : 'text-gray-600 hover:text-[#300001] border-transparent'
                }`}
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                {ct}
              </button>
            ))}
          </div>
        </div>

        {/* Grid */}
        <div className="relative mb-16">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {(session ? visible : visible.slice(0, 9)).map((t) => (
              <TeachingCard
                key={t.slug}
                teaching={t}
                onBookmark={toggleBookmark}
              />
            ))}

            {visible.length === 0 && (
              <p 
                className="col-span-full text-center text-gray-600 py-12"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                No teachings in this category yet.
              </p>
            )}
          </div>
          
          {/* Gradient overlay for non-logged-in users - only covers part of 3rd row */}
          {!session && visible.length > 0 && (
            <div 
              className="absolute inset-x-0 bottom-0 pointer-events-auto"
              style={{
                background: 'linear-gradient(to top, rgba(250, 248, 241, 0.3) 0%, rgba(250, 248, 241, 0.7) 50%, transparent 100%)',
                height: 'calc(20% + 0.5rem)' // Only covers bottom portion of 3rd row
              }}
            />
          )}
        </div>

        {/* Sign up content - positioned below the grid for non-logged-in users */}
        {!session && visible.length > 0 && (
          <div className="text-center max-w-2xl mx-auto px-4 mb-16">
            <h2 
              className="text-3xl font-bold mb-4 text-[#300001]"
              style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
            >
              Continue Browsing—Sign Up for Your Free Dashboard
            </h2>
            <p 
              className="text-gray-600 mb-8"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
            >
              Create your free account to continue browsing the library and access exclusive teachings, 500+ publications, and a complimentary meditation course—all from your personal dashboard.
            </p>

            <div className="space-y-4 max-w-md mx-auto">
              <a
                href="/login?provider=google"
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972a6.033 6.033 0 110-12.064 5.963 5.963 0 014.23 1.74l2.694-2.689A9.99 9.99 0 0012.545 2.001a10.089 10.089 0 00-9.286 6.255 10.034 10.034 0 003.7 12.66 10.003 10.003 0 005.586 1.694c7.058 0 11.668-5.736 10.924-12.01l-10.924-.36z" />
                </svg>
                Sign in with Google
              </a>

              <a
                href="/login?provider=facebook"
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M20.007 3H3.993A.993.993 0 003 3.993v16.014c0 .549.444.993.993.993h8.628v-6.961h-2.343v-2.813h2.343V9.312c0-2.325 1.42-3.591 3.494-3.591.993 0 1.847.073 2.096.106v2.43h-1.44c-1.125 0-1.345.532-1.345 1.315v1.723h2.689l-.35 2.813h-2.339V21h4.573a.993.993 0 00.993-.993V3.993A.993.993 0 0020.007 3z" />
                </svg>
                Sign in with Facebook
              </a>

              <a
                href="/login?provider=apple"
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M17.05 20.28c-.98.95-2.05.88-3.08.45-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.47C2.79 15.22 3.51 7.89 8.42 7.56c1.57.05 2.62 1.06 3.54 1.1 1.35-.18 2.63-1.16 4.11-1.22.7.01 2.65.27 3.91 2.08-3.34 2.13-2.79 6.17.55 7.83-2.25 3.96-4.51 4.13-3.86 2.44.41-1.08 1.67-1.72 1.67-1.72-1.5-.92-1.82-3.32-1.29-4.79zM12.03 7.28c-.19-2.15 1.76-4 4.1-4.16.25 2.41-2.16 4.2-4.1 4.16z" />
                </svg>
                Sign in with Apple
              </a>

              <div className="flex items-center justify-center my-4">
                <div className="flex-grow border-t border-gray-200"></div>
                <span className="px-4 text-gray-500 text-sm" style={{ fontFamily: 'Avenir Next, sans-serif' }}>OR</span>
                <div className="flex-grow border-t border-gray-200"></div>
              </div>

              <a
                href="/signup"
                className="block text-center text-[#300001] font-medium hover:text-[#4a0002] transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                Continue with email
              </a>
            </div>
          </div>
        )}

        {/* Continue Browsing Section - only show for logged in users */}
        {session && (
          <div className="text-center py-16 bg-white rounded-lg shadow-sm">
            <h2 
              className="text-3xl font-bold mb-4 text-[#300001]"
              style={{ fontFamily: 'Optima, sans-serif', fontWeight: 700 }}
            >
              Continue Browsing—Sign Up for Your Free Dashboard
            </h2>
            <p 
              className="text-gray-600 mb-8 max-w-2xl mx-auto"
              style={{ fontFamily: 'Avenir Next, sans-serif' }}
            >
              Create your free account to continue browsing the library and access exclusive teachings, 500+ publications, and a complimentary meditation course—all from your personal dashboard.
            </p>

            <div className="space-y-4 max-w-md mx-auto">
              <a
                href="/login?provider=google"
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972a6.033 6.033 0 110-12.064 5.963 5.963 0 014.23 1.74l2.694-2.689A9.99 9.99 0 0012.545 2.001a10.089 10.089 0 00-9.286 6.255 10.034 10.034 0 003.7 12.66 10.003 10.003 0 005.586 1.694c7.058 0 11.668-5.736 10.924-12.01l-10.924-.36z" />
                </svg>
                Sign in with Google
              </a>

              <a
                href="/login?provider=facebook"
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M20.007 3H3.993A.993.993 0 003 3.993v16.014c0 .549.444.993.993.993h8.628v-6.961h-2.343v-2.813h2.343V9.312c0-2.325 1.42-3.591 3.494-3.591.993 0 1.847.073 2.096.106v2.43h-1.44c-1.125 0-1.345.532-1.345 1.315v1.723h2.689l-.35 2.813h-2.339V21h4.573a.993.993 0 00.993-.993V3.993A.993.993 0 0020.007 3z" />
                </svg>
                Sign in with Facebook
              </a>

              <a
                href="/login?provider=apple"
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M17.05 20.28c-.98.95-2.05.88-3.08.45-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.47C2.79 15.22 3.51 7.89 8.42 7.56c1.57.05 2.62 1.06 3.54 1.1 1.35-.18 2.63-1.16 4.11-1.22.7.01 2.65.27 3.91 2.08-3.34 2.13-2.79 6.17.55 7.83-2.25 3.96-4.51 4.13-3.86 2.44.41-1.08 1.67-1.72 1.67-1.72-1.5-.92-1.82-3.32-1.29-4.79zM12.03 7.28c-.19-2.15 1.76-4 4.1-4.16.25 2.41-2.16 4.2-4.1 4.16z" />
                </svg>
                Sign in with Apple
              </a>

              <div className="flex items-center justify-center my-4">
                <div className="flex-grow border-t border-gray-200"></div>
                <span className="px-4 text-gray-500 text-sm" style={{ fontFamily: 'Avenir Next, sans-serif' }}>OR</span>
                <div className="flex-grow border-t border-gray-200"></div>
              </div>

              <a
                href="/signup"
                className="block text-center text-[#300001] font-medium hover:text-[#4a0002] transition-colors"
                style={{ fontFamily: 'Avenir Next, sans-serif' }}
              >
                Continue with email
              </a>
            </div>
          </div>
        )}
      </div>

      {/* login overlay - only show for bookmark action when not logged in */}
      {showLoginOverlay && !session && (
        <LoginOverlay onClose={() => setShowLoginOverlay(false)} />
      )}
    </div>
  );
};

export default TeachingLibraryPage;
// === ./src/components/ui/button.tsx ===
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// === ./src/components/ui/card.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

// === ./src/components/ui/form.tsx ===
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

// === ./src/components/ui/input.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

// === ./src/components/ui/label.tsx ===
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

// === ./src/components/ui/progress.tsx ===
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

// === ./src/components/ui/select.tsx ===
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

// === ./src/components/ui/textarea.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

// === ./src/components/ui/toast.tsx ===
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

// === ./src/components/ui/toaster.tsx ===
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

// === ./src/components/videoPlayer/VideoPlayer.tsx ===
'use client'

import React, { useState, useRef, useEffect } from 'react';
import { useSession } from 'next-auth/react';

// Define interface for props
interface VideoPlayerProps {
  videoId: string;
  isFreePreview?: boolean;
  previewDuration?: number; // in seconds
}

/**
 * Video Player Component with preview limit functionality
 */
const VideoPlayer: React.FC<VideoPlayerProps> = ({ 
  videoId, 
  isFreePreview = false,
  previewDuration = 60, // 1 minute in seconds
}) => {
  const { data: session } = useSession();
  const [showPreviewEnd, setShowPreviewEnd] = useState<boolean>(false);
  const [isClient, setIsClient] = useState<boolean>(false);
  
  // Fix hydration issues
  useEffect(() => {
    setIsClient(true);
  }, []);

  // For free preview videos, show login overlay after specified duration
  useEffect(() => {
    if (!isClient || !isFreePreview || session) return;
    
    // Set a timer to eject the iframe and show login overlay after previewDuration
    const timer = setTimeout(() => {
      setShowPreviewEnd(true);
    }, previewDuration * 1000);
    
    // Clear the timer on unmount
    return () => clearTimeout(timer);
  }, [isClient, isFreePreview, session, previewDuration]);

  // If not client-side yet, show loading placeholder
  if (!isClient) {
    return (
      <div className="w-full aspect-video bg-black flex items-center justify-center text-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white mx-auto mb-4"></div>
          <p>Loading video player...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="relative w-full aspect-video bg-black">
      {/* Show iframe only if preview hasn't ended OR user is logged in */}
      {(!showPreviewEnd || session) && (
        <iframe
          className="w-full h-full"
          src={`https://iframe.cloudflarestream.com/${videoId}?loop=false&autoplay=true&muted=false&preload=true&controls=true`}
          allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
          style={{ border: 'none' }}
        ></iframe>
      )}

      {/* Show login overlay when preview ends and user is not logged in */}
      {showPreviewEnd && !session && (
        <div className="absolute inset-0 z-50 flex flex-col items-center justify-center p-6 bg-black bg-opacity-90">
          {/* Main content container - matching your design */}
          <div className="bg-white rounded-lg max-w-md w-full p-8 text-black text-center">
            <h2 className="text-2xl font-bold text-black mb-4">
              Continue browsing our free library
            </h2>
            <p className="text-gray-600 mb-6">
              Gain access to 500+ publications, exclusive content, and a free meditation course
            </p>
            
            {/* Social login buttons */}
            <div className="space-y-3 mb-6">
              <a 
                href="/login?provider=google" 
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12.545 10.239v3.821h5.445c-.712 2.315-2.647 3.972-5.445 3.972a6.033 6.033 0 110-12.064 5.963 5.963 0 014.23 1.74l2.694-2.689A9.99 9.99 0 0012.545 2.001a10.089 10.089 0 00-9.286 6.255 10.034 10.034 0 003.7 12.66 10.003 10.003 0 005.586 1.694c7.058 0 11.668-5.736 10.924-12.01l-10.924-.36z" />
                </svg>
                Sign in with Google
              </a>
              
              <a 
                href="/login?provider=facebook" 
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M20.007 3H3.993A.993.993 0 003 3.993v16.014c0 .549.444.993.993.993h8.628v-6.961h-2.343v-2.813h2.343V9.312c0-2.325 1.42-3.591 3.494-3.591.993 0 1.847.073 2.096.106v2.43h-1.44c-1.125 0-1.345.532-1.345 1.315v1.723h2.689l-.35 2.813h-2.339V21h4.573a.993.993 0 00.993-.993V3.993A.993.993 0 0020.007 3z" />
                </svg>
                Sign in with Facebook
              </a>
              
              <a 
                href="/login?provider=apple" 
                className="w-full flex items-center justify-center py-3 px-4 border border-gray-300 rounded-md bg-white text-gray-700 hover:bg-gray-50 transition-colors"
              >
                <svg className="w-5 h-5 mr-3" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M17.05 20.28c-.98.95-2.05.88-3.08.45-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.47C2.79 15.22 3.51 7.89 8.42 7.56c1.57.05 2.62 1.06 3.54 1.1 1.35-.18 2.63-1.16 4.11-1.22.7.01 2.65.27 3.91 2.08-3.34 2.13-2.79 6.17.55 7.83-2.25 3.96-4.51 4.13-3.86 2.44.41-1.08 1.67-1.72 1.67-1.72-1.5-.92-1.82-3.32-1.29-4.79zM12.03 7.28c-.19-2.15 1.76-4 4.1-4.16.25 2.41-2.16 4.2-4.1 4.16z" />
                </svg>
                Sign in with Apple
              </a>
            </div>
            
            {/* OR divider */}
            <div className="flex items-center justify-center my-4">
              <div className="flex-grow border-t border-gray-200"></div>
              <span className="px-4 text-gray-500 text-sm">OR</span>
              <div className="flex-grow border-t border-gray-200"></div>
            </div>
            
            {/* Email signup link */}
            <a 
              href="/signup" 
              className="block text-center text-blue-600 font-medium hover:text-blue-800 transition-colors"
            >
              Continue with email
            </a>
          </div>
        </div>
      )}
    </div>
  );
};

export default VideoPlayer;
// === ./src/hooks/use-auth.ts ===
import { useSession } from "next-auth/react";

/**
 * A custom hook to handle authentication in components
 * 
 * @returns Authentication data and helper functions
 */
export function useAuth() {
  const { data: session, status } = useSession();
  
  const isLoading = status === 'loading';
  const isAuthenticated = status === 'authenticated';
  const isAdmin = session?.user?.role === 'admin';
  
  return {
    session,
    status,
    isLoading,
    isAuthenticated,
    isAdmin,
    user: session?.user,
  };
}

export default useAuth;
// === ./src/hooks/use-toast.ts ===
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

// === ./src/lib/api.ts ===
const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL
const STRAPI_API_TOKEN = process.env.NEXT_PUBLIC_STRAPI_API_TOKEN

export async function submitApplication(data: FormData) {
  try {
    const response = await fetch(`${STRAPI_URL}/api/retreat-applications`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${STRAPI_API_TOKEN}`,
      },
      body: JSON.stringify({ data }),
    })

    if (!response.ok) {
      const error = await response.json()
      console.dir(error.error.details.errors)
      throw new Error(error || 'Failed to submit application')
    }

    return await response.json()
  } catch (error) {
    console.error('Error submitting application:', error)
    throw error
  }
}


  // lib/api.ts

interface FetchAPIOptions extends RequestInit {
  headers?: Record<string, string>;
}

interface StrapiResponse<T> {
  data: T;
  meta?: {
    pagination?: {
      page: number;
      pageSize: number;
      pageCount: number;
      total: number;
    };
  };
}

/**
 * Parse the rich text content from Strapi
 * @param content Rich text content from Strapi
 * @returns Parsed content
 */
export function parseRichText(content: any): string {
  if (!content) return '';
  
  // If content is an array of blocks (Strapi v4 format)
  if (Array.isArray(content)) {
    return content
      .map((block) => {
        if (block.type === 'paragraph') {
          return block.children
            .map((child: any) => child.text)
            .join('');
        }
        return '';
      })
      .join('\n');
  }
  
  // If content is a string (older format)
  return content;
}


// lib/api.js

/**
 * Helper to make GET requests to Strapi API endpoints
 * @param {string} path Path of the API route
 * @param {Object} urlParamsObject URL params object, will be stringified
 * @param {Object} options Options passed to fetch
 * @returns Parsed API call response
 */
// lib/api.ts

/**
 * Helper to make GET requests to Strapi API endpoints
 * @param {string} path Path of the API route
 * @param {Record<string, any>} urlParamsObject URL params object, will be stringified
 * @param {RequestInit} options Options passed to fetch
 * @returns Parsed API call response
 */
 export async function fetchAPI(
  path: string, 
  urlParamsObject: Record<string, any> = {}, 
  options: RequestInit = {}
): Promise<any> {
  // Merge default and user options
  const mergedOptions = {
    headers: {
      'Content-Type': 'application/json',
    },
    ...options,
  };

  // Build request URL
  const queryString = Object.keys(urlParamsObject)
    .map(
      (key) => `${encodeURIComponent(key)}=${encodeURIComponent(urlParamsObject[key])}`
    )
    .join('&');
    
  const requestUrl = `${
    process.env.NEXT_PUBLIC_STRAPI_API_URL || 'http://localhost:1337'
  }${path}${queryString ? `?${queryString}` : ''}`;

  // Trigger API call
  const response = await fetch(requestUrl, mergedOptions);

  // Handle response
  if (!response.ok) {
    console.error(response.statusText);
    throw new Error(`An error occurred please try again`);
  }
  
  const data = await response.json();
  return data;
}

/**
 * Get full Strapi URL from path
 * @param {string} path Path of the file
 * @returns {string} Full Strapi URL
 */
export function getStrapiMedia(path: string) {
  if (!path) return null;
  if (path.startsWith('http') || path.startsWith('//')) return path;
  return `${
    process.env.NEXT_PUBLIC_STRAPI_API_URL || 'http://127.0.0.1:1337'
  }${path}`;
}

/**
 * Fetch homepage data
 */
export async function getHomePageData() {
  try {
    const homeData = await fetchAPI('/api/homepage', {
      populate: {
        hero: {
          populate: '*',
        },
        aboutSection: {
          populate: '*',
        },
        shunyamurtiSection: {
          populate: '*',
        },
        learningOptions: {
          populate: {
            tabs: {
              populate: '*',
            },
          },
        },
        membershipCta: {
          populate: '*',
        },
        seo: {
          populate: '*',
        },
      },
    });
    
    return homeData.data.attributes;
  } catch (error) {
    console.error("Error fetching home page data:", error);
    throw error;
  }
}

/**
 * Fetch blog posts with pagination
 */
export async function getBlogPosts(page = 1, pageSize = 6, featured = false) {
  try {
    const filters = featured ? { isFeatured: { $eq: true } } : {};
    
    const data = await fetchAPI('/api/blog-posts', {
      populate: {
        featuredImage: '*',
        author: {
          populate: '*',
        },
        category: {
          populate: '*',
        },
      },
      sort: ['publishedAt:desc'],
      pagination: {
        page,
        pageSize,
      },
      filters,
    });
    
    return data;
  } catch (error) {
    console.error("Error fetching blog posts:", error);
    throw error;
  }
}

/**
 * Fetch a single blog post by slug
 */
export async function getBlogPostBySlug(slug: any) {
  try {
    const data = await fetchAPI('/api/blog-posts', {
      filters: {
        slug: {
          $eq: slug,
        },
      },
      populate: {
        featuredImage: '*',
        author: {
          populate: '*',
        },
        category: {
          populate: '*',
        },
        seo: {
          populate: '*',
        },
      },
    });
    
    return data.data[0];
  } catch (error) {
    console.error("Error fetching blog post:", error);
    throw error;
  }
}

/**
 * Fetch upcoming events
 */
export async function getUpcomingEvents(type = 'all', limit = 10) {
  try {
    const now = new Date().toISOString();
    
    // Filter for dates in the future
    const filters: any = {
      startDate: {
        $gt: now,
      },
    };
    
    // Add location type filter if provided
    if (type === 'onsite' || type === 'online') {
      filters.location = {
        $eq: type.charAt(0).toUpperCase() + type.slice(1),
      };
    }
    
    const data = await fetchAPI('/api/events', {
      filters,
      sort: ['startDate:asc'],
      populate: '*',
      pagination: {
        limit,
      },
    });
    
    return data;
  } catch (error) {
    console.error("Error fetching upcoming events:", error);
    throw error;
  }
}

/**
 * Fetch a single event by slug
 */
export async function getEventBySlug(slug: string) {
  try {
    const data = await fetchAPI('/api/events', {
      filters: {
        slug: {
          $eq: slug,
        },
      },
      populate: '*',
    });
    
    return data.data[0];
  } catch (error) {
    console.error("Error fetching event:", error);
    throw error;
  }
}

/**
 * Fetch membership plans
 */
export async function getMembershipPlans() {
  try {
    const data = await fetchAPI('/api/memberships', {
      populate: {
        features: '*',
      },
      sort: ['displayOrder'],
    });
    
    return data;
  } catch (error) {
    console.error("Error fetching membership plans:", error);
    throw error;
  }
}

/**
 * Fetch program dates for a specific program type
 */
export async function getProgramDates(programType: any) {
  try {
    const data = await fetchAPI('/api/program-dates', {
      filters: {
        program: {
          $eq: programType,
        },
      },
      sort: ['start_date:asc'],
    });
    
    return data;
  } catch (error) {
    console.error("Error fetching program dates:", error);
    throw error;
  }
}
// === ./src/lib/auth.ts ===
// lib/auth.ts
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import type { NextAuthOptions } from "next-auth";

// Auth options configuration
export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        try {
          // Authenticate with Strapi
          const authRes = await fetch(`${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/auth/local`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              identifier: credentials.email,
              password: credentials.password,
            }),
          });

          const authData = await authRes.json();
          if (!authRes.ok) return null;

          // Get the user data with the isAdmin field
          const userRes = await fetch(`${process.env.NEXT_PUBLIC_STRAPI_API_URL}/api/users/me`, {
            headers: { Authorization: `Bearer ${authData.jwt}` },
          });

          if (!userRes.ok) return null;
          
          const userData = await userRes.json();
          console.log("User data from Strapi:", userData);
          
          // Use the isAdmin boolean field to determine role
          const role = userData.isAdmin === true ? "admin" : "authenticated";
          console.log(`User ${userData.email} assigned role based on isAdmin field:`, role);

          return {
            id: userData.id,
            name: userData.username,
            email: userData.email,
            jwt: authData.jwt,
            role: role,
          };
        } catch (error) {
          console.error("Error during authentication:", error);
          return null;
        }
      },
    }),
  ],
  callbacks: {
    async jwt({ token, user }: any) {
      // Initial sign in
      if (user) {
        token.id = user.id;
        token.jwt = user.jwt;
        token.role = user.role;

        console.log("JWT token created with role:", user.role);
      }
      return token;
    },
    async session({ session, token }: any) {
      // Send properties to the client
      if (session.user) {
        session.user.id = token.id as string;
        session.user.jwt = token.jwt as string;
        session.user.role = token.role as string;
      }
      return session;
    },
  },
  pages: {
    signIn: "/login",
    signOut: "/",
    error: "/login", // Error code passed in query string as ?error=
  },
  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },
  secret: process.env.NEXTAUTH_SECRET,
};
// === ./src/lib/courseApi.ts ===
/**
 * Utility functions for interacting with the Courses API
 */
import { fetchAPI, buildStrapiUrl, getToken } from "./strapi";

/**
 * Course specific API methods
 */
export const courseApi = {
  /**
   * Upload a file to Strapi
   */
  uploadFile: async (file: File): Promise<{ id: number; url: string }> => {
    try {
      const formData = new FormData();
      formData.append("files", file);

      const apiUrl =
        process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";
      const token = process.env.NEXT_PUBLIC_STRAPI_API_TOKEN;

      console.log("Uploading file to:", `${apiUrl}/api/upload`);

      const response = await fetch(`${apiUrl}/api/upload`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("Upload error response:", errorText);
        throw new Error(`Upload failed with status ${response.status}`);
      }

      const result = await response.json();
      return {
        id: result[0].id,
        url: result[0].url,
      };
    } catch (error) {
      console.error("Error in uploadFile:", error);
      throw error;
    }
  },

  /**
   * Get all courses with pagination
   */
  getCourses: async (
    page = 1,
    pageSize = 10,
    search = "",
    sort = "createdAt:desc"
  ) => {
    try {
      const filters = search ? { title: { $containsi: search } } : undefined;
      const url = buildStrapiUrl(
        "/api/courses",
        filters,
        {
          page,
          pageSize,
          publicationState: "preview", // This includes both published and draft content
        },
        sort,
        ["featuredImage", "instructors"]
      );
      return await fetchAPI(url);
    } catch (error) {
      console.error("Error fetching courses:", error);
      throw error;
    }
  },

  /**
   * Get all published courses without requiring authentication
   */
  getPublicCourses: async (page = 1, pageSize = 10) => {
    try {
      // Create a URL for published courses
      const url = `/api/courses?filters[publishedAt][$notNull]=true&populate=featuredImage,instructors&pagination[page]=${page}&pagination[pageSize]=${pageSize}&sort=createdAt:desc`;

      // Make a direct fetch without auth headers
      const response = await fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_API_URL}${url}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching public courses:", error);
      throw error;
    }
  },

  /**
   * Get courses for the current user
   */
  getUserCourses: async () => {
    try {
      const token = localStorage.getItem("jwt");
      if (!token) {
        throw new Error("User not authenticated");
      }

      const apiUrl =
        process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";

      // Step 1: Get the current user's ID
      const meResponse = await fetch(`${apiUrl}/api/users/me`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!meResponse.ok) {
        throw new Error(`Failed to fetch user: ${meResponse.status}`);
      }

      const userData = await meResponse.json();
      const userId = userData.id;

      // Step 2: Fetch the user's enrolled courses with deep population for images
      const coursesResponse = await fetch(
        `${apiUrl}/api/users/${userId}?populate[enrolledCourses][populate]=*`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!coursesResponse.ok) {
        throw new Error(
          `Failed to fetch enrolled courses: ${coursesResponse.status}`
        );
      }

      const coursesData = await coursesResponse.json();

      // Step 3: Extract and format enrolled courses
      const enrolledCourses = coursesData.enrolledCourses || [];

      // Format the courses to match our expected Course[] structure
      const formattedCourses = enrolledCourses.map((course) => {
        // Create the correctly formatted featuredImage object
        let featuredImage = undefined;

        if (course.featuredImage) {
          // Extract the formats directly from the featuredImage object
          const formats = course.featuredImage.formats || {};

          // Get the URL from the formats or use a fallback URL
          const url =
            formats.large?.url ||
            formats.small?.url ||
            `https://res.cloudinary.com/dxg19p7wn/image/upload/v1745531111/Chat_GPT_Image_Apr_24_2025_11_33_46_AM_168d1c0388.png`;

          featuredImage = {
            data: {
              attributes: {
                url: url,
                formats: formats,
              },
            },
          };
        }

        // Extract instructors if they exist
        let instructors = undefined;

        if (course.instructors) {
          instructors = {
            data: Array.isArray(course.instructors)
              ? course.instructors.map((instructor) => ({
                  id: instructor.id,
                  attributes: {
                    name: instructor.name || "Instructor",
                  },
                }))
              : [],
          };
        }

        return {
          id: course.id,
          attributes: {
            title: course.title || "",
            slug: course.slug || "",
            description: course.description || "",
            price: course.price || 0,
            isFree: course.free || false,
            ...(featuredImage && { featuredImage }),
            ...(instructors && { instructors }),
          },
        };
      });

      return {
        data: formattedCourses,
        meta: { pagination: { total: formattedCourses.length } },
      };
    } catch (error) {
      console.error("Error fetching user courses:", error);
      throw error;
    }
  },

  /**
   * Enroll user in a course using the correct Strapi v4 relationship format
   */
  enrollInCourse: async (courseId: string) => {
    try {
      const token = localStorage.getItem("jwt");
      if (!token) {
        throw new Error("Authentication required. Please log in.");
      }

      const apiUrl =
        process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";

      // Step 1: Get the current user's ID
      console.log("Fetching user data...");
      const userResponse = await fetch(`${apiUrl}/api/users/me`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!userResponse.ok) {
        throw new Error("Failed to authenticate user.");
      }

      const userData = await userResponse.json();
      const userId = userData.id;

      // Step 2: Update the course with the user relationship using proper Strapi v4 connect syntax
      const updateResponse = await fetch(`${apiUrl}/api/courses/${courseId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          data: {
            enrolledUsers: {
              connect: [userId],
            },
          },
        }),
      });

      console.log(`Update response status: ${updateResponse.status}`);

      let responseData;
      try {
        responseData = await updateResponse.json();
        console.log("Update response:", responseData);
      } catch (e) {
        console.error("Error parsing response:", e);
      }

      if (!updateResponse.ok) {
        throw new Error(
          `Failed to enroll in course (${updateResponse.status})`
        );
      }

      return { success: true, message: "Successfully enrolled in course" };
    } catch (error) {
      console.error(`Error enrolling in course:`, error);
      throw error;
    }
  },

  /**
   * Get available courses (courses the user is not enrolled in)
   */
  getAvailableCourses: async () => {
    try {
      const apiUrl =
        process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";
      const token = localStorage.getItem("jwt");

      // For unauthenticated users, fetch all published courses
      if (!token) {
        console.log("No token found - fetching all published courses");
        const response = await fetch(
          `${apiUrl}/api/courses?filters[publishedAt][$notNull]=true&populate=featuredImage,instructors`
        );

        if (!response.ok) {
          throw new Error(`API returned ${response.status}`);
        }

        return await response.json();
      }

      // For authenticated users, exclude courses they're already enrolled in
      // First get the user's enrolled course IDs
      const meResponse = await fetch(
        `${apiUrl}/api/users/me?populate=enrolledCourses`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!meResponse.ok) {
        throw new Error(`Failed to fetch user: ${meResponse.status}`);
      }

      const userData = await meResponse.json();
      const enrolledCourseIds = userData.enrolledCourses
        ? userData.enrolledCourses.map((course) => course.id)
        : [];

      console.log("User is enrolled in courses with IDs:", enrolledCourseIds);

      // Build a URL to fetch available courses (published, not enrolled)
      let url = `${apiUrl}/api/courses?filters[publishedAt][$notNull]=true&populate=featuredImage,instructors`;

      // Add filter to exclude enrolled courses if the user has any
      if (enrolledCourseIds.length > 0) {
        // Use individual filters for each ID instead of a comma-separated list
        enrolledCourseIds.forEach((id) => {
          url += `&filters[id][$ne]=${id}`;
        });
      }

      const response = await fetch(url, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`API returned ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching available courses:", error);
      throw error;
    }
  },

  /**
   * Get a single course by ID
   */
  getCourse: async (id: string) => {
    try {
      return await fetchAPI(
        `/api/courses/${id}?populate=featuredImage,instructors,seo`
      );
    } catch (error) {
      console.error(`Error fetching course with ID "${id}":`, error);
      throw error;
    }
  },

  /**
   * Create a new course
   */
  createCourse: async (courseData: any) => {
    try {
      return await fetchAPI("/api/courses", {
        method: "POST",
        body: JSON.stringify({ data: courseData }),
      });
    } catch (error) {
      console.error("Error creating course:", error);
      throw error;
    }
  },

  /**
   * Update an existing course
   */
  updateCourse: async (id: string, courseData: any) => {
    try {
      return await fetchAPI(`/api/courses/${id}`, {
        method: "PUT",
        body: JSON.stringify({ data: courseData }),
      });
    } catch (error) {
      console.error(`Error updating course with ID "${id}":`, error);
      throw error;
    }
  },

  /**
   * Delete a course
   */
  deleteCourse: async (id: string) => {
    try {
      return await fetchAPI(`/api/courses/${id}`, {
        method: "DELETE",
      });
    } catch (error) {
      console.error(`Error deleting course with ID "${id}":`, error);
      throw error;
    }
  },

  /**
   * Get a single course by slug
   */
  getCourseBySlug: async (slug: string) => {
    try {
      console.log(`Fetching course with slug "${slug}"`);

      // Build the URL with proper filters and populate parameters
      const url = buildStrapiUrl(
        "/api/courses",
        { slug: { $eq: slug } },
        undefined,
        undefined,
        [
          "featuredImage",
          "instructors",
          "instructors.picture",
          "seo",
          "whatYouWillLearn",
          "whatYouWillLearn.learningPoints",
          "courseFeatures",
          "previewMedia",
          "featuredQuote",
          "featuredQuote.authorImage",
          "introVideo",
          "introVideo.video",
          "enrolledUsers", // Add this to populate the enrolledUsers field
        ]
      );

      // Make the request
      const response: any = await fetchAPI(url);

      // Check if we have data and log its structure
      if (response.data && response.data.length > 0) {
        // Return the first item from the data array
        return response.data[0];
      } else {
        console.log("No course found with the given slug");
        return null;
      }
    } catch (error) {
      console.error(`Error fetching course with slug "${slug}":`, error);
      throw error;
    }
  },

  /**
   * Get classes for a course with minimal data population
   * This is the base function used by ClassComponentLayout
   */
  getClassBySlugAndIndex: async (slug: string, orderIndex: number) => {
    try {
      // Step 1: Get the course by slug
      const course = await courseApi.getCourseBySlug(slug);
      if (!course) {
        throw new Error(`Course with slug "${slug}" not found`);
      }

      // Step 2: Fetch the class with the specific orderIndex for this course
      const courseId = course.id;

      // Use only basic populate parameters for minimal data
      const url = `/api/course-classes?filters[course][id][$eq]=${courseId}&filters[orderIndex][$eq]=${orderIndex}&populate=course`;

      const response = await fetchAPI(url);

      // If no matching class is found, return null
      if (!response.data || response.data.length === 0) {
        console.log(
          `No class found for course ${courseId} with orderIndex ${orderIndex}`
        );
        return null;
      }

      return response.data[0];
    } catch (error) {
      console.error(
        `Error fetching class for course "${slug}" with orderIndex ${orderIndex}:`,
        error
      );
      throw error;
    }
  },

  /**
   * Get a specific class by course slug and orderIndex with full video-related content
   * This is optimized for the video component
   */
  getClassWithVideoContent: async (slug: string, orderIndex: number) => {
    try {
      // Step 1: Get the course by slug
      const course = await courseApi.getCourseBySlug(slug);
      if (!course) {
        throw new Error(`Course with slug "${slug}" not found`);
      }

      // Step 2: Fetch the class with the specific orderIndex for this course
      const courseId = course.id;

      // Use a very specific populate parameter to get all nested content including the video content with all possible field names
      const url = `/api/course-classes?filters[course][id][$eq]=${courseId}&filters[orderIndex][$eq]=${orderIndex}&populate[content][populate][video][populate][videoFile][populate]=*&populate[content][populate][video][populate][AudioFile][populate]=*&populate[content][populate][video][populate][audioFile][populate]=*&populate[content][populate][video][populate][audio][populate]=*&populate[content][populate][video][populate]=videoDescription,videoTranscript&populate=*`;

      const response = await fetchAPI(url);

      // If no matching class is found, return null
      if (!response.data || response.data.length === 0) {
        console.log(
          `No class found for course ${courseId} with orderIndex ${orderIndex}`
        );
        return null;
      }

      return response.data[0];
    } catch (error) {
      console.error(
        `Error fetching class for video component for course "${slug}" with orderIndex ${orderIndex}:`,
        error
      );
      throw error;
    }
  },

  /**
   * Get a specific class by course slug and orderIndex with keyConcepts content
   */
  getClassWithKeyConcepts: async (slug: string, orderIndex: number) => {
    try {
      // Use a reference to prevent multiple identical requests
      const cacheKey = `key-concepts-${slug}-${orderIndex}`;

      // Step 1: Get the course by slug - but only once
      const course = await courseApi.getCourseBySlug(slug);
      if (!course) {
        throw new Error(`Course with slug "${slug}" not found`);
      }

      // Step 2: Fetch the class with the specific orderIndex for this course
      const courseId = course.id;

      // Use explicit path to content.keyConcepts to ensure deep population
      const url = `/api/course-classes?filters[course][id][$eq]=${courseId}&filters[orderIndex][$eq]=${orderIndex}&populate=*,content.keyConcepts`;

      const response = await fetchAPI(url);

      // If no matching class is found, return null
      if (!response.data || response.data.length === 0) {
        console.log(
          `No class found for course ${courseId} with orderIndex ${orderIndex}`
        );
        return null;
      }

      // Only log the keys once to avoid logging loops
      console.log(
        "Key Concepts class data found with ID:",
        response.data[0].id
      );

      return response.data[0];
    } catch (error) {
      console.error(`Error fetching class with key concepts:`, error);
      throw error;
    }
  },

  /**
   * Get a specific class by course slug and orderIndex with writingPrompts content
   */
  getClassWithWritingPrompts: async (slug: string, orderIndex: number) => {
    try {
      // Step 1: Get the course by slug
      const course = await courseApi.getCourseBySlug(slug);
      if (!course) {
        throw new Error(`Course with slug "${slug}" not found`);
      }

      // Step 2: Fetch the class with the specific orderIndex for this course
      const courseId = course.id;

      // Use a populate parameter specifically for writing prompts
      const url = `/api/course-classes?filters[course][id][$eq]=${courseId}&filters[orderIndex][$eq]=${orderIndex}&populate[content][populate]=*&populate=*`;

      const response = await fetchAPI(url);

      // If no matching class is found, return null
      if (!response.data || response.data.length === 0) {
        return null;
      }

      // Return the first class that matches the criteria
      return response.data[0];
    } catch (error) {
      console.error(`Error fetching class with writing prompts:`, error);
      throw error;
    }
  },

  /**
   * Get a specific class by course slug and orderIndex with additionalMaterials content
   */
  getClassWithAdditionalMaterials: async (slug: string, orderIndex: number) => {
    try {
      // Step 1: Get the course by slug
      const course = await courseApi.getCourseBySlug(slug);
      if (!course) {
        throw new Error(`Course with slug "${slug}" not found`);
      }

      // Step 2: Fetch the class with the specific orderIndex for this course
      const courseId = course.id;

      // Use explicit path to content.additionalMaterials to ensure deep population with video and guidedMeditation content
      const url = `/api/course-classes?filters[course][id][$eq]=${courseId}&filters[orderIndex][$eq]=${orderIndex}&populate=content,content.additionalMaterials,content.additionalMaterials.video,content.additionalMaterials.guidedMeditation,content.additionalMaterials.video.data,content.additionalMaterials.guidedMeditation.data,content.additionalMaterials.videoDescription,content.additionalMaterials.essay`;

      const response = await fetchAPI(url);

      // If no matching class is found, return null
      if (!response.data || response.data.length === 0) {
        console.log(
          `No class found for course ${courseId} with orderIndex ${orderIndex}`
        );
        return null;
      }

      // Log the retrieved data structure for debugging
      console.log(
        "Additional Materials class data found with ID:",
        response.data[0].id
      );

      return response.data[0];
    } catch (error) {
      console.error(`Error fetching class with additional materials:`, error);
      throw error;
    }
  },

  /**
   * Get classes for a course with complete content
   */
  getClasses: async (courseId: string) => {
    try {
      console.log(`Fetching classes for course ID "${courseId}"`);

      // Create a more comprehensive populate query to ensure we get all needed data
      // We need to use deep populate to get nested components
      const url = `/api/course-classes?filters[course][id][$eq]=${courseId}&sort=orderIndex:asc&populate[content][populate]=*&populate=*`;

      const response = await fetchAPI(url);

      return response;
    } catch (error) {
      console.error(`Error fetching classes for course "${courseId}":`, error);
      // Return empty data array on error so the UI can still render
      return { data: [] };
    }
  },

  /**
   * Get a single class by ID
   */
  // Update the getClass function in courseApi.ts to ensure it deeply populates all content sections

  /**
   * Get a single class by ID with complete content population
   */
  getClass: async (id: string) => {
    try {
      // Use a much more complete populate parameter to ensure we get all content sections
      const url = `/api/course-classes/${id}?populate[content][populate][video][populate]=*&populate[content][populate][keyConcepts][populate]=*&populate[content][populate][writingPrompts][populate]=*&populate[content][populate][additionalMaterials][populate]=*&populate=*`;

      console.log(`Fetching class with ID "${id}" using URL: ${url}`);

      const response = await fetchAPI(url);

      // Log what we got back to help debug
      if (
        response.data &&
        response.data.attributes &&
        response.data.attributes.content
      ) {
        console.log(
          "Class content sections found:",
          Object.keys(response.data.attributes.content).join(", ")
        );
      } else {
        console.log("No content sections found in response");
      }

      return response;
    } catch (error) {
      console.error(`Error fetching class with ID "${id}":`, error);
      throw error;
    }
  },

  /**
   * Create a new class
   */
  createClass: async (classData: any) => {
    try {
      // Explicitly wrap the data as expected by Strapi v4
      return await fetchAPI("/api/course-classes", {
        method: "POST",
        body: JSON.stringify({ data: classData }),
      });
    } catch (error) {
      console.error("Error creating class:", error);
      throw error;
    }
  },

  /**
   * Update an existing class
   */
  updateClass: async (id: string, classData: any) => {
    try {
      return await fetchAPI(`/api/course-classes/${id}`, {
        method: "PUT",
        body: JSON.stringify({ data: classData }),
      });
    } catch (error) {
      console.error(`Error updating class with ID "${id}":`, error);
      throw error;
    }
  },

  /**
   * Delete a class
   */
  deleteClass: async (id: string) => {
    try {
      return await fetchAPI(`/api/course-classes/${id}`, {
        method: "DELETE",
      });
    } catch (error) {
      console.error(`Error deleting class with ID "${id}":`, error);
      throw error;
    }
  },

  /**
   * Get instructors
   */
  getInstructors: async () => {
    try {
      return await fetchAPI("/api/instructors?sort=name:asc");
    } catch (error) {
      console.error("Error fetching instructors:", error);
      throw error;
    }
  },

  /**
   * Create a new instructor
   */
  createInstructor: async (instructorData: any) => {
    try {
      return await fetchAPI("/api/instructors", {
        method: "POST",
        body: JSON.stringify({ data: instructorData }),
      });
    } catch (error) {
      console.error("Error creating instructor:", error);
      throw error;
    }
  },

  /**
   * Update an existing instructor
   */
  updateInstructor: async (id: string, instructorData: any) => {
    try {
      return await fetchAPI(`/api/instructors/${id}`, {
        method: "PUT",
        body: JSON.stringify({ data: instructorData }),
      });
    } catch (error) {
      console.error(`Error updating instructor with ID "${id}":`, error);
      throw error;
    }
  },

  /**
   * Delete an instructor
   */
  deleteInstructor: async (id: string) => {
    try {
      return await fetchAPI(`/api/instructors/${id}`, {
        method: "DELETE",
      });
    } catch (error) {
      console.error(`Error deleting instructor with ID "${id}":`, error);
      throw error;
    }
  },
};

export default courseApi;

// === ./src/lib/courseCommentApi.ts ===
"use client";

// Helper to get the JWT token
const getToken = (): string | null => {
  if (typeof window === "undefined") return null;
  return localStorage.getItem("jwt");
};

// Base API URL
const API_URL =
  process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";

export const courseCommentApi = {
  /**
   * Get comments for a specific section of a course
   * @param courseId - The ID of the course
   * @param sectionType - Type of section (video, additionalMaterials, testimonial)
   * @param classIndex - The index of the class (optional, for video and additionalMaterials only)
   */
  getComments: async (
    courseId: string,
    sectionType: "video" | "additionalMaterials" | "testimonial",
    classIndex?: number
  ) => {
    try {
      const token = getToken();

      // Build filter parameters
      let filterParams = `filters[course][id][$eq]=${courseId}&filters[sectionType][$eq]=${sectionType}`;

      // Add classIndex filter if provided
      if (classIndex !== undefined) {
        filterParams += `&filters[classIndex][$eq]=${classIndex}`;
      } else {
        // For testimonials ensure classIndex is null
        filterParams += `&filters[classIndex][$null]=true`;
      }

      // Sort by creation date (newest first) and populate user data
      const url = `${API_URL}/api/course-comments?${filterParams}&sort=createdAt:desc&populate=user`;

      const headers: HeadersInit = {
        "Content-Type": "application/json",
      };

      // Add authorization header if token exists
      if (token) {
        headers["Authorization"] = `Bearer ${token}`;
      }

      const response = await fetch(url, { headers });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching comments:", error);
      throw error;
    }
  },

  /**
   * Add a new comment
   * @param courseId - The ID of the course
   * @param sectionType - Type of section (video, additionalMaterials, testimonial)
   * @param comment - The comment text
   * @param classIndex - The index of the class (optional, for video and additionalMaterials only)
   */
  addComment: async (
    courseId: string,
    sectionType: "video" | "additionalMaterials" | "testimonial",
    comment: string,
    classIndex?: number
  ) => {
    try {
      const token = getToken();
      if (!token) {
        throw new Error("User not authenticated");
      }

      // First, get the current user's ID
      const userResponse = await fetch(`${API_URL}/api/users/me`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!userResponse.ok) {
        throw new Error("Failed to get current user data");
      }

      const userData = await userResponse.json();
      const userId = userData.id;

      // Now create comment with explicit user relation
      const commentData = {
        data: {
          comment: comment,
          course: courseId,
          sectionType: sectionType,
          classIndex: classIndex || null,
          user: userId, // Explicitly set the user ID
        },
      };

      console.log("Submitting comment with data:", JSON.stringify(commentData));

      const response = await fetch(`${API_URL}/api/course-comments`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(commentData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Error response from API:", errorData);
        throw new Error(
          errorData.error?.message ||
            `Failed to create comment: ${response.status}`
        );
      }

      return await response.json();
    } catch (error) {
      console.error("Error creating comment:", error);
      throw error;
    }
  },

  /**
   * Update an existing comment
   * @param commentId - The ID of the comment to update
   * @param comment - The new comment text
   */
  updateComment: async (commentId: string, comment: string) => {
    try {
      const token = getToken();
      if (!token) {
        throw new Error("User not authenticated");
      }

      const commentData = {
        data: {
          comment: comment,
        },
      };

      const response = await fetch(
        `${API_URL}/api/course-comments/${commentId}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(commentData),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error?.message ||
            `Failed to update comment: ${response.status}`
        );
      }

      return await response.json();
    } catch (error) {
      console.error("Error updating comment:", error);
      throw error;
    }
  },

  /**
   * Delete a comment (for admins or comment owners)
   * @param commentId - The ID of the comment to delete
   */
  deleteComment: async (commentId: string) => {
    try {
      const token = getToken();
      if (!token) {
        throw new Error("User not authenticated");
      }

      const response = await fetch(
        `${API_URL}/api/course-comments/${commentId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error(`Failed to delete comment: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error("Error deleting comment:", error);
      throw error;
    }
  },

  /**
   * Get the current user information
   */
  getCurrentUser: async () => {
    try {
      const token = getToken();
      if (!token) {
        return null;
      }

      const response = await fetch(`${API_URL}/api/users/me`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error("Failed to fetch user data");
      }

      return await response.json();
    } catch (error) {
      console.error("Error fetching current user:", error);
      return null;
    }
  },
};

export default courseCommentApi;

// === ./src/lib/courseProgressApi.ts ===
"use client";

// Helper to get the JWT token
const getToken = (): string | null => {
  if (typeof window === "undefined") return null;
  return localStorage.getItem("jwt");
};

// Base API URL
const API_URL =
  process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";

export const courseProgressApi = {
  /**
   * Get progress for the current user in a course
   */
  getUserCourseProgress: async (courseId: string) => {
    try {
      const token = getToken();
      if (!token) {
        throw new Error("User not authenticated");
      }

      // Use URL with populate to get the tracking structure
      const url = `${API_URL}/api/course-progresses?filters[course][id][$eq]=${courseId}&populate[tracking][populate]=*&populate=tracking,tracking.classes`;

      // console.log("Fetching progress from:", url);

      const response = await fetch(url, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      const result = await response.json();
      // console.log("Progress response:", result);

      // Return the first entry if found
      if (result.data && result.data.length > 0) {
        return result.data[0];
      }

      return null;
    } catch (error) {
      console.error("Error fetching course progress:", error);
      return null;
    }
  },

  /**
   * Update progress for a specific component
   */
  updateComponentProgress: async (
    courseId: string,
    classId: string,
    component: string,
    progress: number
  ) => {
    try {
      const token = getToken();
      if (!token) {
        throw new Error("User not authenticated");
      }

      // First, get the current progress entry
      const progressData = await courseProgressApi.getUserCourseProgress(
        courseId
      );

      if (!progressData) {
        throw new Error("No progress entry found");
      }

      // Make a deep copy of the tracking data
      const tracking = JSON.parse(
        JSON.stringify(progressData.attributes.tracking)
      );

      // Find the class in tracking.classes
      const classIndex = tracking.classes.findIndex(
        (c: any) => c.classId === parseInt(classId)
      );

      if (classIndex === -1) {
        throw new Error(`Class with ID ${classId} not found in tracking`);
      }

      // Update the specific component progress
      if (
        [
          "video",
          "keyConcepts",
          "writingPrompts",
          "additionalMaterials",
        ].includes(component)
      ) {
        tracking.classes[classIndex][component] = progress;
      } else {
        throw new Error(`Invalid component: ${component}`);
      }

      // Check if class is completed
      const classItem = tracking.classes[classIndex];
      const isClassCompleted =
        classItem.video >= 0.99 &&
        classItem.keyConcepts >= 0.99 &&
        classItem.writingPrompts >= 0.99 &&
        classItem.additionalMaterials >= 0.99;

      tracking.classes[classIndex].completed = isClassCompleted;
      tracking.classes[classIndex].lastAccessed = new Date().toISOString();

      // Check if all classes are completed
      const allClassesCompleted = tracking.classes.every(
        (c: any) => c.completed
      );

      // Update tracking metadata
      tracking.started = true;
      tracking.completed = allClassesCompleted;
      tracking.lastAccessDate = new Date().toISOString();

      if (!tracking.startDate) {
        tracking.startDate = new Date().toISOString();
      }

      // Update the progress entry
      const updateResponse = await fetch(
        `${API_URL}/api/course-progresses/${progressData.id}`,
        {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            data: {
              tracking: tracking,
            },
          }),
        }
      );

      if (!updateResponse.ok) {
        throw new Error(`Update API error: ${updateResponse.status}`);
      }

      return await updateResponse.json();
    } catch (error) {
      console.error("Error updating component progress:", error);
      throw error;
    }
  },

  /**
   * Mark a component as complete (100%)
   */
  markComponentComplete: async (
    courseId: string,
    classId: string,
    component: string
  ) => {
    return courseProgressApi.updateComponentProgress(
      courseId,
      classId,
      component,
      1
    );
  },
};

export default courseProgressApi;

// === ./src/lib/json_dump.ts ===
const seed: any[] = [
  {
    "title": "Ecstasy and  the Eschaton",
    "date": "2024-11-18T01:59:53",
    "slug": "ecstasy-and-the-eschaton",
    "contenttype": "essay",
    "description": "It is now widely recognized in the fields of medicine and psychology that meditation is a powerful instrument for the management of stress, the strengthening of the immune system, and for the acceleration of healing processes in the body. Many clinical studies have validated the effectiveness of meditation not only for physical healing and the diminution of anxiety, but for the improvement of the quality of life. The sense of happiness and inner contentment has been correlated to the capacity to meditate and sustain states of serenity and stillness. But for the Sat Yogi, meditation implies a great deal more than that.",
    "content": [],
    "summary": "It is now widely recognized in the fields of medicine and psychology that meditation is a powerful instrument for the management of stress, the strengthening of the immune system, and for the acceleration of healing processes in the body. Many clinic",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2024/11/Ecstasy-and-the-Eschaton.png",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Meditation",
    "wordpressId": 28794,
    "transcription": "",
    "source_file": "essay.json"
  },
  ...
  ...
  ...
  {
    "title": "Are Empaths Real?",
    "date": "2020-03-04T14:50:00",
    "slug": "are-empaths-real",
    "contenttype": "qa_with_shunyamurti",
    "description": "Questioner: I would like to ask what is Shunyamurti&#8217;s opinion on so called Empaths? Is that a real thing or just a New Age BS? Thank you very much.?\nShunyamurti’s Reply: Thank you for your inquiry. I do not know what you have read about empaths, so I cannot judge the validity of those unknown beliefs. But it is clear that many people have non-ordinary modalities of perception and processing. If I were to attempt to categorize them, I would say that the first category would be people who are highly sensitive in different ways. The sub-categories of this group would be:",
    "content": [],
    "summary": "Questioner: I would like to ask what is Shunyamurti&#8217;s opinion on so called Empaths? Is that a real thing or just a New Age BS? Thank you very much.?\nShunyamurti’s Reply: Thank you for your inquiry. I do not know what you have read about empaths",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Healing, Relationships",
    "wordpressId": 5978,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "Spiritual Teachers in the 21st Century?",
    "date": "2020-02-21T13:45:50",
    "slug": "spiritual-teachers-in-the-21st-century",
    "contenttype": "qa_with_shunyamurti",
    "description": "Questioner: How does a spiritual teacher or leaders of monasteries/ashrams balance honoring both individual sovereignty while also honoring the roles of the whole community in the 21st century? Some teachers say there of course that there is no individual so just serve in order to (sometimes depending on the teacher) get away with violating the other in some way. While in fact there is no individual, there can&#8217;t be said to be a community either as far as the Absolute. So must both individual and community be honored yet balanced, as far as the world of relativity goes, this day in age?",
    "content": [],
    "summary": "Questioner: How does a spiritual teacher or leaders of monasteries/ashrams balance honoring both individual sovereignty while also honoring the roles of the whole community in the 21st century? Some teachers say there of course that there is no indiv",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Ashram Life, Community",
    "wordpressId": 5948,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "Questioner: How can the world be different from what it apparently is?",
    "date": "2020-02-06T16:37:46",
    "slug": "how-can-the-world-be-different-from-what-it-apparently-is",
    "contenttype": "qa_with_shunyamurti",
    "description": "Questioner: How can the world be different from what it apparently is? Doesn’t God look after his world in spite of appearances? All is Well Is It Not?",
    "content": [],
    "summary": "Questioner: How can the world be different from what it apparently is? Doesn’t God look after his world in spite of appearances? All is Well Is It Not?",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Nonduality, Philosophy",
    "wordpressId": 3407,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "Are Shiva and God synonymous? ~ Members Q &#038; A with Shunyamurti",
    "date": "2019-12-28T16:28:02",
    "slug": "are-shiva-and-god-synonymous-members-q-a-with-shunyamurti",
    "contenttype": "qa_with_shunyamurti",
    "description": "One of our online Members recently asked the following question to Shunyamurti:\nWhen you speak of union with Shiva, are Shiva and God synonymous? Or is Shiva an intermediary similar to Jesus for Christians? To you, exactly what does Shiva represent? Does the worship of Shiva not identify your teachings with an Indian religion rather than them being more of a non-religious yet spiritual nature?",
    "content": [],
    "summary": "One of our online Members recently asked the following question to Shunyamurti:\nWhen you speak of union with Shiva, are Shiva and God synonymous? Or is Shiva an intermediary similar to Jesus for Christians? To you, exactly what does Shiva represent? ",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "East &amp; West, History, Mythology, Yoga",
    "wordpressId": 3383,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "The Practice of Surrender",
    "date": "2019-07-02T19:13:06",
    "slug": "the-practice-of-surrender",
    "contenttype": "qa_with_shunyamurti",
    "description": "This is a question for Shunya regarding the practice of surrender to God. I haven&#8217;t really figured out the mechanics of surrender in moment to moment existence. How should I actually be offering myself to God moment by moment?",
    "content": [],
    "summary": "This is a question for Shunya regarding the practice of surrender to God. I haven&#8217;t really figured out the mechanics of surrender in moment to moment existence. How should I actually be offering myself to God moment by moment?",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Nonduality",
    "wordpressId": 1720,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "The Status of Knowledge",
    "date": "2019-07-01T19:42:22",
    "slug": "the-status-of-knowledge",
    "contenttype": "qa_with_shunyamurti",
    "description": "After Shunyamurti’s interview with Rick Archer on Buddha at the Gas Pump, in January 2017, the two continued a correspondence via email. Their conversation was far reaching and included a profound question from Rick:\n“Can we know anything with certainty?”\nThis question inspired Shunya to write a multi-faceted, serious, subtle, and thought provoking essay in response. What is the Status of Knowledge?",
    "content": [],
    "summary": "After Shunyamurti’s interview with Rick Archer on Buddha at the Gas Pump, in January 2017, the two continued a correspondence via email. Their conversation was far reaching and included a profound question from Rick:\n“Can we know anything with certai",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Philosophy, Science",
    "wordpressId": 1463,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "How Do Nondual Teachings Help Me?",
    "date": "2019-07-01T19:18:45",
    "slug": "how-do-nondual-teachings-help-me",
    "contenttype": "qa_with_shunyamurti",
    "description": "Question: One thing about teaching like this, and that of Tony Parsons, teaching basically “there’s nothing to do, nowhere to go, you’re already there, you can stop searching”: it’s pleasant to listen to, but how does it help the person who just wants to eliminate stress/fear/unpleasant emotions from their experience?  I look at “enlightenment”, “awakening” or whatever you want to call it, and think “how wonderful would it be, to know that whatever happens in my life, if I lose my job and my bills pile up and I can’t pay my rent and go homeless, to know that none of it would ever bother me on an emotional level.  To know that I’ll feel calm and blissful through all of it because I know none of it matters.”  I’m a person who lives in fear of unpleasant experiences, situations, etc. because of the unpleasant emotions I experience.  How does teaching like this help a person like me?",
    "content": [],
    "summary": "Question: One thing about teaching like this, and that of Tony Parsons, teaching basically “there’s nothing to do, nowhere to go, you’re already there, you can stop searching”: it’s pleasant to listen to, but how does it help the person who just want",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Nonduality",
    "wordpressId": 1417,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "What is Prayer?",
    "date": "2019-07-01T11:01:47",
    "slug": "what-is-prayer",
    "contenttype": "qa_with_shunyamurti",
    "description": "Questioner: What is prayer? What is the meaning of it, and how to pray?",
    "content": [],
    "summary": "Questioner: What is prayer? What is the meaning of it, and how to pray?",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Meditation, Overcoming Obstacles",
    "wordpressId": 1268,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "Letting Go of Fantasy",
    "date": "2019-07-01T11:00:36",
    "slug": "letting-go-of-fantasy",
    "contenttype": "qa_with_shunyamurti",
    "description": "Question: When there’s a fantasy and there’s a struggle with it—because you know it’s unreal—but all of the affects that come along with it, all of the narratives, are very persistent. And there’s a point where you just get fed up with it, “I don’t want to be dragged into this anymore. I’m tired of it. I don’t want to be suffering,” but it keeps coming back. Is there any way to—I know it’s a process—but is there any way to accelerate…",
    "content": [],
    "summary": "Question: When there’s a fantasy and there’s a struggle with it—because you know it’s unreal—but all of the affects that come along with it, all of the narratives, are very persistent. And there’s a point where you just get fed up with it, “I don’t w",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Overcoming Obstacles, Psychoanalysis",
    "wordpressId": 1266,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "Psychoanalysis &amp; Sat Yoga",
    "date": "2019-06-30T22:46:12",
    "slug": "psychoanalysis-sat-yoga",
    "contenttype": "qa_with_shunyamurti",
    "description": "Question: How were you able to unify the approach of psychoanalysis to bring it to be more humanistic?",
    "content": [],
    "summary": "Question: How were you able to unify the approach of psychoanalysis to bring it to be more humanistic?",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Psychoanalysis",
    "wordpressId": 1245,
    "transcription": "",
    "source_file": "textqna.json"
  },
  {
    "title": "The Status of the World",
    "date": "2019-06-30T22:22:24",
    "slug": "the-status-of-the-world",
    "contenttype": "qa_with_shunyamurti",
    "description": "Question: Isn’t there a philosophical contradiction in being concerned for this world (others) whilst at the same time being aware it simply isn’t real, a mere projection from our minds which should evaporate once we are absorbed by the Real?",
    "content": [],
    "summary": "Question: Isn’t there a philosophical contradiction in being concerned for this world (others) whilst at the same time being aware it simply isn’t real, a mere projection from our minds which should evaporate once we are absorbed by the Real?",
    "featuredImage": "https://www.members.satyoga.org/wp-content/uploads/sites/5/2020/05/2-1.jpg",
    "videoUrl": "",
    "videoPlatform": "none",
    "videoId": null,
    "audioUrl": "",
    "audioPlatform": "none",
    "duration": "",
    "access": "anon",
    "hiddenTags": "Nonduality, Philosophy",
    "wordpressId": 1188,
    "transcription": "",
    "source_file": "textqna.json"
  }
]

  // lib/json_dump.ts

/**
 * JSON structure written by dumps-to-strapi.js
 * (feel free to extend – these are the fields the UI actually uses)
 */

/**
 * Massage the raw dump just once on import:
 *  – add a human-readable date
 *  – map enum labels to the ones the UI expects
 */
const contentTypeMap = {
    teaching            : 'Teachings',
    guided_meditation   : 'Guided Meditations',
    qa_with_shunyamurti : 'Q&A with Shunyamurti',
    essay               : 'Essay',
  } as const;  

export const teachings: any[] = (seed as any[])
  .map(t => ({
    ...t,
    id   : t.videoId,
    type : t.access === 'anon' || t.access === 'free' ? 'free' : 'membership',
    date : new Date().toLocaleDateString('en-US', {  // use WP date if you stored it
      year: 'numeric', month: 'long', day: 'numeric'
    }),
    imageUrl: t.featuredImage || '/placeholder-video.jpg',
    contentType: contentTypeMap[t.contenttype as keyof typeof contentTypeMap],
  }));

// === ./src/lib/mock-data.ts ===
export const generateMockData = (count: number) => {
    const programs = ['shakti', 'sevadhari', 'darshan']
    const statuses = ['pending', 'under_review', 'accepted', 'rejected']
    const nationalities = ['USA', 'Canada', 'UK', 'France', 'Germany', 'Spain', 'Brazil', 'Mexico', 'India', 'Australia']
    const maritalStatuses = ['single', 'married', 'divorced', 'widowed', 'separated', 'partnership', 'celibate']
    const membershipStatuses = ['free_trial', 'gyani', 'vigyani', 'pragyani', 'none']
    const connectionSources = ['past_visitor', 'word_of_mouth', 'internet_search', 'newsletter', 'youtube', 'facebook', 'twitter', 'instagram', 'podcast']
  
    return Array.from({ length: count }, (_, index) => ({
      id: index + 1,
      attributes: {
        email: `user${index + 1}@example.com`,
        firstName: `FirstName${index + 1}`,
        lastName: `LastName${index + 1}`,
        programType: programs[Math.floor(Math.random() * programs.length)],
        programDate: new Date(2024, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString(),
        gender: Math.random() > 0.5 ? 'male' : 'female',
        dateOfBirth: new Date(1970 + Math.floor(Math.random() * 30), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString(),
        currentAge: 25 + Math.floor(Math.random() * 40),
        phone: `+1${Math.floor(Math.random() * 9000000000) + 1000000000}`,
        maritalStatus: maritalStatuses[Math.floor(Math.random() * maritalStatuses.length)],
        nationality: nationalities[Math.floor(Math.random() * nationalities.length)],
        residence: `City${index + 1}, Country${index + 1}`,
        occupation: `Occupation${index + 1}`,
        
        // Membership details
        connection: connectionSources[Math.floor(Math.random() * connectionSources.length)],
        membershipStatus: membershipStatuses[Math.floor(Math.random() * membershipStatuses.length)],
        hasAttendedOnlineRetreats: Math.random() > 0.5,
        teachingsFamiliarity: `Experience level ${Math.floor(Math.random() * 5) + 1}/5`,
        
        // Health information
        hasHealthConditions: Math.random() > 0.7,
        hasMedications: Math.random() > 0.7,
        hasDietaryRestrictions: Math.random() > 0.6,
        
        // Covid status
        isVaccinated: Math.random() > 0.5,
        hasVaccinatedHousehold: Math.random() > 0.5,
        
        // Program status
        status: statuses[Math.floor(Math.random() * statuses.length)],
        hasProgramFunds: Math.random() > 0.2,
        healthInsuranceStatus: ['yes', 'no', 'will_get'][Math.floor(Math.random() * 3)],
        
        // Timestamps
        createdAt: new Date(2024, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString(),
        updatedAt: new Date(2024, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString(),
      }
    }))
  }
  
// === ./src/lib/services/cloudflareStreamService.ts ===
// services/cloudflareStreamService.ts

/**
 * Service for Cloudflare Stream API integration
 */

const CLOUDFLARE_STREAM_TOKEN = '6PZUBMGApjO-FTZGt9yFMENyQ_fTSMG1mk2eIeA-';
const CLOUDFLARE_ACCOUNT_ID = '6ff5acb9f54ba5e1132b12c7a7732ab8'; // Your Cloudflare account ID

// Cache for video data
let videoCache: any[] = [];

export interface Teaching {
  id: string;
  title: string;
  description: string;
  duration: string;
  type: 'free' | 'membership';
  imageUrl: string;
  videoId: string;
  contentType: string;
  date?: string;
  summary?: string;
  additionalInfo?: string;
}

/**
 * Fetch videos from Cloudflare Stream API
 */
export async function fetchStreamVideos(): Promise<any[]> {
  try {
    const response = await fetch(
      `https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/stream`,
      {
        headers: {
          'Authorization': `Bearer ${CLOUDFLARE_STREAM_TOKEN}`,
          'Content-Type': 'application/json',
        }
      }
    );
    
    if (!response.ok) {
      throw new Error(`Error fetching videos: ${response.status}`);
    }
    
    const data = await response.json();
    
    // Cache the video data
    if (data.result && Array.isArray(data.result)) {
      videoCache = data.result;
    }
    
    return data.result;
  } catch (error) {
    console.error('Failed to fetch videos from Cloudflare Stream:', error);
    return [];
  }
}

/**
 * Get details for a specific video
 */
export async function fetchVideoDetails(videoId: string): Promise<any | null> {
  if (!videoId) {
    console.error('Missing video ID in fetchVideoDetails');
    return null;
  }
  
  // First check if we have this video in the cache
  const cachedVideo = videoCache.find(video => video.uid === videoId);
  if (cachedVideo) {
    return cachedVideo;
  }
  
  try {
    const response = await fetch(
      `https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/stream/${videoId}`,
      {
        headers: {
          'Authorization': `Bearer ${CLOUDFLARE_STREAM_TOKEN}`,
          'Content-Type': 'application/json',
        }
      }
    );
    
    if (!response.ok) {
      if (response.status === 404) {
        console.error(`Video not found: ${videoId}`);
        return null;
      }
      throw new Error(`Error fetching video details: ${response.status}`);
    }
    
    const data = await response.json();
    return data.result;
  } catch (error) {
    console.error(`Failed to fetch details for video ${videoId}:`, error);
    return null;
  }
}

/**
 * Get a Cloudflare Stream video URL
 */
export function getStreamVideoUrl(videoId: string): string {
  if (!videoId) {
    console.error('Missing video ID in getStreamVideoUrl');
    return '';
  }
  
  // Using standard Cloudflare Stream URL format
  return `https://${CLOUDFLARE_ACCOUNT_ID}.cloudflarestream.com/${videoId}/manifest/video.m3u8`;
}

/**
 * Get a thumbnail URL for a video
 */
export function getStreamThumbnailUrl(videoId: string): string {
  if (!videoId) {
    console.error('Missing video ID in getStreamThumbnailUrl');
    return '/placeholder-video.jpg';
  }
  
  // Using the correct thumbnail URL format based on Cloudflare docs
  return `https://videodelivery.net/${videoId}/thumbnails/thumbnail.jpg`;
}

/**
 * Fetch real videos from API and convert to our format
 */
export async function fetchAndProcessVideos(): Promise<Teaching[]> {
  try {
    const videos = await fetchStreamVideos();
    
    if (!videos || videos.length === 0) {
      console.warn('No videos found or error fetching videos');
      return [];
    }
    
    return videos.map((video: any, index: number) => {
      // First 3 videos are free, the rest require membership
      const isFree = index < 3;
      
      // Extract creation date if available
      const createdDate = video.created ? new Date(video.created) : new Date();
      const formattedDate = createdDate.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      return {
        id: video.uid,
        title: video.meta?.name || `Teaching ${index + 1}`,
        description: video.meta?.description || "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        duration: formatDuration(video.duration),
        type: isFree ? 'free' : 'membership',
        imageUrl: getStreamThumbnailUrl(video.uid),
        videoId: video.uid,
        contentType: 'Teachings',
        date: formattedDate
      };
    });
  } catch (error) {
    console.error('Error processing videos:', error);
    return [];
  }
}

/**
 * Get video IDs from the API or cache
 */
export async function getVideoIds(): Promise<string[]> {
  // If we have cached videos, use those
  if (videoCache.length > 0) {
    return videoCache.map(video => video.uid);
  }
  
  try {
    // Otherwise fetch videos from API
    const videos = await fetchStreamVideos();
    return videos.map(video => video.uid);
  } catch (error) {
    console.error('Error getting video IDs:', error);
    return [];
  }
}

/**
 * Format duration from seconds to "MM:SS" or "HH:MM:SS"
 */
export function formatDuration(seconds?: number): string {
  if (!seconds) return '0:00';
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  
  if (hours > 0) {
    return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
  }
  
  return `${minutes} minutes`;
}
// === ./src/lib/services/tilopay.ts ===
/**
 * Tilopay API Service
 * 
 * This service handles interactions with Tilopay payment gateway.
 * https://app.tilopay.com/api/v1/
 */

// Tilopay API credentials from environment variables
const API_USER = process.env.NEXT_PUBLIC_TILOPAY_API_USER || '';
const API_PASSWORD = process.env.NEXT_PUBLIC_TILOPAY_API_PASSWORD || '';
const API_KEY = process.env.NEXT_PUBLIC_TILOPAY_API_KEY || '';
const TILOPAY_BASE_URL = 'https://app.tilopay.com/api/v1';

/**
 * Get authentication token from Tilopay
 */
export async function getTilopayToken(): Promise<string> {
  try {
    const response = await fetch(`${TILOPAY_BASE_URL}/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        apiuser: API_USER,
        password: API_PASSWORD
      })
    });

    if (!response.ok) {
      throw new Error(`Failed to get Tilopay token: ${response.statusText}`);
    }

    const data = await response.json();
    return data.access_token;
  } catch (error) {
    console.error('Error getting Tilopay token:', error);
    throw error;
  }
}

/**
 * Process payment through Tilopay API
 * This is used for membership payments, which can be one-time or recurring
 */
export async function processPayment(paymentData: any): Promise<any> {
  try {
    // First get authentication token
    const token = await getTilopayToken();
    
    // Determine if we need to handle this as a recurring payment
    const isRecurring = paymentData.subscription === '1' && 
                        (paymentData.frecuency === '3' || paymentData.frecuency === '4');
                        
    // Choose the appropriate endpoint based on whether this is recurring
    const endpoint = isRecurring ? 
      `${TILOPAY_BASE_URL}/processRecurrentPayment` : 
      `${TILOPAY_BASE_URL}/processPayment`;
    
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: {
        'Authorization': `bearer ${token}`,
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        ...paymentData,
        key: API_KEY,
        platform: 'satyoga-website'
      })
    });

    if (!response.ok) {
      throw new Error(`Failed to process payment: ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('Error processing payment:', error);
    throw error;
  }
}

/**
 * Process recurring payment through Tilopay API
 * This is used for subscription payments with direct API integration
 */
export async function processRecurrentPayment(paymentData: any, cardData: any): Promise<any> {
    try {
      // First get authentication token
      const token = await getTilopayToken();
      
      // Combine payment data with card information
      const fullPaymentData = {
        ...paymentData,
        // Add card details - these are required for direct API integration
        card: cardData.cardNumber.replace(/\s+/g, ''),
        card_exp: cardData.expiryDate.replace('/', ''),
        card_cvv: cardData.cvv,
        email: paymentData.billToEmail,
        key: API_KEY,
        platform: 'satyoga-website'
      };
      
      const response = await fetch(`${TILOPAY_BASE_URL}/processRecurrentPayment`, {
        method: 'POST',
        headers: {
          'Authorization': `bearer ${token}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(fullPaymentData)
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Tilopay API error:', errorData);
        throw new Error(errorData.message || 'Failed to process payment');
      }
  
      return await response.json();
    } catch (error) {
      console.error('Error processing recurring payment:', error);
      throw error;
    }
  }

/**
 * Format donation data for Tilopay (NEW FUNCTION FOR DONATIONS)
 */
export function formatTilopayDonationData(formData: any, donationDetails: any) {
    // Generate a unique order number for donations
    const orderNumber = `SATYOGA-DONATION-${donationDetails.category.replace(/\s+/g, '-').toUpperCase()}-${Date.now()}`;
    
    // Base URL for redirect
    const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';
    
    // Construct the return data to be passed back to our success page
    const returnDataObj = {
      donationType: 'donation',
      donationCategory: donationDetails.category,
      amount: donationDetails.amount,
      donorName: `${formData.firstName} ${formData.lastName}`,
      donorEmail: formData.email,
      message: formData.message
    };
    
    // Encode the return data as base64
    const returnData = btoa(JSON.stringify(returnDataObj));
    
    // Payment data for donations (always one-time payments)
    const paymentData = {
      redirect: `${baseUrl}/donate/success`, // or wherever you want to redirect after donation
      key: API_KEY,
      amount: donationDetails.amount,
      currency: 'USD',
      orderNumber,
      capture: '1',
      billToFirstName: formData.firstName || '',
      billToLastName: formData.lastName || '',
      billToAddress: formData.address || 'N/A',
      billToAddress2: formData.address2 || '',
      billToCity: formData.city || 'N/A',
      billToState: formData.state || 'N/A',
      billToZipPostCode: formData.zipCode || '00000',
      billToCountry: formData.country || 'CR',
      billToTelephone: formData.phone || '00000000',
      billToEmail: formData.email || '',
      // The shipping info is required, but we'll just duplicate billing for donations
      shipToFirstName: formData.firstName || '',
      shipToLastName: formData.lastName || '',
      shipToAddress: formData.address || 'N/A',
      shipToAddress2: formData.address2 || '',
      shipToCity: formData.city || 'N/A',
      shipToState: formData.state || 'N/A',
      shipToZipPostCode: formData.zipCode || '00000',
      shipToCountry: formData.country || 'CR',
      shipToTelephone: formData.phone || '00000000',
      returnData,
      platform: 'satyoga-website',
      hashVersion: 'V2',
      subscription: '0', // Donations are always one-time payments
    };
    
    return paymentData;
}

/**
 * Format the customer data for Tilopay (EXISTING FUNCTION FOR MEMBERSHIPS)
 */
export function formatTilopayData(formData: any, membershipDetails: any) {
    // Generate a unique order number based on timestamp and membership info
    const orderNumber = `MEMBERSHIP-${(membershipDetails.planId || 'UNKNOWN').toUpperCase()}-${Date.now()}`;
    
    // Determine if we should use subscription or one-time payment
    const useSubscription = membershipDetails.billingType === 'monthly';
    
    // Base URL for redirect
    const baseUrl = typeof window !== 'undefined' ? window.location.origin : '';
    
    // Determine pricing frequency code based on billing type
    // Tilopay frequency codes: 1=Daily, 2=Weekly, 3=Monthly, 4=Annual, etc.
    const frequencyCode = membershipDetails.billingType === 'monthly' ? '3' : '4'; 
    
    // Construct the return data to be passed back to our success page
    const returnDataObj = {
      membershipPlan: membershipDetails.planName,
      membershipType: membershipDetails.billingType,
      amount: membershipDetails.amount,
      hasTrial: membershipDetails.hasTrial,
      trialDays: membershipDetails.trialDays,
      memberName: `${formData.firstName} ${formData.lastName}`,
      memberEmail: formData.email,
      donationAmount: formData.donationAmount || '0'
    };
    
    // Encode the return data as base64
    const returnData = btoa(JSON.stringify(returnDataObj));
    
    // Common payment data for both one-time and recurring payments
    const paymentData = {
      redirect: `${baseUrl}/membership/success`,
      key: API_KEY,
      amount: membershipDetails.amount,
      currency: 'USD',
      orderNumber,
      capture: '1',
      billToFirstName: formData.firstName || '',
      billToLastName: formData.lastName || '',
      billToAddress: formData.address || 'N/A',
      billToAddress2: '',
      billToCity: formData.city || 'N/A',
      billToState: formData.state || 'N/A',
      billToZipPostCode: formData.postalCode || '00000',
      billToCountry: formData.country || 'CR',
      billToTelephone: '00000000', // Replace with actual phone if collected
      billToEmail: formData.email || '',
      // The shipping info is required, but we'll just duplicate billing for memberships
      shipToFirstName: formData.firstName || '',
      shipToLastName: formData.lastName || '',
      shipToAddress: formData.address || 'N/A',
      shipToAddress2: '',
      shipToCity: formData.city || 'N/A',
      shipToState: formData.state || 'N/A',
      shipToZipPostCode: formData.postalCode || '00000',
      shipToCountry: formData.country || 'CR',
      shipToTelephone: '00000000', // Replace with actual phone if collected
      returnData,
      platform: 'satyoga-website',
      hashVersion: 'V2',
    };
    
    // For zero-dollar transactions, set a minimum amount for Tilopay
    // Some payment processors require a minimum amount (e.g., $0.50)
    if (parseFloat(membershipDetails.amount) === 0) {
      paymentData.amount = '0.50'; // Set a minimum amount
    }
    
    // Additional fields for recurring payments
    if (useSubscription) {
      return {
        ...paymentData,
        subscription: '1',
        frecuency: frequencyCode,
        trial: membershipDetails.hasTrial ? '1' : '0',
        trial_days: membershipDetails.trialDays?.toString() || '0',
        attempts: '3', // Number of retry attempts for failed charges
      };
    } else {
      // For annual plans, we'll use standard payment
      return {
        ...paymentData,
        subscription: '0',
      };
    }
  }

/**
 * Validate a discount code
 */
export async function validateDiscountCode(code: string): Promise<any> {
  try {
    // First get authentication token
    const token = await getTilopayToken();
    
    const response = await fetch(`${TILOPAY_BASE_URL}/getCoupon`, {
      method: 'POST',
      headers: {
        'Authorization': `bearer ${token}`,
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        key: API_KEY,
        id: code
      })
    });

    if (!response.ok) {
      return { isValid: false, message: 'Invalid discount code' };
    }

    const data = await response.json();
    return { 
      isValid: true, 
      discount: data.discount || 0,
      discountType: data.type || 'percentage'
    };
  } catch (error) {
    console.error('Error validating discount code:', error);
    return { isValid: false, message: 'Error validating discount code' };
  }
}
// === ./src/lib/strapi.ts ===
/**
 * Utility functions for interacting with the Strapi API
 */

const API_URL =
  process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://127.0.0.1:1337";

/**
 * Get auth token from local storage
 */
export const getToken = (): string | null => {
  //   if (typeof window === "undefined") {
  //     // For server-side rendering, use the environment variable directly
  //     return process.env.NEXT_PUBLIC_STRAPI_TOKEN || null;
  //   }
  //   // For client-side, we could either use localStorage or the environment variable
  //   return (
  //     localStorage.getItem("jwt") || process.env.NEXT_PUBLIC_STRAPI_TOKEN || null
  //   );

  return process.env.NEXT_PUBLIC_STRAPI_API_TOKEN || null;
};

/**
 * Basic headers for API requests
 */
export const getHeaders = (includeAuth = true): Record<string, string> => {
  const headers: Record<string, string> = {
    "Content-Type": "application/json",
  };

  if (includeAuth) {
    const token = getToken();
    if (token) {
      headers["Authorization"] = `Bearer ${token}`;
    }
  }

  return headers;
};

/**
 * Fetch data from Strapi API with better error handling
 */
export async function fetchAPI<T>(
  endpoint: string,
  options: RequestInit = {}
): Promise<T> {
  const defaultOptions: RequestInit = {
    headers: getHeaders(),
  };

  const mergedOptions = {
    ...defaultOptions,
    ...options,
    headers: {
      ...defaultOptions.headers,
      ...options.headers,
    },
  };

  const response = await fetch(`${API_URL}${endpoint}`, mergedOptions);

  if (!response.ok) {
    const error = await response.json();
    console.log(error);
    throw new Error(error.error?.message || `API error: ${response.status}`);
  }

  return await response.json();
}

/**
 * Helper to build Strapi URL with filters and pagination
 */
export const buildStrapiUrl = (
  endpoint: string,
  filters?: Record<string, unknown>,
  pagination?: { page?: number; pageSize?: number; publicationState?: string },
  sort?: string | string[],
  populate?: string | string[]
): string => {
  const params = new URLSearchParams();

  // Add filters
  if (filters) {
    Object.entries(filters).forEach(([key, value]) => {
      if (typeof value === "object" && value !== null) {
        Object.entries(value as Record<string, unknown>).forEach(
          ([operator, operatorValue]) => {
            params.append(
              `filters[${key}][${operator}]`,
              String(operatorValue)
            );
          }
        );
      } else {
        params.append(`filters[${key}]`, String(value));
      }
    });
  }

  // Add pagination
  if (pagination) {
    if (pagination.page) {
      params.append("pagination[page]", String(pagination.page));
    }
    if (pagination.pageSize) {
      params.append("pagination[pageSize]", String(pagination.pageSize));
    }
    // Add publication state if provided
    if (pagination.publicationState) {
      params.append("publicationState", pagination.publicationState);
    }
  }

  // Add sorting
  if (sort) {
    if (Array.isArray(sort)) {
      sort.forEach((s) => {
        params.append("sort", s);
      });
    } else {
      params.append("sort", sort);
    }
  }

  // Add population
  if (populate) {
    if (Array.isArray(populate)) {
      populate.forEach((p) => {
        params.append("populate", p);
      });
    } else {
      params.append("populate", populate);
    }
  }

  const queryString = params.toString();
  return `${endpoint}${queryString ? `?${queryString}` : ""}`;
};

/**
 * Blog specific API methods
 */
export const blogApi = {
  /**
   * Get all blog posts with pagination
   */
  getPosts: async (
    page = 1,
    pageSize = 10,
    search = "",
    sort = "createdAt:desc"
  ) => {
    const filters = search ? { title: { $containsi: search } } : undefined;
    const url = buildStrapiUrl(
      "/api/blog-posts",
      filters,
      { page, pageSize },
      sort,
      ["category", "author"]
    );
    return fetchAPI(url);
  },

  /**
   * Get a single blog post by ID
   */
  getPost: async (id: string) => {
    return fetchAPI(`/api/blog-posts/${id}?populate=category,author`);
  },

  /**
   * Create a new blog post
   */
  createPost: async (postData: any) => {
    return fetchAPI("/api/blog-posts", {
      method: "POST",
      body: JSON.stringify({ data: postData }),
    });
  },

  /**
   * Update an existing blog post
   */
  updatePost: async (id: string, postData: any) => {
    return fetchAPI(`/api/blog-posts/${id}`, {
      method: "PUT",
      body: JSON.stringify({ data: postData }),
    });
  },

  /**
   * Delete a blog post
   */
  deletePost: async (id: string) => {
    return fetchAPI(`/api/blog-posts/${id}`, {
      method: "DELETE",
    });
  },

  /**
   * Get all blog categories
   */
  getCategories: async () => {
    return fetchAPI("/api/blog-categories?sort=name:asc");
  },

  createCategory: async (categoryData: any) => {
    return fetchAPI("/api/blog-categories", {
      method: "POST",
      body: JSON.stringify({ data: categoryData }),
    });
  },

  /**
   * Get a single blog post by slug
   */
  getBlogPostBySlug: async (slug: string) => {
    try {
      const url = buildStrapiUrl(
        "/api/blog-posts",
        { slug: { $eq: slug } },
        undefined,
        undefined,
        ["featuredImage", "author", "category", "seo"]
      );

      // Add more detailed console logging to see the response structure
      console.log(`Fetching blog post with slug: ${slug}`);

      const data: any = await fetchAPI(url);
      console.log("Blog post data structure:", JSON.stringify(data, null, 2));

      if (!data || !data.data || data.data.length === 0) {
        return null;
      }

      return data.data[0];
    } catch (error) {
      console.error(`Error fetching blog post with slug "${slug}":`, error);
      return null;
    }
  },

  /**
   * Get related blog posts (posts in the same category)
   */
  getRelatedPosts: async (
    categoryId: string,
    currentPostId: string,
    limit = 2
  ) => {
    try {
      // Make sure we have valid integers for both IDs
      const categoryIdInt = parseInt(categoryId, 10);
      const currentPostIdInt = parseInt(currentPostId, 10);

      // Skip category filter if categoryId is invalid
      if (isNaN(categoryIdInt)) {
        console.warn("Invalid category ID, fetching recent posts instead");

        // Fallback to just get latest posts excluding current post
        const url = buildStrapiUrl(
          "/api/blog-posts",
          {
            id: { $ne: currentPostIdInt }, // Exclude current post only
          },
          { pageSize: limit },
          ["publishedAt:desc"],
          ["featuredImage", "author", "category"]
        );

        return await fetchAPI(url);
      }

      // Use proper category filtering with valid integers
      const url = buildStrapiUrl(
        "/api/blog-posts",
        {
          // Filter by category, ensuring it's properly formatted
          category: { id: categoryIdInt },
          // Exclude current post
          id: { $ne: currentPostIdInt },
        },
        { pageSize: limit },
        ["publishedAt:desc"],
        ["featuredImage", "author", "category"]
      );

      return await fetchAPI(url);
    } catch (error) {
      console.error(
        `Error fetching related posts for category "${categoryId}":`,
        error
      );
      // Return an empty result instead of failing
      return { data: [] };
    }
  },
};

/**
 * Homepage and general API methods
 */
export const homeApi = {
  /**
   * Get homepage data with all sections
   */
  getHomePageData: async () => {
    try {
      // Try three different approaches to populate data and use the first one that works

      // Approach 1: Simple populate parameter string
      const url1 =
        "/api/home-page?populate=hero,aboutSection,shunyamurtiSection,learningOptions.tabs,membershipCta,seo";
      console.log("Trying URL approach 1:", url1);

      try {
        const result1: any = await fetchAPI(url1);
        console.log(
          "Approach 1 succeeded! Response structure:",
          Object.keys(result1)
        );

        // Check if we have the expected data structure
        if (result1.data && result1.data.attributes) {
          console.log(
            "Data attributes available:",
            Object.keys(result1.data.attributes)
          );
          return result1.data.attributes;
        } else {
          console.log(
            "Expected data structure not found in approach 1 response"
          );
          // Continue to next approach if we don't have the expected structure
        }
      } catch (error1) {
        console.log(
          "Approach 1 failed:",
          error1 instanceof Error ? error1.message : String(error1)
        );
        // Continue to next approach if this one fails
      }

      // Approach 2: Expanded populate syntax
      const url2 =
        "/api/home-page?populate[hero][populate]=*&populate[aboutSection][populate]=*&populate[shunyamurtiSection][populate]=*&populate[learningOptions][populate][tabs][populate]=*&populate[membershipCta][populate]=*&populate[seo][populate]=*";
      console.log("Trying URL approach 2:", url2);

      try {
        const result2: any = await fetchAPI(url2);
        console.log(
          "Approach 2 succeeded! Response structure:",
          Object.keys(result2)
        );

        if (result2.data && result2.data.attributes) {
          console.log(
            "Data attributes available:",
            Object.keys(result2.data.attributes)
          );
          return result2.data.attributes;
        } else {
          console.log(
            "Expected data structure not found in approach 2 response"
          );
        }
      } catch (error2) {
        console.log(
          "Approach 2 failed:",
          error2 instanceof Error ? error2.message : String(error2)
        );
      }

      // Approach 3: Deep populate with nested objects
      const populateObj = {
        populate: {
          hero: { populate: "*" },
          aboutSection: { populate: "*" },
          shunyamurtiSection: { populate: "*" },
          learningOptions: {
            populate: {
              tabs: { populate: "*" },
            },
          },
          membershipCta: { populate: "*" },
          seo: { populate: "*" },
        },
      };

      // Convert to query string manually
      const url3 = `/api/home-page?${new URLSearchParams({
        populate: JSON.stringify(populateObj.populate),
      }).toString()}`;
      console.log("Trying URL approach 3:", url3);

      try {
        const result3: any = await fetchAPI(url3);
        console.log(
          "Approach 3 succeeded! Response structure:",
          Object.keys(result3)
        );

        if (result3.data && result3.data.attributes) {
          console.log(
            "Data attributes available:",
            Object.keys(result3.data.attributes)
          );
          return result3.data.attributes;
        } else {
          console.log(
            "Expected data structure not found in approach 3 response"
          );
        }
      } catch (error3) {
        console.log(
          "Approach 3 failed:",
          error3 instanceof Error ? error3.message : String(error3)
        );
      }

      // If we get here, all approaches failed but didn't throw
      // Return a minimal structure to prevent errors
      console.log(
        "All approaches completed but didn't return valid data structure. Returning minimal structure."
      );
      return {};
    } catch (error) {
      console.error("Error fetching homepage data:", error);
      throw error;
    }
  },
  /**
   * Get featured blog posts for homepage
   */
  getFeaturedBlogPosts: async (limit = 5) => {
    try {
      // First, try a straightforward approach with populate
      const url = `/api/blog-posts?sort=publishedAt:desc&pagination[pageSize]=${limit}&populate=featuredImage,author,category`;
      console.log("Fetching blog posts from:", url);

      // Request with detailed logging
      try {
        const response: any = await fetchAPI(url);

        // Log information about the response structure
        console.log(
          "Blog API response structure:",
          Object.keys(response).join(", "),
          response.data
            ? `Data array length: ${response.data.length}`
            : "No data array"
        );

        // Log sample of first post if available
        if (response.data && response.data.length > 0) {
          const firstPost = response.data[0];
          console.log("First post ID:", firstPost.id);
          console.log(
            "First post attributes keys:",
            Object.keys(firstPost.attributes || {}).join(", ")
          );

          // Check for image data
          if (firstPost.attributes?.featuredImage) {
            console.log(
              "Image data structure:",
              JSON.stringify(
                firstPost.attributes.featuredImage,
                null,
                2
              ).substring(0, 200) + "..."
            );
          }
        }

        return response;
      } catch (error) {
        console.error("First blog fetch approach failed:", error);

        // Try an alternative approach with deep populate
        const url2 = `/api/blog-posts?sort=publishedAt:desc&pagination[pageSize]=${limit}&populate[featuredImage][populate]=*&populate[author][populate]=*&populate[category][populate]=*`;
        console.log("Trying alternative blog fetch approach:", url2);

        const response2 = await fetchAPI(url2);
        return response2;
      }
    } catch (error) {
      console.error("Error fetching featured blog posts:", error);
      // Return an empty result instead of throwing
      return { data: [] };
    }
  },
  /**
   * Get upcoming events
   */
  getUpcomingEvents: async (type = "all", limit = 10) => {
    try {
      const now = new Date().toISOString();

      // Build filters
      let filters: any = {
        startDate: {
          $gt: now,
        },
      };

      // Add location type filter if provided
      if (type === "onsite" || type === "online") {
        filters.location = {
          $eq: type.charAt(0).toUpperCase() + type.slice(1),
        };
      }

      const url = buildStrapiUrl(
        "/api/events",
        filters,
        { pageSize: limit },
        "startDate:asc",
        "*"
      );

      return fetchAPI(url);
    } catch (error) {
      console.error("Error fetching upcoming events:", error);
      throw error;
    }
  },
};

export default {
  fetchAPI,
  blogApi,
  homeApi,
  getToken,
  getHeaders,
  buildStrapiUrl,
};

// === ./src/lib/strapiDebug.ts ===

// === ./src/lib/types.ts ===
export interface Teaching {
  // keys coming from lib/json_dump.ts
  id: string | null;                // cloudflare uid or null
  slug: string;
  title: string;
  description: string;
  summary?: string;
  additionalInfo?: string;

  contenttype: string;             // original enum
  contentType: 'Teachings' | 'Guided Meditations' | 'Q&A with Shunyamurti' | 'Essay';

  type: 'free' | 'membership';     // anon/free → free   |   others → membership
  duration: string;
  date: string;

  imageUrl: string;
  videoPlatform: 'cloudflare' | 'youtube' | 'rumble' | 'none';
  videoId: string | null;          // uid or youtube id
  videoUrl: string | null;
  audioPlatform: 'podbean' | 'direct' | 'none';
  audioUrl: string | null;

  transcription?: string;          // essays / text
  content?: unknown[];             // rich-text blocks, ignore here
  hiddenTags?: string;
}

// === ./src/lib/utils.ts ===
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// === ./src/middleware.ts ===
import { NextResponse } from "next/server";
import { withAuth } from "next-auth/middleware";

// This middleware runs for every request that matches the matcher patterns
export default withAuth(
  function middleware(req) {
    const { pathname } = req.nextUrl;
    const token = req.nextauth.token;

    // Debug - log the token and path
    console.log(`Middleware checking path: ${pathname}`);
    console.log("Token data:", JSON.stringify({
      exists: !!token,
      role: token?.role,
    }, null, 2));

    // Check if the user is authenticated
    if (!token) {
      console.log("No token found, redirecting to login");
      return NextResponse.redirect(new URL("/login", req.url));
    }

    // Admin route protection
    if (pathname.startsWith("/dashboard/admin")) {
      console.log(`User role: ${token.role}, checking access to admin path`);
      
      if (token.role !== "admin") {
        console.log("Non-admin user trying to access admin area, redirecting");
        // Redirect non-admin users who try to access admin routes
        return NextResponse.redirect(new URL("/dashboard/user", req.url));
      } else {
        console.log("Admin user confirmed, allowing access");
      }
    }

    // Allow the request to continue
    console.log("Allowing request to proceed");
    return NextResponse.next();
  },
  {
    callbacks: {
      // The authorized callback is called before middleware to check if the user is allowed to access the page
      authorized: ({ token }) => {
        const isAuthorized = !!token;
        console.log("Authorization check:", isAuthorized ? "passed" : "failed");
        return isAuthorized;
      },
    },
  }
);

// Configure which paths this middleware is applied to
export const config = {
  matcher: [
    // Protect dashboard route and all sub-routes under it
    "/dashboard", 
    "/dashboard/:path*"
  ],
};
// === ./src/types/next-auth.d.ts ===
import NextAuth, { DefaultSession } from "next-auth";
import { JWT } from "next-auth/jwt";

declare module "next-auth" {
  /**
   * Extend the built-in session types
   */
  interface Session {
    user: {
      id: string;
      jwt: string;
      role: string;
    } & DefaultSession["user"];
  }

  /**
   * Extend the built-in user types
   */
  interface User {
    id: string;
    jwt: string;
    role: string;
  }
}

declare module "next-auth/jwt" {
  /**
   * Extend the built-in JWT types
   */
  interface JWT {
    id: string;
    jwt: string;
    role: string;
  }
}
// === ./tailwind.config.ts ===
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

// === ./tsconfig.json ===
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

